/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.examples.baseball;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Test all stringable implementations */
@org.apache.avro.specific.AvroGenerated
public class RecordWithStringables extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1783589797593316761L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordWithStringables\",\"namespace\":\"avro.examples.baseball\",\"doc\":\"Test all stringable implementations\",\"fields\":[{\"name\":\"bigDecimal\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"}},{\"name\":\"bigInteger\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigInteger\"}},{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.net.URI\"}},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.net.URL\"}},{\"name\":\"file\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.io.File\"}},{\"name\":\"nullableBigDecimal\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<RecordWithStringables> ENCODER =
      new BinaryMessageEncoder<RecordWithStringables>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordWithStringables> DECODER =
      new BinaryMessageDecoder<RecordWithStringables>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordWithStringables> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordWithStringables> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordWithStringables> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordWithStringables>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordWithStringables to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordWithStringables from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordWithStringables instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordWithStringables fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.math.BigDecimal bigDecimal;
  private java.math.BigInteger bigInteger;
  private java.net.URI uri;
  private java.net.URL url;
  private java.io.File file;
  private java.math.BigDecimal nullableBigDecimal;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordWithStringables() {}

  /**
   * All-args constructor.
   * @param bigDecimal The new value for bigDecimal
   * @param bigInteger The new value for bigInteger
   * @param uri The new value for uri
   * @param url The new value for url
   * @param file The new value for file
   * @param nullableBigDecimal The new value for nullableBigDecimal
   */
  public RecordWithStringables(java.math.BigDecimal bigDecimal, java.math.BigInteger bigInteger, java.net.URI uri, java.net.URL url, java.io.File file, java.math.BigDecimal nullableBigDecimal) {
    this.bigDecimal = bigDecimal;
    this.bigInteger = bigInteger;
    this.uri = uri;
    this.url = url;
    this.file = file;
    this.nullableBigDecimal = nullableBigDecimal;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bigDecimal;
    case 1: return bigInteger;
    case 2: return uri;
    case 3: return url;
    case 4: return file;
    case 5: return nullableBigDecimal;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        if (null != value$) {
          bigDecimal = new java.math.BigDecimal(value$.toString());
        }
        break;
      case 1:
        if (null != value$) {
          bigInteger = new java.math.BigInteger(value$.toString());
        }
        break;
      case 2:
        try {
        if (null != value$) {
          uri = new java.net.URI(value$.toString());
        }
        } catch (java.lang.Exception e) {
          throw new org.apache.avro.AvroRuntimeException(e);
        }
        break;
      case 3:
        try {
        if (null != value$) {
          url = new java.net.URL(value$.toString());
        }
        } catch (java.lang.Exception e) {
          throw new org.apache.avro.AvroRuntimeException(e);
        }
        break;
      case 4:
        if (null != value$) {
          file = new java.io.File(value$.toString());
        }
        break;
      case 5:
        if (null != value$) {
          nullableBigDecimal = new java.math.BigDecimal(value$.toString());
        }
        break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bigDecimal' field.
   * @return The value of the 'bigDecimal' field.
   */
  public java.math.BigDecimal getBigDecimal() {
    return bigDecimal;
  }


  /**
   * Sets the value of the 'bigDecimal' field.
   * @param value the value to set.
   */
  public void setBigDecimal(java.math.BigDecimal value) {
    this.bigDecimal = value;
  }

  /**
   * Gets the value of the 'bigInteger' field.
   * @return The value of the 'bigInteger' field.
   */
  public java.math.BigInteger getBigInteger() {
    return bigInteger;
  }


  /**
   * Sets the value of the 'bigInteger' field.
   * @param value the value to set.
   */
  public void setBigInteger(java.math.BigInteger value) {
    this.bigInteger = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.net.URI getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.net.URI value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.net.URL getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.net.URL value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'file' field.
   * @return The value of the 'file' field.
   */
  public java.io.File getFile() {
    return file;
  }


  /**
   * Sets the value of the 'file' field.
   * @param value the value to set.
   */
  public void setFile(java.io.File value) {
    this.file = value;
  }

  /**
   * Gets the value of the 'nullableBigDecimal' field.
   * @return The value of the 'nullableBigDecimal' field.
   */
  public java.math.BigDecimal getNullableBigDecimal() {
    return nullableBigDecimal;
  }


  /**
   * Sets the value of the 'nullableBigDecimal' field.
   * @param value the value to set.
   */
  public void setNullableBigDecimal(java.math.BigDecimal value) {
    this.nullableBigDecimal = value;
  }

  /**
   * Creates a new RecordWithStringables RecordBuilder.
   * @return A new RecordWithStringables RecordBuilder
   */
  public static avro.examples.baseball.RecordWithStringables.Builder newBuilder() {
    return new avro.examples.baseball.RecordWithStringables.Builder();
  }

  /**
   * Creates a new RecordWithStringables RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordWithStringables RecordBuilder
   */
  public static avro.examples.baseball.RecordWithStringables.Builder newBuilder(avro.examples.baseball.RecordWithStringables.Builder other) {
    if (other == null) {
      return new avro.examples.baseball.RecordWithStringables.Builder();
    } else {
      return new avro.examples.baseball.RecordWithStringables.Builder(other);
    }
  }

  /**
   * Creates a new RecordWithStringables RecordBuilder by copying an existing RecordWithStringables instance.
   * @param other The existing instance to copy.
   * @return A new RecordWithStringables RecordBuilder
   */
  public static avro.examples.baseball.RecordWithStringables.Builder newBuilder(avro.examples.baseball.RecordWithStringables other) {
    if (other == null) {
      return new avro.examples.baseball.RecordWithStringables.Builder();
    } else {
      return new avro.examples.baseball.RecordWithStringables.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordWithStringables instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordWithStringables>
    implements org.apache.avro.data.RecordBuilder<RecordWithStringables> {

    private java.math.BigDecimal bigDecimal;
    private java.math.BigInteger bigInteger;
    private java.net.URI uri;
    private java.net.URL url;
    private java.io.File file;
    private java.math.BigDecimal nullableBigDecimal;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.examples.baseball.RecordWithStringables.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bigDecimal)) {
        this.bigDecimal = data().deepCopy(fields()[0].schema(), other.bigDecimal);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bigInteger)) {
        this.bigInteger = data().deepCopy(fields()[1].schema(), other.bigInteger);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.uri)) {
        this.uri = data().deepCopy(fields()[2].schema(), other.uri);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.file)) {
        this.file = data().deepCopy(fields()[4].schema(), other.file);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.nullableBigDecimal)) {
        this.nullableBigDecimal = data().deepCopy(fields()[5].schema(), other.nullableBigDecimal);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordWithStringables instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.examples.baseball.RecordWithStringables other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bigDecimal)) {
        this.bigDecimal = data().deepCopy(fields()[0].schema(), other.bigDecimal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bigInteger)) {
        this.bigInteger = data().deepCopy(fields()[1].schema(), other.bigInteger);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uri)) {
        this.uri = data().deepCopy(fields()[2].schema(), other.uri);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.file)) {
        this.file = data().deepCopy(fields()[4].schema(), other.file);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nullableBigDecimal)) {
        this.nullableBigDecimal = data().deepCopy(fields()[5].schema(), other.nullableBigDecimal);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'bigDecimal' field.
      * @return The value.
      */
    public java.math.BigDecimal getBigDecimal() {
      return bigDecimal;
    }


    /**
      * Sets the value of the 'bigDecimal' field.
      * @param value The value of 'bigDecimal'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setBigDecimal(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.bigDecimal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bigDecimal' field has been set.
      * @return True if the 'bigDecimal' field has been set, false otherwise.
      */
    public boolean hasBigDecimal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bigDecimal' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearBigDecimal() {
      bigDecimal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bigInteger' field.
      * @return The value.
      */
    public java.math.BigInteger getBigInteger() {
      return bigInteger;
    }


    /**
      * Sets the value of the 'bigInteger' field.
      * @param value The value of 'bigInteger'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setBigInteger(java.math.BigInteger value) {
      validate(fields()[1], value);
      this.bigInteger = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bigInteger' field has been set.
      * @return True if the 'bigInteger' field has been set, false otherwise.
      */
    public boolean hasBigInteger() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bigInteger' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearBigInteger() {
      bigInteger = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.net.URI getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setUri(java.net.URI value) {
      validate(fields()[2], value);
      this.uri = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearUri() {
      uri = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.net.URL getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setUrl(java.net.URL value) {
      validate(fields()[3], value);
      this.url = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearUrl() {
      url = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'file' field.
      * @return The value.
      */
    public java.io.File getFile() {
      return file;
    }


    /**
      * Sets the value of the 'file' field.
      * @param value The value of 'file'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setFile(java.io.File value) {
      validate(fields()[4], value);
      this.file = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'file' field has been set.
      * @return True if the 'file' field has been set, false otherwise.
      */
    public boolean hasFile() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'file' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearFile() {
      file = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableBigDecimal' field.
      * @return The value.
      */
    public java.math.BigDecimal getNullableBigDecimal() {
      return nullableBigDecimal;
    }


    /**
      * Sets the value of the 'nullableBigDecimal' field.
      * @param value The value of 'nullableBigDecimal'.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder setNullableBigDecimal(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.nullableBigDecimal = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableBigDecimal' field has been set.
      * @return True if the 'nullableBigDecimal' field has been set, false otherwise.
      */
    public boolean hasNullableBigDecimal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'nullableBigDecimal' field.
      * @return This builder.
      */
    public avro.examples.baseball.RecordWithStringables.Builder clearNullableBigDecimal() {
      nullableBigDecimal = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordWithStringables build() {
      try {
        RecordWithStringables record = new RecordWithStringables();
        record.bigDecimal = fieldSetFlags()[0] ? this.bigDecimal : (java.math.BigDecimal) defaultValue(fields()[0]);
        record.bigInteger = fieldSetFlags()[1] ? this.bigInteger : (java.math.BigInteger) defaultValue(fields()[1]);
        record.uri = fieldSetFlags()[2] ? this.uri : (java.net.URI) defaultValue(fields()[2]);
        record.url = fieldSetFlags()[3] ? this.url : (java.net.URL) defaultValue(fields()[3]);
        record.file = fieldSetFlags()[4] ? this.file : (java.io.File) defaultValue(fields()[4]);
        record.nullableBigDecimal = fieldSetFlags()[5] ? this.nullableBigDecimal : (java.math.BigDecimal) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordWithStringables>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordWithStringables>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordWithStringables>
    READER$ = (org.apache.avro.io.DatumReader<RecordWithStringables>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bigDecimal.toString());

    out.writeString(this.bigInteger.toString());

    out.writeString(this.uri.toString());

    out.writeString(this.url.toString());

    out.writeString(this.file.toString());

    if (this.nullableBigDecimal == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nullableBigDecimal.toString());
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bigDecimal = new java.math.BigDecimal(in.readString());

      this.bigInteger = new java.math.BigInteger(in.readString());

      try {
        this.uri = new java.net.URI(in.readString());
      } catch (java.net.URISyntaxException e) {
        throw new java.io.IOException(e.getMessage());
      }

      try {
        this.url = new java.net.URL(in.readString());
      } catch (java.net.MalformedURLException e) {
        throw new java.io.IOException(e.getMessage());
      }

      this.file = new java.io.File(in.readString());

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableBigDecimal = null;
      } else {
        this.nullableBigDecimal = new java.math.BigDecimal(in.readString());
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bigDecimal = new java.math.BigDecimal(in.readString());
          break;

        case 1:
          this.bigInteger = new java.math.BigInteger(in.readString());
          break;

        case 2:
          try {
            this.uri = new java.net.URI(in.readString());
          } catch (java.net.URISyntaxException e) {
            throw new java.io.IOException(e.getMessage());
          }
          break;

        case 3:
          try {
            this.url = new java.net.URL(in.readString());
          } catch (java.net.MalformedURLException e) {
            throw new java.io.IOException(e.getMessage());
          }
          break;

        case 4:
          this.file = new java.io.File(in.readString());
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableBigDecimal = null;
          } else {
            this.nullableBigDecimal = new java.math.BigDecimal(in.readString());
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











