/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.specific;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestRecordWithDecimalFieldWithDefault extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8967804389092379146L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecordWithDecimalFieldWithDefault\",\"namespace\":\"org.apache.avro.specific\",\"fields\":[{\"name\":\"f1\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2},\"default\":\"\\u0000\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestRecordWithDecimalFieldWithDefault> ENCODER =
      new BinaryMessageEncoder<TestRecordWithDecimalFieldWithDefault>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestRecordWithDecimalFieldWithDefault> DECODER =
      new BinaryMessageDecoder<TestRecordWithDecimalFieldWithDefault>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestRecordWithDecimalFieldWithDefault> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestRecordWithDecimalFieldWithDefault> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestRecordWithDecimalFieldWithDefault>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestRecordWithDecimalFieldWithDefault to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestRecordWithDecimalFieldWithDefault from a ByteBuffer. */
  public static TestRecordWithDecimalFieldWithDefault fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.math.BigDecimal f1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecordWithDecimalFieldWithDefault() {}

  /**
   * All-args constructor.
   * @param f1 The new value for f1
   */
  public TestRecordWithDecimalFieldWithDefault(java.math.BigDecimal f1) {
    this.f1 = f1;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      DECIMAL_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f1 = (java.math.BigDecimal)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f1' field.
   * @return The value of the 'f1' field.
   */
  public java.math.BigDecimal getF1() {
    return f1;
  }

  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(java.math.BigDecimal value) {
    this.f1 = value;
  }

  /**
   * Creates a new TestRecordWithDecimalFieldWithDefault RecordBuilder.
   * @return A new TestRecordWithDecimalFieldWithDefault RecordBuilder
   */
  public static org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder newBuilder() {
    return new org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder();
  }

  /**
   * Creates a new TestRecordWithDecimalFieldWithDefault RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecordWithDecimalFieldWithDefault RecordBuilder
   */
  public static org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder newBuilder(org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder other) {
    if (other == null) {
      return new org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder();
    } else {
      return new org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder(other);
    }
  }

  /**
   * Creates a new TestRecordWithDecimalFieldWithDefault RecordBuilder by copying an existing TestRecordWithDecimalFieldWithDefault instance.
   * @param other The existing instance to copy.
   * @return A new TestRecordWithDecimalFieldWithDefault RecordBuilder
   */
  public static org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder newBuilder(org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault other) {
    if (other == null) {
      return new org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder();
    } else {
      return new org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestRecordWithDecimalFieldWithDefault instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecordWithDecimalFieldWithDefault>
    implements org.apache.avro.data.RecordBuilder<TestRecordWithDecimalFieldWithDefault> {

    private java.math.BigDecimal f1;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecordWithDecimalFieldWithDefault instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'f1' field.
      * @return The value.
      */
    public java.math.BigDecimal getF1() {
      return f1;
    }

    /**
      * Sets the value of the 'f1' field.
      * @param value The value of 'f1'.
      * @return This builder.
      */
    public org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder setF1(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f1' field has been set.
      * @return True if the 'f1' field has been set, false otherwise.
      */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'f1' field.
      * @return This builder.
      */
    public org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault.Builder clearF1() {
      f1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestRecordWithDecimalFieldWithDefault build() {
      try {
        TestRecordWithDecimalFieldWithDefault record = new TestRecordWithDecimalFieldWithDefault();
        record.f1 = fieldSetFlags()[0] ? this.f1 : (java.math.BigDecimal) defaultValue(fields()[0], record.getConversion(0));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestRecordWithDecimalFieldWithDefault>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestRecordWithDecimalFieldWithDefault>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestRecordWithDecimalFieldWithDefault>
    READER$ = (org.apache.avro.io.DatumReader<TestRecordWithDecimalFieldWithDefault>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
