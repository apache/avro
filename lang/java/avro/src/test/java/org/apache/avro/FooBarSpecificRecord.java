/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FooBarSpecificRecord extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1031933828916876443L;

  public static org.apache.avro.Schema getClassSchema() {
    return CODER.SCHEMA$;
  }

  public static final class InternalCoders {

    private final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
        "{\"type\":\"record\",\"name\":\"FooBarSpecificRecord\",\"namespace\":\"org.apache.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"nicknames\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"relatedids\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"typeEnum\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TypeEnum\",\"symbols\":[\"a\",\"b\",\"c\"]}],\"default\":null}]}");

    private final SpecificData MODEL$ = new SpecificData();

    private final BinaryMessageEncoder<FooBarSpecificRecord> ENCODER = new BinaryMessageEncoder<>(this.MODEL$,
        this.SCHEMA$);

    private final BinaryMessageDecoder<FooBarSpecificRecord> DECODER = new BinaryMessageDecoder<>(this.MODEL$,
        this.SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public BinaryMessageEncoder<FooBarSpecificRecord> getEncoder() {
      return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public BinaryMessageDecoder<FooBarSpecificRecord> getDecoder() {
      return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the
     * specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     *         SchemaStore
     */
    public BinaryMessageDecoder<FooBarSpecificRecord> createDecoder(SchemaStore resolver) {
      return new BinaryMessageDecoder<>(this.MODEL$, this.SCHEMA$, resolver);
    }

    /**
     * Deserializes a FooBarSpecificRecord from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a FooBarSpecificRecord instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into
     *                             an instance of this class
     */
    public FooBarSpecificRecord fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
      return DECODER.decode(b);
    }
  }

  public static final InternalCoders CODER = new InternalCoders();

  /**
   * Serializes this FooBarSpecificRecord to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return CODER.getEncoder().encode(this);
  }

  private int id;
  private java.lang.CharSequence name;
  private java.util.List<java.lang.CharSequence> nicknames;
  private java.util.List<java.lang.Integer> relatedids;
  private org.apache.avro.TypeEnum typeEnum;

  /**
   * Default constructor. Note that this does not initialize fields to their
   * default values from the schema. If that is desired then one should use
   * <code>newBuilder()</code>.
   */
  public FooBarSpecificRecord() {
  }

  /**
   * All-args constructor.
   *
   * @param id         The new value for id
   * @param name       The new value for name
   * @param nicknames  The new value for nicknames
   * @param relatedids The new value for relatedids
   * @param typeEnum   The new value for typeEnum
   */
  public FooBarSpecificRecord(java.lang.Integer id, java.lang.CharSequence name,
      java.util.List<java.lang.CharSequence> nicknames, java.util.List<java.lang.Integer> relatedids,
      org.apache.avro.TypeEnum typeEnum) {
    this.id = id;
    this.name = name;
    this.nicknames = nicknames;
    this.relatedids = relatedids;
    this.typeEnum = typeEnum;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return CODER.MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return CODER.SCHEMA$;
  }

  // Used by DatumWriter. Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0:
      return id;
    case 1:
      return name;
    case 2:
      return nicknames;
    case 3:
      return relatedids;
    case 4:
      return typeEnum;
    default:
      throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader. Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0:
      id = (java.lang.Integer) value$;
      break;
    case 1:
      name = (java.lang.CharSequence) value$;
      break;
    case 2:
      nicknames = (java.util.List<java.lang.CharSequence>) value$;
      break;
    case 3:
      relatedids = (java.util.List<java.lang.Integer>) value$;
      break;
    case 4:
      typeEnum = (org.apache.avro.TypeEnum) value$;
      break;
    default:
      throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   *
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   *
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   *
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   *
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'nicknames' field.
   *
   * @return The value of the 'nicknames' field.
   */
  public java.util.List<java.lang.CharSequence> getNicknames() {
    return nicknames;
  }

  /**
   * Sets the value of the 'nicknames' field.
   *
   * @param value the value to set.
   */
  public void setNicknames(java.util.List<java.lang.CharSequence> value) {
    this.nicknames = value;
  }

  /**
   * Gets the value of the 'relatedids' field.
   *
   * @return The value of the 'relatedids' field.
   */
  public java.util.List<java.lang.Integer> getRelatedids() {
    return relatedids;
  }

  /**
   * Sets the value of the 'relatedids' field.
   *
   * @param value the value to set.
   */
  public void setRelatedids(java.util.List<java.lang.Integer> value) {
    this.relatedids = value;
  }

  /**
   * Gets the value of the 'typeEnum' field.
   *
   * @return The value of the 'typeEnum' field.
   */
  public org.apache.avro.TypeEnum getTypeEnum() {
    return typeEnum;
  }

  /**
   * Sets the value of the 'typeEnum' field.
   *
   * @param value the value to set.
   */
  public void setTypeEnum(org.apache.avro.TypeEnum value) {
    this.typeEnum = value;
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder.
   *
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder() {
    return new org.apache.avro.FooBarSpecificRecord.Builder();
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder by copying an existing
   * Builder.
   *
   * @param other The existing builder to copy.
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(
      org.apache.avro.FooBarSpecificRecord.Builder other) {
    if (other == null) {
      return new org.apache.avro.FooBarSpecificRecord.Builder();
    } else {
      return new org.apache.avro.FooBarSpecificRecord.Builder(other);
    }
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder by copying an existing
   * FooBarSpecificRecord instance.
   *
   * @param other The existing instance to copy.
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(org.apache.avro.FooBarSpecificRecord other) {
    if (other == null) {
      return new org.apache.avro.FooBarSpecificRecord.Builder();
    } else {
      return new org.apache.avro.FooBarSpecificRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for FooBarSpecificRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FooBarSpecificRecord>
      implements org.apache.avro.data.RecordBuilder<FooBarSpecificRecord> {

    private int id;
    private java.lang.CharSequence name;
    private java.util.List<java.lang.CharSequence> nicknames;
    private java.util.List<java.lang.Integer> relatedids;
    private org.apache.avro.TypeEnum typeEnum;

    /** Creates a new Builder */
    private Builder() {
      super(CODER.SCHEMA$, CODER.MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.FooBarSpecificRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[2].schema(), other.nicknames);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.relatedids)) {
        this.relatedids = data().deepCopy(fields()[3].schema(), other.relatedids);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.typeEnum)) {
        this.typeEnum = data().deepCopy(fields()[4].schema(), other.typeEnum);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing FooBarSpecificRecord instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.FooBarSpecificRecord other) {
      super(CODER.SCHEMA$, CODER.MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[2].schema(), other.nicknames);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedids)) {
        this.relatedids = data().deepCopy(fields()[3].schema(), other.relatedids);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.typeEnum)) {
        this.typeEnum = data().deepCopy(fields()[4].schema(), other.typeEnum);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value.
     */
    public int getId() {
      return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value The value of 'id'.
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set.
     *
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'id' field.
     *
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
     * Sets the value of the 'name' field.
     *
     * @param value The value of 'name'.
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'name' field has been set.
     *
     * @return True if the 'name' field has been set, false otherwise.
     */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'name' field.
     *
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'nicknames' field.
     *
     * @return The value.
     */
    public java.util.List<java.lang.CharSequence> getNicknames() {
      return nicknames;
    }

    /**
     * Sets the value of the 'nicknames' field.
     *
     * @param value The value of 'nicknames'.
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder setNicknames(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.nicknames = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'nicknames' field has been set.
     *
     * @return True if the 'nicknames' field has been set, false otherwise.
     */
    public boolean hasNicknames() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'nicknames' field.
     *
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder clearNicknames() {
      nicknames = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'relatedids' field.
     *
     * @return The value.
     */
    public java.util.List<java.lang.Integer> getRelatedids() {
      return relatedids;
    }

    /**
     * Sets the value of the 'relatedids' field.
     *
     * @param value The value of 'relatedids'.
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder setRelatedids(java.util.List<java.lang.Integer> value) {
      validate(fields()[3], value);
      this.relatedids = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'relatedids' field has been set.
     *
     * @return True if the 'relatedids' field has been set, false otherwise.
     */
    public boolean hasRelatedids() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'relatedids' field.
     *
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder clearRelatedids() {
      relatedids = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'typeEnum' field.
     *
     * @return The value.
     */
    public org.apache.avro.TypeEnum getTypeEnum() {
      return typeEnum;
    }

    /**
     * Sets the value of the 'typeEnum' field.
     *
     * @param value The value of 'typeEnum'.
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder setTypeEnum(org.apache.avro.TypeEnum value) {
      validate(fields()[4], value);
      this.typeEnum = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'typeEnum' field has been set.
     *
     * @return True if the 'typeEnum' field has been set, false otherwise.
     */
    public boolean hasTypeEnum() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'typeEnum' field.
     *
     * @return This builder.
     */
    public org.apache.avro.FooBarSpecificRecord.Builder clearTypeEnum() {
      typeEnum = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FooBarSpecificRecord build() {
      try {
        FooBarSpecificRecord record = new FooBarSpecificRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nicknames = fieldSetFlags()[2] ? this.nicknames
            : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.relatedids = fieldSetFlags()[3] ? this.relatedids
            : (java.util.List<java.lang.Integer>) defaultValue(fields()[3]);
        record.typeEnum = fieldSetFlags()[4] ? this.typeEnum : (org.apache.avro.TypeEnum) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FooBarSpecificRecord> WRITER$ = (org.apache.avro.io.DatumWriter<FooBarSpecificRecord>) CODER.MODEL$
      .createDatumWriter(CODER.SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FooBarSpecificRecord> READER$ = (org.apache.avro.io.DatumReader<FooBarSpecificRecord>) CODER.MODEL$
      .createDatumReader(CODER.SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeInt(this.id);

    out.writeString(this.name);

    long size0 = this.nicknames.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0 : this.nicknames) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException(
          "Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.relatedids.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Integer e1 : this.relatedids) {
      actualSize1++;
      out.startItem();
      out.writeInt(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException(
          "Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    if (this.typeEnum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.typeEnum.ordinal());
    }

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.nicknames;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int) size0, CODER.SCHEMA$.getField("nicknames").schema());
        this.nicknames = a0;
      } else
        a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array
          ? (SpecificData.Array<java.lang.CharSequence>) a0
          : null);
      for (; 0 < size0; size0 = in.arrayNext()) {
        for (; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8) e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Integer> a1 = this.relatedids;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Integer>((int) size1, CODER.SCHEMA$.getField("relatedids").schema());
        this.relatedids = a1;
      } else
        a1.clear();
      SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array
          ? (SpecificData.Array<java.lang.Integer>) a1
          : null);
      for (; 0 < size1; size1 = in.arrayNext()) {
        for (; size1 != 0; size1--) {
          java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readInt();
          a1.add(e1);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.typeEnum = null;
      } else {
        this.typeEnum = org.apache.avro.TypeEnum.values()[in.readEnum()];
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.nicknames;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int) size0,
                CODER.SCHEMA$.getField("nicknames").schema());
            this.nicknames = a0;
          } else
            a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array
              ? (SpecificData.Array<java.lang.CharSequence>) a0
              : null);
          for (; 0 < size0; size0 = in.arrayNext()) {
            for (; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8) e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 3:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Integer> a1 = this.relatedids;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Integer>((int) size1, CODER.SCHEMA$.getField("relatedids").schema());
            this.relatedids = a1;
          } else
            a1.clear();
          SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array
              ? (SpecificData.Array<java.lang.Integer>) a1
              : null);
          for (; 0 < size1; size1 = in.arrayNext()) {
            for (; size1 != 0; size1--) {
              java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readInt();
              a1.add(e1);
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.typeEnum = null;
          } else {
            this.typeEnum = org.apache.avro.TypeEnum.values()[in.readEnum()];
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
