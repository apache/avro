/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FooBarSpecificRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2116297724192782660L;
  public static final Schema SCHEMA$ = new Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FooBarSpecificRecord\",\"namespace\":\"org.apache.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nicknames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"relatedids\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"typeEnum\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TypeEnum\",\"symbols\":[\"a\",\"b\",\"c\"]}],\"default\":null},{\"name\":\"testBytes\",\"type\":\"bytes\"}]}");
  public static Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public String name;
  @Deprecated public java.util.List<String> nicknames;
  @Deprecated public java.util.List<Integer> relatedids;
  @Deprecated public TypeEnum typeEnum;
  @Deprecated public java.nio.ByteBuffer testBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FooBarSpecificRecord() {}

  /**
   * All-args constructor.
   */
  public FooBarSpecificRecord(Integer id, String name, java.util.List<String> nicknames, java.util.List<Integer> relatedids, TypeEnum typeEnum, java.nio.ByteBuffer testBytes) {
    this.id = id;
    this.name = name;
    this.nicknames = nicknames;
    this.relatedids = relatedids;
    this.typeEnum = typeEnum;
    this.testBytes = testBytes;
  }

  public Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return nicknames;
    case 3: return relatedids;
    case 4: return typeEnum;
    case 5: return testBytes;
    default: throw new AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Integer)value$; break;
    case 1: name = (String)value$; break;
    case 2: nicknames = (java.util.List<String>)value$; break;
    case 3: relatedids = (java.util.List<Integer>)value$; break;
    case 4: typeEnum = (TypeEnum)value$; break;
    case 5: testBytes = (java.nio.ByteBuffer)value$; break;
    default: throw new AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'nicknames' field.
   */
  public java.util.List<String> getNicknames() {
    return nicknames;
  }

  /**
   * Sets the value of the 'nicknames' field.
   * @param value the value to set.
   */
  public void setNicknames(java.util.List<String> value) {
    this.nicknames = value;
  }

  /**
   * Gets the value of the 'relatedids' field.
   */
  public java.util.List<Integer> getRelatedids() {
    return relatedids;
  }

  /**
   * Sets the value of the 'relatedids' field.
   * @param value the value to set.
   */
  public void setRelatedids(java.util.List<Integer> value) {
    this.relatedids = value;
  }

  /**
   * Gets the value of the 'typeEnum' field.
   */
  public TypeEnum getTypeEnum() {
    return typeEnum;
  }

  /**
   * Sets the value of the 'typeEnum' field.
   * @param value the value to set.
   */
  public void setTypeEnum(TypeEnum value) {
    this.typeEnum = value;
  }

  /**
   * Gets the value of the 'testBytes' field.
   */
  public java.nio.ByteBuffer getTestBytes() {
    return testBytes;
  }

  /**
   * Sets the value of the 'testBytes' field.
   * @param value the value to set.
   */
  public void setTestBytes(java.nio.ByteBuffer value) {
    this.testBytes = value;
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder.
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new FooBarSpecificRecord RecordBuilder by copying an existing FooBarSpecificRecord instance.
   * @param other The existing instance to copy.
   * @return A new FooBarSpecificRecord RecordBuilder
   */
  public static Builder newBuilder(FooBarSpecificRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for FooBarSpecificRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FooBarSpecificRecord>
    implements org.apache.avro.data.RecordBuilder<FooBarSpecificRecord> {

    private int id;
    private String name;
    private java.util.List<String> nicknames;
    private java.util.List<Integer> relatedids;
    private TypeEnum typeEnum;
    private java.nio.ByteBuffer testBytes;

    /** Creates a new Builder */
    private Builder() {
      super(FooBarSpecificRecord.SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[2].schema(), other.nicknames);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedids)) {
        this.relatedids = data().deepCopy(fields()[3].schema(), other.relatedids);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.typeEnum)) {
        this.typeEnum = data().deepCopy(fields()[4].schema(), other.typeEnum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testBytes)) {
        this.testBytes = data().deepCopy(fields()[5].schema(), other.testBytes);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FooBarSpecificRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(FooBarSpecificRecord other) {
            super(FooBarSpecificRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[2].schema(), other.nicknames);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedids)) {
        this.relatedids = data().deepCopy(fields()[3].schema(), other.relatedids);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.typeEnum)) {
        this.typeEnum = data().deepCopy(fields()[4].schema(), other.typeEnum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testBytes)) {
        this.testBytes = data().deepCopy(fields()[5].schema(), other.testBytes);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nicknames' field.
      * @return The value.
      */
    public java.util.List<String> getNicknames() {
      return nicknames;
    }

    /**
      * Sets the value of the 'nicknames' field.
      * @param value The value of 'nicknames'.
      * @return This builder.
      */
    public Builder setNicknames(java.util.List<String> value) {
      validate(fields()[2], value);
      this.nicknames = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nicknames' field has been set.
      * @return True if the 'nicknames' field has been set, false otherwise.
      */
    public boolean hasNicknames() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nicknames' field.
      * @return This builder.
      */
    public Builder clearNicknames() {
      nicknames = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatedids' field.
      * @return The value.
      */
    public java.util.List<Integer> getRelatedids() {
      return relatedids;
    }

    /**
      * Sets the value of the 'relatedids' field.
      * @param value The value of 'relatedids'.
      * @return This builder.
      */
    public Builder setRelatedids(java.util.List<Integer> value) {
      validate(fields()[3], value);
      this.relatedids = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'relatedids' field has been set.
      * @return True if the 'relatedids' field has been set, false otherwise.
      */
    public boolean hasRelatedids() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'relatedids' field.
      * @return This builder.
      */
    public Builder clearRelatedids() {
      relatedids = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'typeEnum' field.
      * @return The value.
      */
    public TypeEnum getTypeEnum() {
      return typeEnum;
    }

    /**
      * Sets the value of the 'typeEnum' field.
      * @param value The value of 'typeEnum'.
      * @return This builder.
      */
    public Builder setTypeEnum(TypeEnum value) {
      validate(fields()[4], value);
      this.typeEnum = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'typeEnum' field has been set.
      * @return True if the 'typeEnum' field has been set, false otherwise.
      */
    public boolean hasTypeEnum() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'typeEnum' field.
      * @return This builder.
      */
    public Builder clearTypeEnum() {
      typeEnum = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'testBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTestBytes() {
      return testBytes;
    }

    /**
      * Sets the value of the 'testBytes' field.
      * @param value The value of 'testBytes'.
      * @return This builder.
      */
    public Builder setTestBytes(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.testBytes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'testBytes' field has been set.
      * @return True if the 'testBytes' field has been set, false otherwise.
      */
    public boolean hasTestBytes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'testBytes' field.
      * @return This builder.
      */
    public Builder clearTestBytes() {
      testBytes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public FooBarSpecificRecord build() {
      try {
        FooBarSpecificRecord record = new FooBarSpecificRecord();
        record.id = fieldSetFlags()[0] ? this.id : (Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (String) defaultValue(fields()[1]);
        record.nicknames = fieldSetFlags()[2] ? this.nicknames : (java.util.List<String>) defaultValue(fields()[2]);
        record.relatedids = fieldSetFlags()[3] ? this.relatedids : (java.util.List<Integer>) defaultValue(fields()[3]);
        record.typeEnum = fieldSetFlags()[4] ? this.typeEnum : (TypeEnum) defaultValue(fields()[4]);
        record.testBytes = fieldSetFlags()[5] ? this.testBytes : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
