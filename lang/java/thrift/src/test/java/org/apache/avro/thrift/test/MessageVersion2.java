/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.avro.thrift.test;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-07-27")
public class MessageVersion2 implements org.apache.thrift.TBase<MessageVersion2, MessageVersion2._Fields>,
    java.io.Serializable, Cloneable, Comparable<MessageVersion2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
      "MessageVersion2");

  private static final org.apache.thrift.protocol.TField F3_FIELD_DESC = new org.apache.thrift.protocol.TField("f3",
      org.apache.thrift.protocol.TType.STRING, (short) 3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageVersion2StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageVersion2TupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String f3; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for
   * finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    F3((short) 3, "f3");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
      case 3: // F3
        return F3;
      default:
        return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it
     * is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = { _Fields.F3 };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
        _Fields.class);
    tmpMap.put(_Fields.F3,
        new org.apache.thrift.meta_data.FieldMetaData("f3", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageVersion2.class, metaDataMap);
  }

  public MessageVersion2() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageVersion2(MessageVersion2 other) {
    if (other.isSetF3()) {
      this.f3 = other.f3;
    }
  }

  public MessageVersion2 deepCopy() {
    return new MessageVersion2(this);
  }

  @Override
  public void clear() {
    this.f3 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getF3() {
    return this.f3;
  }

  public void setF3(@org.apache.thrift.annotation.Nullable java.lang.String f3) {
    this.f3 = f3;
  }

  public void unsetF3() {
    this.f3 = null;
  }

  /**
   * Returns true if field f3 is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetF3() {
    return this.f3 != null;
  }

  public void setF3IsSet(boolean value) {
    if (!value) {
      this.f3 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case F3:
      if (value == null) {
        unsetF3();
      } else {
        setF3((java.lang.String) value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case F3:
      return getF3();

    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a
   * value) and false otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case F3:
      return isSetF3();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MessageVersion2)
      return this.equals((MessageVersion2) that);
    return false;
  }

  public boolean equals(MessageVersion2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_f3 = true && this.isSetF3();
    boolean that_present_f3 = true && that.isSetF3();
    if (this_present_f3 || that_present_f3) {
      if (!(this_present_f3 && that_present_f3))
        return false;
      if (!this.f3.equals(that.f3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetF3()) ? 131071 : 524287);
    if (isSetF3())
      hashCode = hashCode * 8191 + f3.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MessageVersion2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetF3(), other.isSetF3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f3, other.f3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageVersion2(");
    boolean first = true;

    if (isSetF3()) {
      sb.append("f3:");
      if (this.f3 == null) {
        sb.append("null");
      } else {
        sb.append(this.f3);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageVersion2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageVersion2StandardScheme getScheme() {
      return new MessageVersion2StandardScheme();
    }
  }

  private static class MessageVersion2StandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageVersion2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageVersion2 struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
        case 3: // F3
          if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
            struct.f3 = iprot.readString();
            struct.setF3IsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageVersion2 struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.f3 != null) {
        if (struct.isSetF3()) {
          oprot.writeFieldBegin(F3_FIELD_DESC);
          oprot.writeString(struct.f3);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageVersion2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageVersion2TupleScheme getScheme() {
      return new MessageVersion2TupleScheme();
    }
  }

  private static class MessageVersion2TupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageVersion2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageVersion2 struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetF3()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetF3()) {
        oprot.writeString(struct.f3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageVersion2 struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.f3 = iprot.readString();
        struct.setF3IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
        : TUPLE_SCHEME_FACTORY).getScheme();
  }
}
