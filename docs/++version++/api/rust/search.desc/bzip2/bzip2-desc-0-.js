searchState.loadedDescShard("bzip2", 0, "Bzip compression for Rust\nPossible actions to take on compression.\nRepresentation of an in-memory compression stream.\nWhen compressing data, the compression level can be …\nThe data being decompressed was invalid, or it was not a …\nThe magic bz2 header wasn’t present when decompressing.\nRepresentation of an in-memory decompression stream.\nFatal errors encountered when compressing/decompressing …\nRequest that the compression stream be finalized.\nThe Finish action on compression went ok.\nFlush any existing output, but do not read any more input\nThe Flush action on a compression went ok.\nThere was insufficient memory in the input or output …\nDecompression went fine, nothing much to report.\nThe parameters to this function were invalid.\nNormal compression.\nThe Run action on compression went ok.\nThe sequence of operations called on a …\nResult of compression or decompression\nThe stream’s end has been met, meaning that no more data …\nOptimize for smallest output size.\nI/O streams for wrapping <code>BufRead</code> types as encoders/decoders\nCompress a block of input into a block of output.\nSame as <code>Self::compress</code> but accepts an uninitialised <code>output</code> …\nCompress a block of input into an output vector.\nDecompress a block of input into a block of output.\nSame as <code>Self::decompress</code> but accepts an uninitialized …\nDecompress a block of input into an output vector.\nChoose the default compression, a balance between speed …\nOptimize for the best speed of encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the compression level as an integer.\nCreates a new stream prepared for compression.\nCreates a new stream prepared for decompression.\nCreate a new compression spec with a specific numeric …\nDo not compress.\nReader-based compression/decompression streams\nTotal number of bytes processed as input\nTotal number of bytes processed as input\nTotal number of bytes processed as output\nTotal number of bytes processed as output\nCreate a new compression spec with a specific numeric …\nWriter-based compression/decompression streams\nA bz2 decoder, or decompressor.\nA bz2 encoder, or compressor.\nA bzip2 streaming decoder that decodes all members of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream.\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nCreates a new decoder from the given reader. If the bzip2 …\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes produced by the compressor …\nReturns the number of bytes that the decompressor has …\nA decompression stream which wraps a compressed stream of …\nA compression stream which wraps an uncompressed stream of …\nA bzip2 streaming decoder that decodes all members of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream.\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the underlying writer, finishing the compression …\nUnwrap the underlying writer, finishing the compression …\nConsumes this decoder, returning the underlying reader.\nCreate a new compression stream which will compress at the …\nCreate a new decompression stream, which will read …\nCreates a new decoder from the given reader, immediately …\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes consumed by the decompressor …\nReturns the number of bytes produced by the compressor …\nReturns the number of bytes produced by the decompressor …\nA compression stream which will have compressed data …\nA compression stream which will have uncompressed data …\nConsumes this encoder, flushing the output stream.\nUnwrap the underlying writer, finishing the compression …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new compression stream which will compress at the …\nCreate a new decoding stream which will decompress all …\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes consumed by the decompressor …\nReturns the number of bytes produced by the compressor\nReturns the number of bytes produced by the decompressor\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …")