searchState.loadedDescShard("anyhow", 0, "github crates-io docs-rs\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to <code>Ok::&lt;_, anyhow::Error&gt;(value)</code>.\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an error object from a type-erased standard …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a standard library error trait object.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nConvert to a standard library error trait object.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …")