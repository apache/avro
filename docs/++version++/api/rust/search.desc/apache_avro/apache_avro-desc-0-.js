searchState.loadedDescShard("apache_avro", 0, "rust continuous integration rust clippy check rust …\nA convenience type alias for <code>Result</code>s with <code>Error</code>s.\nA big decimal type.\nThe <code>BZip2</code> codec uses BZip2 compression library.\nThe compression codec used to compress blocks.\nThe <code>Deflate</code> codec writes the data block using the deflate …\nSettings for the <code>Deflate</code> codec.\nA struct representing duration that hides the details of …\nContains the error value\nWriter that encodes messages according to the single …\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nThe <code>Null</code> codec simply passes through data uncompressed.\nContains the success value\nMain interface for reading Avro formatted values.\nThe <code>Snappy</code> codec uses Google’s Snappy compression …\nWriter that encodes messages according to the single …\nA Universally Unique Identifier (UUID).\nMain interface for writing Avro formatted values.\nUse builder syntax to set the inputs and finish with …\nThe <code>Xz</code> codec uses Xz utils compression library.\nThe <code>Zstandard</code> codec uses Facebook’s Zstandard\nCompute the absolute value of number\nAdds custom metadata to the file. This method could be …\nAppend a compatible value (implementing the <code>ToAvro</code> trait) …\nAppend anything implementing the <code>Serialize</code> trait to a …\nCreates a <code>Writer</code> that will append values to already …\nCreates a <code>Writer</code> that will append values to already …\nCreates a <code>Writer</code> that will append values to already …\nAppend a compatible value to a <code>Writer</code>, also performing …\nReturn the internal big integer value and an exponent. …\nReturn digits as borrowed Cow of integer digits, and its …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nGet a <code>Braced</code> formatter.\nFinish building and return the requested object\nCreate an instance of <code>Writer</code> using the builder syntax\nTake the cube root of the number, using default context\nTake cube root of self, using properties of context\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>Codec::Null</code>.\nCompress a stream of bytes in-place.\nCube a decimal: <em>x³</em>\nReturn the number of days in this duration.\nCount of decimal digits\nDecompress a stream of bytes in-place.\nDefault compression level is …\nNumber of digits in the non-scaled integer representation\nMultiply decimal by 2 (efficiently)\nDrop the writer, will try to flush ignoring any errors.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nEvaluate the natural-exponential function ex\nExtend a <code>Writer</code> with an <code>Iterator</code> of compatible values …\nExtend a <code>Writer</code> by appending each <code>Value</code> from a slice, …\nExtend a <code>Writer</code> with an <code>Iterator</code> of anything implementing …\nFlush the content to the inner <code>Writer</code>.\nReturns the scale of the BigDecimal, the total number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a <code>Value</code> encoded in Avro format given its <code>Schema</code> and …\nDecode a <code>Value</code> encoded in Avro format given the provided …\nDecode a <code>Value</code> encoded in Avro format given the provided …\nConstruct BigDecimal from BigInt and a scale\nConstruct positive BigDecimal from BigUint and a scale\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates and initializes a BigDecimal.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nInterpret a <code>Value</code> as an instance of type <code>D</code>.\nGets a mutable reference to the underlying writer.\nIf the UUID is the correct version (v1, or v6) this will …\nGets a reference to the underlying writer.\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nDivide decimal by 2 (efficiently)\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>false</code>.\nHandling of Avro magic headers\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the internal big integer value and an …\nTake BigDecimal and split into <code>num::BigInt</code> of digits, and …\nConsumes self and returns the underlying byte value of the …\nReturn what the <code>Writer</code> is writing to, consuming the <code>Writer</code> …\nCompute the reciprical of the number: x-1\nReturn inverse of self, rounding with ctx\nReturn true if this number has zero fractional part (is …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nTry to determine if decimal is 1.0, without allocating\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nThe ‘max UUID’ (all ones).\nSet a new maximum number of bytes that can be allocated …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>Codec::Null</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>false</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nReturn the number of milliseconds in this duration.\nReturn the number of months in this duration.\nMultiply by rhs, limiting precision using context\nCreates a <code>Reader</code> given something implementing the <code>io::Read</code> …\nConstruct a new <code>Duration</code>.\nCreates a <code>Writer</code> given a <code>Schema</code> and something implementing …\nCreates and initializes a <code>BigDecimal</code>.\nThe ‘nil UUID’ (all zeros).\nPosition of most significant digit of this decimal\nCreates and initializes a <code>BigDecimal</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nRaises the number to an integer power\nRaises the number to an integer power, using context for …\nImplementation of the Rabin fingerprint algorithm\nReads the marker bytes from Avro bytes generated earlier …\nGet a reference to the optional reader <code>Schema</code>.\nReturn given number rounded to ‘round_digits’ …\nLogic for parsing and interacting with schemas in Avro …\nGet a reference to the <code>Schema</code> associated to a <code>Writer</code>.\n<em><strong>Required.</strong></em>\nLogic for checking schema compatibility\nEfficient (de)serialization of Avro bytes values.\nEfficient (de)serialization of optional Avro bytes values.\nEfficient (de)serialization of Avro fixed values.\nEfficient (de)serialization of optional Avro fixed values.\nEfficient (de)serialization of Avro bytes/fixed borrowed …\nEfficient (de)serialization of optional Avro bytes/fixed …\nSet whether serializing/deserializing is marked as human …\nReturn the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.\nGet a <code>Simple</code> formatter.\nTake the square root of the number\nTake the square root of the number, using context for …\nSquare a decimal: <em>x²</em>\nEncode a compatible value (implementing the <code>ToAvro</code> trait) …\nEncode a compatible value (implementing the <code>ToAvro</code> trait) …\nReturns the bytes of the UUID in little-endian order.\nCreate string of this bigdecimal in engineering notation\nReturns the four field values of the UUID in little-endian …\nCreate string of decimal in standard decimal notation.\nMake a BigDecimalRef of this value\nCreate string of this bigdecimal in scientific notation\nReturns a 128bit little-endian value containing the value.\nInterpret a serializeable instance as a <code>Value</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nLogic handling the intermediate representation of Avro …\nGet a <code>Urn</code> formatter.\nGet a reference to the user metadata\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nCreates a <code>Writer</code> with a specific <code>Codec</code> given a <code>Schema</code> and …\nReturn a new BigDecimal object with precision set to new …\nReturn this BigDecimal with the given precision, rounding …\nReturn a new BigDecimal object equivalent to self, with …\nReturn a new BigDecimal after shortening the digits and …\nCreates a <code>Reader</code> given a reader <code>Schema</code> and something …\nCreates a <code>Reader</code> given a reader <code>Schema</code> and something …\nCreates a <code>Writer</code> with a specific <code>Codec</code> given a <code>Schema</code> and …\nWrite the Serialize object to the provided Write object. …\nWrite the referenced Serializeable object to the provided …\nWrite bigdecimal in engineering notation to writer <code>w</code>\nWrite decimal value in decimal notation to the writer …\nWrite the referenced <code>Serialize</code> object to the provided <code>Write</code>…\nWrite bigdecimal in scientific notation to writer <code>w</code>\nWrite the Value to the provided Write object. Returns a …\nWrite the <code>Into&lt;Value&gt;</code> to the provided Write object. …\nWrite the referenced Value to the provided Write object. …\n<em><strong>Required.</strong></em>\nGet a reference to the writer <code>Schema</code>.\nError when two named schema have the same fully qualified …\nError while converting float to json value\nErrors encounterd by Avro.\nError while resolving Schema::Ref\nDescribe a specific error happening with decimal …\nDescribes errors happened while validating Avro data.\nDescribes errors happened while validating Avro data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHeaderBuilder based on Glue schema UUID\nThis trait represents that an object is able to construct …\nHeaderBuilder based on the Rabin schema fingerprint\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse this helper to build an instance from an existing Avro …\nCreate an instance of the struct from a Glue Schema UUID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an instance of the struct based on parsing the UUID …\nRetrieve the UUID from the object\nImplementation of the Rabin fingerprint algorithm using …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNewtype pattern for <code>Name</code> to better control the …\nRepresents the aliases for Named Schema\nA <code>array</code> Avro schema. Avro arrays are required to have the …\nA <code>array</code> Avro schema. Avro arrays are required to have the …\nTrait for types that serve as an Avro data model. Derive …\nLogical type which represents <code>Decimal</code> values without …\nLogical type which represents <code>Decimal</code> values without …\nA <code>boolean</code> Avro schema.\nA <code>boolean</code> Avro schema.\nA <code>bytes</code> Avro schema. <code>Bytes</code> represents a sequence of 8-bit …\nA <code>bytes</code> Avro schema. <code>Bytes</code> represents a sequence of 8-bit …\nLogical type which represents the number of days since the …\nLogical type which represents the number of days since the …\nLogical type which represents <code>Decimal</code> values. The …\nLogical type which represents <code>Decimal</code> values. The …\nA description of a Union schema.\nRepresents documentation for complex Avro schemas.\nA <code>double</code> Avro schema.\nA <code>double</code> Avro schema.\nAn amount of time defined by a number of months, days and …\nAn amount of time defined by a number of months, days and …\nAn <code>enum</code> Avro schema.\nAn <code>enum</code> Avro schema.\nA description of an Enum schema.\nUse builder syntax to set the inputs and finish with …\nA <code>fixed</code> Avro schema.\nA <code>fixed</code> Avro schema.\nA description of a Union schema.\nUse builder syntax to set the inputs and finish with …\nA <code>float</code> Avro schema.\nA <code>float</code> Avro schema.\nAn <code>int</code> Avro schema.\nAn <code>int</code> Avro schema.\nAn instant in local time represented as the number of …\nAn instant in local time represented as the number of …\nAn instant in localtime represented as the number of …\nAn instant in localtime represented as the number of …\nAn instant in local time represented as the number of …\nAn instant in local time represented as the number of …\nA <code>long</code> Avro schema.\nA <code>long</code> Avro schema.\nA <code>map</code> Avro schema. <code>Map</code> holds a pointer to the <code>Schema</code> of …\nA <code>map</code> Avro schema. <code>Map</code> holds a pointer to the <code>Schema</code> of …\nRepresents names for <code>record</code>, <code>enum</code> and <code>fixed</code> Avro schemas.\nRepresents Schema lookup within a schema\nRepresents the namespace for Named Schema\nNo value.\nNo value.\nNo value.\nA <code>null</code> Avro schema.\nA <code>null</code> Avro schema.\nA <code>record</code> Avro schema.\nA <code>record</code> Avro schema.\nRepresents a <code>field</code> in a <code>record</code> Avro schema.\nUse builder syntax to set the inputs and finish with …\nRepresents any valid order for a <code>field</code> in a <code>record</code> Avro …\nA description of an Enum schema.\nUse builder syntax to set the inputs and finish with …\nA reference to another schema.\nA reference to another schema.\nRepresents any valid Avro schema More information about …\nRepresents an Avro schema fingerprint More information …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nA <code>string</code> Avro schema. <code>String</code> represents a unicode …\nA <code>string</code> Avro schema. <code>String</code> represents a unicode …\nThe time of day in number of microseconds after midnight …\nThe time of day in number of microseconds after midnight …\nThe time of day in number of milliseconds after midnight …\nThe time of day in number of milliseconds after midnight …\nAn instant in time represented as the number of …\nAn instant in time represented as the number of …\nAn instant in time represented as the number of …\nAn instant in time represented as the number of …\nAn instant in time represented as the number of …\nAn instant in time represented as the number of …\nA <code>union</code> Avro schema.\nA <code>union</code> Avro schema.\nA description of a Union schema\nA universally unique identifier, annotating a string.\nA universally unique identifier, annotating a string.\nReturns the aliases of the schema if it has ones.\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nAliases of the field’s name. They have no namespace.\nThe aliases of the schema\nThe aliases of the schema\nThe aliases of the schema\nReturns a Schema::Array with the given items.\nReturns a Schema::Array with the given items and custom …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\nThe custom attributes of the schema\nThe custom attributes of the schema\nThe custom attributes of the schema\nFinish building and return the requested object\nFinish building and return the requested object\nFinish building and return the requested object\nFinish building and return the requested object\nCreate an instance of <code>RecordField</code> using the builder syntax\nCreate an instance of <code>RecordSchema</code> using the builder syntax\nCreate an instance of <code>EnumSchema</code> using the builder syntax\nCreate an instance of <code>FixedSchema</code> using the builder syntax\nConverts <code>self</code> into its Parsing Canonical Form.\nReturns the custom attributes (metadata) if the schema …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\nA collection of all unknown fields in the record field.\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\nDefault value of the field. This value will be used when …\nAn optional default symbol used for compatibility\nAn optional default symbol used for compatibility\nReturns the doc of the schema if it has one.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nDocumentation of the field.\nThe documentation of the schema\nThe documentation of the schema\nThe documentation of the schema\nAssess equality of two <code>Schema</code> based on Parsing Canonical …\n<em><strong>Required.</strong></em>\nThe set of fields of the schema\nOptionally returns a reference to the schema matched by …\nGenerate fingerprint of Schema’s Parsing Canonical Form.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the <code>fullname</code> of this <code>Name</code>\nReturn the fully qualified name needed for indexing or …\nReturns the Parsing Canonical Form of <code>self</code> that is self …\nThe inner schema of the decimal (fixed or bytes)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>RecordField</code> is nullable, meaning the …\nReturns true if the any of the variants of this <code>UnionSchema</code>…\n<em><strong>Required.</strong></em>\nThe <code>lookup</code> table maps field names to their position in the …\nReturns a Schema::Map with the given types.\nReturns a Schema::Map with the given types and custom …\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>BTreeMap::new()</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>0</code>.\nReturns the name of the schema if it has one.\n<em><strong>Required.</strong></em>\n<em><strong>Required.</strong></em>\n<em><strong>Required.</strong></em>\n<em><strong>Required.</strong></em>\nName of the field.\nThe name of the schema\nThe name of the schema\nThe name of the schema\nReturns the namespace of the schema if it has one.\nCreate a new <code>Name</code>. Parses the optional <code>namespace</code> from the …\nCreates a new UnionSchema from a vector of schemas.\nCreates <code>ResolvedSchema</code> with some already known schemas.\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> …\nOrder of the field.\nParses an Avro schema from JSON.\nCreate an array of <code>Schema</code>’s from a list of named JSON …\nCreate a <code>Schema</code> from a reader which implements <code>Read</code>.\nCreate a <code>Schema</code> from a string representing a JSON Avro …\nCreate a <code>Schema</code> from a string representing a JSON Avro …\n<em><strong>Optional</strong> (Some / Option setters).</em> <em><strong>Default:</strong></em> <code>0</code>.\nPosition of the field in the list of <code>field</code> of its parent …\nThe number of digits in the unscaled value\nThe number of digits to the right of the decimal point\n<em><strong>Required.</strong></em>\nSchema of the field.\n<em><strong>Required.</strong></em>\nThe size of the fixed schema\n<em><strong>Required.</strong></em>\nThe set of symbols of the schema\nReturns a slice to all variants of this schema.\nTrait for types that serve as fully defined components …\n<code>can_read</code> performs a full, recursive check that a datum …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>mutual_read</code> performs a full, recursive check that a datum …\nA trait that compares two schemata for equality. To …\nCompares two schemas according to the Avro specification …\nCompares two schemas for equality field by field, using …\nCompares two schemata for equality.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to include custom attributes in the comparison. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets a custom schemata equality comparator.\nAn <code>array</code> Avro value.\nAn <code>array</code> Avro value.\nAn Avro Decimal value.\nAn Avro Decimal value.\nA <code>boolean</code> Avro value.\nA <code>boolean</code> Avro value.\nA <code>bytes</code> Avro value.\nA <code>bytes</code> Avro value.\nA date value.\nA date value.\nAn Avro Decimal value. Bytes are in big-endian order, per …\nAn Avro Decimal value. Bytes are in big-endian order, per …\nA <code>double</code> Avro value.\nA <code>double</code> Avro value.\nAvro Duration. An amount of time defined by months, days …\nAvro Duration. An amount of time defined by months, days …\nAn <code>enum</code> Avro value.\nAn <code>enum</code> Avro value.\nA <code>fixed</code> Avro value. The size of the fixed value is …\nA <code>fixed</code> Avro value. The size of the fixed value is …\nA <code>float</code> Avro value.\nA <code>float</code> Avro value.\nA <code>int</code> Avro value.\nA <code>int</code> Avro value.\nLocal timestamp in microseconds.\nLocal timestamp in microseconds.\nLocal timestamp in milliseconds.\nLocal timestamp in milliseconds.\nLocal timestamp in nanoseconds.\nLocal timestamp in nanoseconds.\nA <code>long</code> Avro value.\nA <code>long</code> Avro value.\nA <code>map</code> Avro value.\nA <code>map</code> Avro value.\nA <code>null</code> Avro value.\nA <code>null</code> Avro value.\nUtility interface to build <code>Value::Record</code> objects.\nA <code>record</code> Avro value.\nA <code>record</code> Avro value.\nA <code>string</code> Avro value.\nA <code>string</code> Avro value.\nTime in microseconds.\nTime in microseconds.\nTime in milliseconds.\nTime in milliseconds.\nTimestamp in microseconds.\nTimestamp in microseconds.\nTimestamp in milliseconds.\nTimestamp in milliseconds.\nTimestamp in nanoseconds.\nTimestamp in nanoseconds.\nAn <code>union</code> Avro value.\nAn <code>union</code> Avro value.\nUniversally unique identifier.\nUniversally unique identifier.\nA valid Avro value.\nList of fields contained in the record. Ordered according …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value for a given field name. Returns <code>None</code> if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Record</code> given a <code>Schema</code>.\nPut a compatible value (implementing the <code>ToAvro</code> trait) in …\nAttempt to perform schema resolution on the value, with …\nAttempt to perform schema resolution on the value, with …\nValidate the value against the given Schema.\nA trait that validates enum symbol names. To register a …\nA trait that validates record field names. To register a …\nA trait that validates schema names. To register a custom …\nA trait that validates schema namespaces. To register a …\nReturns the regex used to validate the schema name …\nReturns the regex used to validate the schema namespace …\nReturns the regex used to validate the symbols of enum …\nReturns the regex used to validate the record field names …\nSets a custom enum symbol name validator.\nSets a custom record field name validator.\nSets a custom schema name validator.\nSets a custom schema namespace validator.\nValidates the schema name and returns the name and the …\nValidates the schema namespace or Details::InvalidNamespace…\nValidates the symbols of an Enum schema name and returns …\nValidates the record field’s names and returns nothing …")