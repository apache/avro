searchState.loadedDescShard("regex_lite", 0, "This crate provides a <strong>lightweight</strong> regex engine for …\nA low level representation of the byte offsets of each …\nAn iterator over all non-overlapping capture matches in a …\nAn iterator over the names of all capture groups in a …\nRepresents the capture groups for a single match.\nAn error that occurred during parsing or compiling a …\nRepresents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches in a haystack.\nA helper type for forcing literal string replacement.\nA compiled regular expression for searching Unicode …\nA configurable builder for a <code>Regex</code>.\nA trait for types that can be used to replace matches in a …\nA by-reference adaptor for a <code>Replacer</code>.\nAn iterator over all substrings delimited by a regex match.\nAn iterator over at most <code>N</code> substrings delimited by a regex …\nAn iterator over all group matches in a <code>Captures</code> value.\nReturns the original string of this regex.\nReturns the substring of the haystack that matched.\nCompiles the pattern given to <code>RegexBuilder::new</code> with the …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a fresh allocated set of capture locations that can\nReturns an iterator over the capture names in this regex.\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::captures</code>, but starts the search …\nReturns an iterator that yields successive non-overlapping …\nReturns the number of captures groups in this regex.\nThis is like <code>Regex::captures</code>, but writes the byte offsets …\nReturns the same as <code>Regex::captures_read</code>, but starts the …\nThis configures whether to enable ASCII case insensitive …\nThis configures CRLF mode for the entire pattern.\nThis configures dot-matches-new-line mode for the entire …\nReturns the byte offset of the end of the match in the …\nEscapes all regular expression meta characters in <code>pattern</code>.\nExpands all instances of <code>$ref</code> in <code>replacement</code> to the …\nThis is a convenience routine for extracting the substrings\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::find</code>, but starts the search at …\nReturns an iterator that yields successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the <code>Match</code> associated with the capture group at …\nReturns the start and end byte offsets of the capture …\nThis configures verbose mode for the entire pattern.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this match has a length of …\nReturns true if and only if there is a match for the regex …\nReturns the same as <code>Regex::is_match</code>, but starts the search …\nReturns an iterator over all capture groups. This includes …\nReturns the total number of capture groups. This includes …\nReturns the length, in bytes, of this match.\nReturns the total number of capture groups (even if they …\nThis configures multi-line mode for the entire pattern.\nReturns the <code>Match</code> associated with the capture group named …\nSet the nesting limit for this parser.\nCompiles a regular expression. Once compiled, it can be …\nCreate a new builder with a default configuration for the …\nReturn a fixed unchanging replacement string.\nReturn a fixed unchanging replacement string.\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match in the given haystack …\nReplaces all non-overlapping matches in the haystack with …\nAppends possibly empty data to <code>dst</code> to replace the current …\nReplaces at most <code>limit</code> non-overlapping matches in the …\nReturns the end byte offset of the first match in the …\nReturns the same as <code>Regex::shortest_match</code>, but starts the …\nSets the approximate size limit, in bytes, of the compiled …\nReturns an iterator of substrings of the haystack given, …\nReturns an iterator of at most <code>limit</code> substrings of the …\nReturns the byte offset of the start of the match in the …\nReturns the total number of capturing groups that appear …\nThis configures swap-greed mode for the entire pattern.\nAttempts to parse a string into a regular expression\nAttempts to parse a string into a regular expression")