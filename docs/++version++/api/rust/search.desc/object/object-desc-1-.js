searchState.loadedDescShard("object", 1, "Target Operating system\nExpected Windows version number\nFlag word\nOther .EXE flags\nInitial heap allocation\nOffset of Imported Names Table\nMagic number\nOffset of Module Reference Table\nOffset of Non-resident Names Table\noffset to return thunks\noffset to segment ref. bytes\nOffset of resident name table\nRevision number\nOffset of Resource Table\nOffset of Segment Table\nInitial SS:SP setting\nInitial stack allocation\nMinimum code swap area size\nVersion number\nfixup instruction (see alphaops.h)\nReturn the file offset of the nt_headers.\nsection number to associate with\nnumber of line numbers\nnumber of relocation entries\nextended from WORD\nRVA of the data.\nif grf &amp; IMPORT_OBJECT_ORDINAL\nRVA to original unbound IAT (<code>ImageThunkData32</code>/…\nRead the DOS header.\nRead the short import header.\nParse the data following the header.\nReturn the virtual address and size of the section.\nReturn the section data in a PE file.\nReturn the data starting at the given virtual address, up …\nReturn the section data if it contains the given virtual …\nReturn the offset and size of the section in a PE file.\nReturn the file offset of the given virtual address, and …\nReturn the raw section name.\nAdditional bitmask to be defined later\nMust be 0\nMust be 0\nVA\nVA\nVA\nVA\ncommunal selection type\nMust be IMAGE_FILE_MACHINE_UNKNOWN\nMust be IMAGE_FILE_MACHINE_UNKNOWN\nMust be IMAGE_FILE_MACHINE_UNKNOWN\nMust be IMAGE_FILE_MACHINE_UNKNOWN\nMust be 0xffff\nMust be 0xffff\nMust be 0xffff\nMust be IMPORT_OBJECT_HDR_SIG2.\nFile member size - decimal.\nSize of data that follows the header\nSize of data that follows the header\nSize of data that follows the header\nparticularly useful for incremental links\nGet the index of the symbol referenced by this relocation.\nSymbol table index of function name if Linenumber is 0. …\n0 if not bound, -1 if bound, and real date\\time stamp in …\n0 if not bound, otherwise, date/time of the target DLL\nTime/date stamp\nTRUE if data is unicode string\nRVA to an optional unload info table\nFile member user id - decimal.\n= 1 (implies the ClsId field is present)\n= 2 (implies the Flags field is present - otherwise V1)\n= 2 (implies the Flags field is present)\nAlso <code>RelocCount</code> when IMAGE_SCN_LNK_NRELOC_OVFL is set\nVA\nVA\nthe weak extern default symbol index\nA trait for types that can safely be converted from and to …\nCast a <code>Pod</code> type to a byte slice.\nCast a <code>Pod</code> type to a mutable byte slice.\nCast a slice of a <code>Pod</code> type to a byte slice.\nCast a slice of a <code>Pod</code> type to a mutable byte slice.\nCast the head of a byte slice to a <code>Pod</code> type.\nCast the head of a mutable byte slice to a <code>Pod</code> type.\nCast all of a byte slice to a slice of a <code>Pod</code> type.\nCast all of a byte slice to a slice of a <code>Pod</code> type.\nCast the head of a byte slice to a slice of a <code>Pod</code> type.\nCast the head of a mutable byte slice to a slice of a <code>Pod</code> …\nAArch64 call target.\nS + A\nThe symbol has an absolute value.\nThe offset is an absolute address.\nThe size of an address value for an architecture.\nMultiple definitions are allowed.\nA CPU architecture.\nA Unix archive.\nA binary file format.\nA newtype for byte slices.\nPDB information from the debug directory in a PE file.\nCOFF file flags.\nCOFF segment flags.\nCOFF section flags.\nCOFF relocation fields.\nA COFF object file.\nA COFF bigobj object file.\nA Windows short import file.\nCOFF flags for a section symbol.\nA COMDAT section group in a <code>File</code>.\nA COMDAT section group in the object file.\nAn iterator for the COMDAT section groups in a <code>File</code>.\nAn iterator for the COMDAT section groups in the object …\nThe selection kind for a COMDAT section group.\nAn iterator for the sections in a <code>Comdat</code>.\nAn uninitialized common data section.\nThe symbol is a zero-initialized symbol that will be …\nSymbol is visible to the compilation unit.\nData that may be compressed.\nA range in a file that may be compressed.\nA data compression format.\nCore.\nA data section.\nThe symbol is for a data object.\nDebug information.\nDebug strings.\nA dyld cache file containing Mach-O images.\nSymbol is visible to dynamically linked objects.\nDynamic shared object.\nAn iterator for the dynamic relocation entries in a <code>File</code>.\nAn iterator for the dynamic relocations in the file.\nE2K 28-bit value stored in CS0\nE2K 64-bit value stored in two LTS\nSome other ELF section type.\nELF file flags.\nELF segment flags.\nELF section flags.\nELF symbol flags.\nELF relocation fields.\nA 32-bit ELF file.\nA 64-bit ELF file.\nContains the error value\nThe error type used within the read module.\nMultiple definitions must match exactly.\nExecutable.\nAn exported symbol.\nAn object file that can be any supported file format.\nThe symbol is the name of a file. It precedes symbols …\nFile flags that are specific to each file format.\nA file format kind.\nGeneric encoding.\nFormat independent representation.\nG + A - GotBase\nS + A - GotBase\nGotBase + A - P\nG + A - P\nS + A - Image\nAn imported symbol.\nThe symbol is for a code label.\nMultiple definitions are allowed, and the largest is …\nSymbol is visible to the static linkage unit.\nInformation for the linker.\nLoongArch branch offset with two trailing zeros.\nMach-O file flags.\nMach-O segment flags.\nMach-O section flags.\nMach-O symbol flags.\nMach-O relocation fields.\nA 32-bit Mach-O file.\nA 64-bit Mach-O file.\nA 32-bit Mach-O fat binary.\nA 64-bit Mach-O fat binary.\nMetadata such as symbols or relocations.\nThe native executable file for the target platform.\nMultiple definitions are allowed, and the newest is …\nMultiple definitions are not allowed.\nAn iterator for files that don’t have dynamic …\nNo file flags.\nNo segment flags.\nNo section flags.\nNo symbol flags.\nThe section is not applicable for this symbol (such as …\nThe data is uncompressed.\nELF note section.\nAn object file.\nA COMDAT section group in an <code>Object</code>.\nAn object kind.\nA map from addresses to symbol names and object files.\nA symbol in an <code>ObjectMap</code>.\nAn object file name in an <code>ObjectMap</code>.\nA section in an <code>Object</code>.\nA loadable segment in an <code>Object</code>.\nA symbol table entry in an <code>Object</code>.\nA symbol table in an <code>Object</code>.\nContains the success value\nSome other non-loadable section.\nA non-loadable string section.\nA 32-bit PE file.\nA 64-bit PE file.\nL + A - P\nAn implementation of <code>ReadRef</code> for data in a stream that …\nOperations required to implement <code>ReadCache</code>.\nAn implementation of <code>ReadRef</code> for a range of data in a …\nA read only data section.\nA read only data section with relocations.\nA loadable string section.\nA trait for reading references to <code>Pod</code> types from a block …\nS + A - P\nRelocatable object.\nA relocation entry.\nInformation about how the result of the relocation …\nRelocation fields that are specific to each file format …\nAn iterator for the relocations for a section.\nThe operation used to calculate the result of the …\nA map from section offsets to relocation information.\nThe target referenced by a <code>Relocation</code>.\nThe result type used within the read module.\ns390x PC-relative offset shifted right by one bit.\nMultiple definitions must have the same size.\nA section in a <code>File</code>.\nThe symbol is for a section.\nThe symbol is defined in the given section.\nThe target is a section.\nA section in the object file.\nSection flags that are specific to each file format.\nThe index used to identify a section in a file.\nThe index of the section containing the symbol.\nAn iterator for the sections in a <code>File</code>.\nAn iterator for the sections in the object file.\nAn iterator for the sections in the section group.\nThe kind of a section.\nS + A - Section\nAn iterator for the relocation entries in a <code>Section</code>.\nA loadable segment in a <code>File</code>.\nA loadable segment in the object file.\nSegment flags that are specific to each file format.\nAn iterator for the loadable segments in a <code>File</code>.\nAn iterator for the loadable segments in the object file.\nSHARC+ 48-bit Type A instruction\nSHARC+ 32-bit Type B instruction\nA table of zero-terminated strings.\nA CPU sub-architecture.\nAn symbol in a <code>SymbolTable</code>.\nThe target is a symbol.\nA symbol in the object file.\nA symbol table entry.\nSymbol flags that are specific to each file format.\nThe index used to identify a symbol in a symbol table.\nAn iterator for the symbols in a <code>SymbolTable</code>.\nAn iterator for symbols in the object file.\nAn iterator for the symbols in a symbol table.\nThe kind of a symbol.\nA map from addresses to symbol information.\nAn entry in a <code>SymbolMap</code>.\nThe type used for entries in a <code>SymbolMap</code> that maps from …\nA symbol scope.\nThe section where an <code>ObjectSymbol</code> is defined.\nA symbol table in a <code>File</code>.\nA symbol table in the object file.\nAn executable code section.\nThe symbol is for executable code.\nA TLS data section.\nThe symbol is for a thread local storage entity.\nA TLS variables section.\nThe symbol is undefined.\nAn uninitialized data section.\nAn uninitialized TLS data section.\nThe section kind is unknown.\nThe selection kind is unknown.\nThe symbol kind is unknown.\nUnknown scope.\nThe operation is unknown.\nThe relocation encoding is unknown.\nThe object kind is unknown.\nThe section is unknown.\nThe data is compressed, but the compression format is …\nx86 branch instruction.\nx86 rip-relative addressing.\nx86 rip-relative addressing in movq instruction.\nx86 sign extension at runtime.\nXCOFF file flags.\nXCOFF section flags.\nXCOFF symbol flags.\nXCOFF relocation fields.\nA 32-bit XCOFF file.\nA 64-bit XCOFF file.\nZLIB/DEFLATE.\nZstandard.\nAdd a single relocation to the map.\nThe addend to use in the relocation calculation.\nReturns the virtual address of the segment.\nReturns the address of the section.\nThe address of the symbol. May be zero if the address is …\nThe symbol address.\nThe symbol address.\nGet the symbol address.\nThe virtual address of the symbol.\nThe age of the PDB.\nReturns the alignment of the segment in memory.\nReturns the alignment of the section in memory.\nGet the architecture type of the file.\nSupport for archive files.\nThe build ID from an ELF <code>NT_GNU_BUILD_ID</code> note.\nThe build ID from an ELF <code>NT_GNU_BUILD_ID</code> note.\nFree buffers used by the cache.\nSupport for reading Windows COFF files.\nGet an iterator for the COMDAT section groups in the file.\nReturns the potentially compressed contents of the section,\nReturns the potentially compressed file range of the …\nThe compressed data size.\nReturns a reference to the file contents of the segment.\nReturns the raw contents of the section.\nConvert to <code>CompressedData</code> by reading from the file.\nThe compressed data.\nReturn the segment data in the given range.\nReturn the raw contents of the section data in the given …\nReturn the uncompressed data.\nGet the dynamic relocations for this file.\nGet the dynamic linking symbol table, if any.\nGet an iterator for the dynamic linking symbols in the …\nSupport for reading ELF files.\nInformation about how the result of the relocation …\nGet the endianness of the file.\nGet the endianness of the file.\nGet the virtual address of the entry point of the binary.\nGet the exported symbols that expose both a name and an …\nReturns the offset and size of the segment in the file.\nReturns offset and size of on-disk segment (if any).\nFile flags that are specific to each file format.\nReturn the flags of segment.\nSection flags that are specific to each file format.\nSymbol flags that are specific to each file format.\nRelocation flags that are specific to each file format.\nReturn the file format.\nThe data compression format.\nThe data compression format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the string at the given offset.\nGet the symbol before the given address.\nGet the entry containing the given address.\nThe filename and build ID from a <code>.gnu_debugaltlink</code> section.\nThe filename and build ID from a <code>.gnu_debugaltlink</code> section.\nThe filename and CRC from a <code>.gnu_debuglink</code> section.\nThe filename and CRC from a <code>.gnu_debuglink</code> section.\nThe GUID of the PDB.\nReturn true if the file contains DWARF debug information …\nReturns true if there is an implicit addend stored in the …\nGet the imported symbols.\nReturns the section index.\nThe index of the symbol.\nReturns the section index for the section where the symbol …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap this <code>ReadCache&lt;R&gt;</code>, returning the underlying reader.\nReturn true if the file can contain 64-bit addresses.\nReturn true if the symbol is common data.\nReturn true if the symbol is a definition of a function or …\nReturn true if the byte slice is empty.\nReturn true if the symbol visible outside of the …\nReturn true if the file is little endian, false if it is …\nReturn true if the symbol is only visible within the …\nReturn true if the symbol is undefined.\nReturn true if the symbol is weak.\nReturn the kind of this object.\nReturn the kind of this section.\nReturns the COMDAT selection kind.\nReturn the kind of this symbol.\nThe operation used to calculate the result of the …\nThe total size of the block of data.\nReturn the length of the stream.\nReturn the length of the byte slice.\nThe name of the library to import the symbol from.\nThe UUID from a Mach-O <code>LC_UUID</code> load command.\nThe UUID from a Mach-O <code>LC_UUID</code> load command.\nSupport for reading Mach-O files.\nIf the file is an archive, get the name of the member …\nReturns the name of the segment.\nReturns the name of the section.\nReturns the name of the COMDAT section group.\nThe name of the symbol.\nThe symbol name.\nGet the symbol name.\nThe symbol name.\nThe symbol name.\nReturns the name of the segment.\nReturns the name of the section.\nReturns the name of the COMDAT section group.\nThe name of the symbol.\nCreate an empty <code>ReadCache</code> for the given stream.\nInterpret the given data as a string table.\nConstruct a new symbol map.\nConstruct a <code>SymbolMapName</code>.\nConstruct a new relocation map for a section.\nData that is uncompressed.\nData that is uncompressed.\nGet the object file name.\nGet the index of the object file name.\nConstruct a map from addresses to symbol names and object …\nConstruct a map from addresses to symbol names and object …\nGet all objects in the map.\nThe file offset of the compressed data.\nParse the raw file data.\nDetermine a file kind by parsing the start of the file.\nDetermine a file kind by parsing at the given offset.\nParse a Mach-O image from the dyld shared cache.\nGet the path to the file containing the object.\nThe path to the PDB as stored in CodeView.\nThe filename and GUID from the PE CodeView section.\nThe filename and GUID from the PE CodeView section.\nSupport for reading PE files.\nReturn an implementation of <code>ReadRef</code> that restricts reads …\nRead up to <code>buf.len()</code> bytes into <code>buf</code>.\nGet a reference to a <code>Pod</code> type at the given offset, and …\nGet a reference to a <code>Pod</code> type at the given offset, and …\nReturn a reference to a <code>Pod</code> struct at the start of the …\nGet a reference to a <code>Pod</code> type at the given offset.\nGet a reference to a <code>Pod</code> type at the given offset.\nReturn a reference to a <code>Pod</code> struct at the given offset of …\nGet a reference to a <code>u8</code> slice at the given offset, and …\nGet a reference to a <code>u8</code> slice at the given offset, and …\nReturn a reference to the given number of bytes at the …\nGet a reference to a <code>u8</code> slice at the given offset.\nReturn a reference to the given number of bytes at the …\nGet a reference to a delimited <code>u8</code> slice which starts at …\nRead exactly <code>buf.len()</code> bytes into <code>buf</code>.\nRead a signed LEB128 number.\nGet a reference to a slice of a <code>Pod</code> type at the given …\nGet a reference to a slice of a <code>Pod</code> type at the given …\nReturn a reference to a slice of <code>Pod</code> structs at the start …\nGet a reference to a slice of a <code>Pod</code> type at the given …\nGet a reference to a slice of a <code>Pod</code> type at the given …\nReturn a reference to a slice of <code>Pod</code> structs at the given …\nRead a null terminated string.\nRead a null terminated string at an offset.\nRead an unsigned LEB128 number.\nGet the base address used for relative virtual addresses.\nRelocate a value that was read from the section at the …\nConstruct a relocation map for this section.\nGet the relocations for this section.\nReturns the symbol scope.\nReturns the section where the symbol is defined.\nGet the section at the given index.\nGet the section named <code>section_name</code>, if such a section …\nGet the section named <code>section_name</code>, if such a section …\nLike <code>Self::section_by_name</code>, but allows names that are not …\nReturns the section index for the section containing this …\nReturns the section index for the section containing this …\nGet an iterator for the sections in the file.\nGet the sections in this section group.\nSeek to the given position in the stream.\nReturns the name of the segment for this section.\nReturns the name of the segment for this section.\nGet an iterator for the loadable segments in the file.\nSet the addend to use in the relocation calculation.\nReturns the size of the segment in memory.\nReturns the size of the section in memory.\nThe size of the symbol. May be zero if the size is unknown.\nGet the symbol size.\nThe size in bits of the place of the relocation.\nSkip over the given number of bytes at the start of the …\nGet the sub-architecture type of the file if known.\nGet the sub-architecture type of the file if known.\nReturns the index of the symbol used for the name of …\nGet the debugging symbol at the given index.\nGet the symbol at the given index.\nGet the symbol named <code>symbol_name</code>, if the symbol exists.\nGet the symbol named <code>symbol_name</code>, if the symbol exists.\nLike <code>Self::symbol_by_name</code>, but allows names that are not …\nLike <code>Self::symbol_by_name</code>, but allows names that are not …\nConstruct a map from addresses to symbol names.\nConstruct a map from addresses to symbol names.\nGet the debugging symbol table, if any.\nGet an iterator for the debugging symbols in the file.\nGet an iterator for the symbols in the table.\nGet all symbols in the map.\nGet all symbols in the map.\nThe target of the relocation.\nReturns the uncompressed contents of the section.\nReturns the uncompressed contents of the section.\nThe uncompressed data size.\nThe uncompressed data size.\nSupport for reading AIX XCOFF files.\n<code>abi_version</code> field in the ELF file header.\n<code>Characteristics</code> field in the COFF file header.\n<code>e_flags</code> field in the ELF file header.\n<code>f_flags</code> field in the XCOFF file header.\n<code>flags</code> field in the Mach-O file header.\n<code>os_abi</code> field in the ELF file header.\nInformation about how the result of the relocation …\nThe operation used to calculate the result of the …\n<code>r_length</code> field in the Mach-O relocation.\n<code>r_pcrel</code> field in the Mach-O relocation.\n<code>r_rsize</code> field in the XCOFF relocation.\n<code>r_rtype</code> field in the XCOFF relocation.\n<code>r_type</code> field in the ELF relocation.\n<code>r_type</code> field in the Mach-O relocation.\nThe size in bits of the place of relocation.\n<code>typ</code> field in the COFF relocation.\n<code>Characteristics</code> field in the section header.\n<code>flags</code> field in the section header.\n<code>s_flags</code> field in the section header.\n<code>sh_flags</code> field in the section header.\n<code>Characteristics</code> field in the segment header.\n<code>flags</code> field in the segment header.\n<code>initprot</code> field in the segment header.\n<code>maxprot</code> field in the segment header.\n<code>p_flags</code> field in the segment header.\n<code>Number</code> field in the auxiliary symbol for the section.\nThe containing csect for the symbol.\n<code>n_desc</code> field in the Mach-O symbol.\n<code>n_sclass</code> field in the XCOFF symbol.\n<code>Selection</code> field in the auxiliary symbol for the section.\n<code>st_info</code> field in the ELF symbol.\n<code>st_other</code> field in the ELF symbol.\n<code>x_smclas</code> field in the CSECT auxiliary symbol.\n<code>x_smtyp</code> field in the CSECT auxiliary symbol.\nThe AIX big archive format.\nA partially parsed archive file.\nThe kind of archive format.\nA partially parsed archive member.\nAn iterator over the members of an archive.\nAn offset of a member in an archive.\nA symbol in the archive symbol table.\nAn iterator over the symbols in the archive symbol table.\nThe BSD archive format.\nThe BSD archive format with 64-bit symbol table.\nThe Windows COFF archive format.\nThe GNU (or System V) archive format.\nThe GNU (or System V) archive format with 64-bit symbol …\nThere are no special files that indicate the archive …\nReturn the raw header for AIX big archives.\nReturn the file data.\nParse the file modification timestamp from the header.\nReturn the offset and size of the file data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the group ID from the header.\nReturn the raw header that is common to many archive …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the archive is a thin archive.\nReturn true if the member is a thin member.\nReturn the archive format.\nReturn the member at the given offset.\nIterate over the members of the archive.\nParse the file mode from the header.\nReturn the parsed file name.\nReturn the symbol name.\nReturn the offset of the header for the member containing …\nParse the archive header and special members.\nReturn the size of the file data.\nIterate over the symbols in the archive.\nParse the user ID from the header.\nAn executable code symbol.\nA COMDAT section group in a <code>CoffBigFile</code>.\nAn iterator for the COMDAT section groups in a <code>CoffBigFile</code>.\nAn iterator for the sections in a COMDAT section group in …\nA COFF bigobj object file with 32-bit section numbers.\nAn iterator for the relocations in a <code>CoffBigSection</code>.\nA section in a <code>CoffBigFile</code>.\nAn iterator for the sections in a <code>CoffBigFile</code>.\nA loadable section in a <code>CoffBigFile</code>.\nAn iterator for the loadable sections in a <code>CoffBigFile</code>.\nA symbol in a <code>CoffBigFile</code>.\nAn iterator for the symbols in a <code>CoffBigFile</code>.\nA symbol table in a <code>CoffBigFile</code>.\nA COMDAT section group in a <code>CoffFile</code>.\nAn iterator for the COMDAT section groups in a <code>CoffFile</code>.\nAn iterator for the sections in a COMDAT section group in …\nA COFF object file.\nA trait for generic access to <code>pe::ImageFileHeader</code> and …\nAn iterator for the relocations in a <code>CoffSection</code>.\nA section in a <code>CoffFile</code>.\nAn iterator for the sections in a <code>CoffFile</code>.\nA loadable section in a <code>CoffFile</code>.\nAn iterator for the loadable sections in a <code>CoffFile</code>.\nA symbol in a <code>CoffFile</code> or <code>PeFile</code>.\nAn iterator for the symbols in a <code>CoffFile</code> or <code>PeFile</code>.\nA symbol table in a <code>CoffFile</code> or <code>PeFile</code>.\nA constant value.\nA data symbol.\nA trait for generic access to <code>pe::ImageSymbol</code> and …\nA Windows short form description of a symbol to import.\nThe name or ordinal to import from a DLL.\nThe data following <code>pe::ImportObjectHeader</code>.\nThe kind of import symbol.\nImport by name.\nImport by ordinal. Ordinarily this is a 1-based index.\nThe table of section headers in a COFF or PE file.\nAn iterator for symbol entries in a COFF or PE file.\nA table of symbol entries in a COFF or PE file.\nReturn the symbol address.\nReturn the symbol address.\nRead the <code>class_id</code> field from a <code>pe::AnonObjectHeader</code>.\nGet the machine type.\nReturn the auxiliary file name for the symbol table entry …\nReturn the auxiliary function symbol for the symbol table …\nReturn the auxiliary section symbol for the symbol table …\nGet the COFF file containing this segment.\nGet the COFF file containing this section.\nGet the raw COFF file header.\nGet the raw COFF relocations for this section.\nGet the raw COFF section header.\nGet the raw COFF section header.\nGet the COFF section table.\nGet the raw <code>ImageSymbol</code> struct.\nGet the COFF symbol table.\nThe name of the DLL to import the symbol from.\nThe name of the DLL to import the symbol from.\nIterate over the section headers and their indices.\nThe name exported from the DLL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the symbol table entry or auxiliary record at the …\nReturn true if the symbol has an auxiliary file name.\nReturn true if the symbol has an auxiliary file name.\nReturn true if the symbol has an auxiliary function symbol.\nReturn true if the symbol has an auxiliary function symbol.\nReturn true if the symbol has an auxiliary section symbol.\nReturn true if the symbol has an auxiliary section symbol.\nThe name exported from the DLL.\nThe type of import. Usually either a function or data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the symbol is a definition of a function or …\nReturn true if the symbol is a definition of a function or …\nReturn true if the section table is empty.\nReturn true if the symbol table is empty.\nReturn true if this type is <code>pe::AnonObjectHeaderBigobj</code>.\nIterate over the section headers.\nIterate over the symbols.\nThe number of section headers.\nThe number of symbol table entries.\nConstruct a map from addresses to a user-defined map entry.\nCompute the maximum file offset used by sections.\nParse a COFF symbol name.\nParse a COFF symbol name.\nRead the file header.\nParse the raw COFF file data.\nParse the section table.\nRead the symbol table.\nParse it.\nReturn the data starting at the given virtual address, up …\nReturn the data of the section that contains the given …\nReturn the file offset of the given virtual address, and …\nGet the raw <code>ImageSymbol</code> struct.\nReturn the section index for the symbol.\nReturn the section index for the symbol.\nReturn the section header at the given index.\nReturn the section header with the given name.\nReturn the section that contains a given virtual address.\nRead the section table.\nRead the section table.\nReturn the string table used for the symbol names.\nGet the sub machine type, if available.\nReturn the symbol table entry at the given index.\nThe public symbol name.\nThe public symbol name.\nRead the symbol table and string table.\nRead the symbol table and string table.\nAn iterator over the indices in an <code>AttributesSubsubsection</code>.\nA parser for the attributes in an <code>AttributesSubsubsection</code>.\nAn ELF attributes section.\nA subsection in an <code>AttributesSection</code>.\nAn iterator for the subsections in an <code>AttributesSection</code>.\nA sub-subsection in an <code>AttributesSubsection</code>.\nAn iterator for the sub-subsections in an …\nThe number of bits in the bit mask, excluding the lowest …\nA trait for generic access to <code>elf::CompressionHeader32</code> and …\nA trait for generic access to <code>elf::Dyn32</code> and <code>elf::Dyn64</code>.\nA COMDAT section group in an <code>ElfFile</code>.\nA COMDAT section group in an <code>ElfFile32</code>.\nA COMDAT section group in an <code>ElfFile64</code>.\nAn iterator for the COMDAT section groups in an <code>ElfFile</code>.\nAn iterator for the COMDAT section groups in an <code>ElfFile32</code>.\nAn iterator for the COMDAT section groups in an <code>ElfFile64</code>.\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the dynamic relocations in an <code>ElfFile</code>.\nAn iterator for the dynamic relocations in an <code>ElfFile32</code>.\nAn iterator for the dynamic relocations in an <code>ElfFile64</code>.\nA partially parsed ELF file.\nA 32-bit ELF object file.\nA 64-bit ELF object file.\nA section in an <code>ElfFile</code>.\nA section in an <code>ElfFile32</code>.\nA section in an <code>ElfFile64</code>.\nAn iterator for the sections in an <code>ElfFile</code>.\nAn iterator for the sections in an <code>ElfFile32</code>.\nAn iterator for the sections in an <code>ElfFile64</code>.\nAn iterator for the relocations for an <code>ElfSection</code>.\nAn iterator for the relocations for an <code>ElfSection32</code>.\nAn iterator for the relocations for an <code>ElfSection64</code>.\nA segment in an <code>ElfFile</code>.\nA segment in an <code>ElfFile32</code>.\nA segment in an <code>ElfFile64</code>.\nAn iterator for the segments in an <code>ElfFile</code>.\nAn iterator for the segments in an <code>ElfFile32</code>.\nAn iterator for the segments in an <code>ElfFile64</code>.\nA symbol in an <code>ElfFile</code>.\nA symbol in an <code>ElfFile32</code>.\nA symbol in an <code>ElfFile64</code>.\nAn iterator for the symbols in an <code>ElfFile</code>.\nAn iterator for the symbols in an <code>ElfFile32</code>.\nAn iterator for the symbols in an <code>ElfFile64</code>.\nA symbol table in an <code>ElfFile</code>.\nA symbol table in an <code>ElfFile32</code>.\nA symbol table in an <code>ElfFile32</code>.\nA trait for generic access to <code>elf::FileHeader32</code> and …\nA GNU symbol hash table in an ELF file.\nA property in a <code>elf::NT_GNU_PROPERTY_TYPE_0</code> note.\nAn iterator for the properties in a …\nA SysV symbol hash table in an ELF file.\nA parsed <code>NoteHeader</code>.\nA trait for generic access to <code>elf::NoteHeader32</code> and …\nAn iterator over the notes in an ELF section or segment.\nA trait for generic access to <code>elf::ProgramHeader32</code> and …\nA trait for generic access to <code>elf::Rel32</code> and <code>elf::Rel64</code>.\nA trait for generic access to <code>elf::Rela32</code> and <code>elf::Rela64</code>.\nA mapping from section index to associated relocation …\nA trait for generic access to <code>elf::Relr32</code> and <code>elf::Relr64</code>.\nAn iterator over the relative relocations in an ELF …\nA trait for generic access to <code>elf::SectionHeader32</code> and …\nThe table of section headers in an ELF file.\nA trait for generic access to <code>elf::Sym32</code> and <code>elf::Sym64</code>.\nA table of symbol entries in an ELF file.\nAn iterator for the auxiliary records for an entry in an …\nAn iterator for the entries in an ELF <code>elf::SHT_GNU_VERDEF</code> …\nAn iterator for the auxiliary records for an entry in an …\nAn iterator for the entries in an ELF <code>elf::SHT_GNU_VERNEED</code> …\nA version definition or requirement.\nA version index.\nA table of version definitions and requirements.\nParse the contents of the section as attributes.\nParse the contents of the section as attributes.\nReturn a parser for the data containing the attributes.\nReturn the data containing the attributes.\nParse the compression header if present.\nParse the compression header if present.\nReturn the segment data.\nReturn the segment data.\nReturn the section data.\nReturn the section data.\nReturns the raw data.\nReturn the segment data as a slice of the given type.\nReturn the segment data as a slice of the given type.\nReturn the section data as a slice of the given type.\nReturn the section data as a slice of the given type.\nReturn the segment data in the given virtual address range\nReturn the segment data in the given virtual address range\nParse the property data as an unsigned 32-bit integer.\nReturn the bytes for the desc field following the …\nReturn entries in a dynamic segment.\nReturn entries in a dynamic segment.\nReturn entries in a dynamic section.\nReturn entries in a dynamic section.\nReturn the contents of a dynamic section.\nGet the ELF dynamic symbol table.\nGet the ELF file containing this segment.\nGet the ELF file containing this section.\nGet the ELF file containing this COMDAT section group.\nGet the raw ELF file header.\nGet the <code>Elf::Rel</code> entries that apply to this section.\nGet the <code>Elf::Rela</code> entries that apply to this section.\nGet the raw ELF program header for the segment.\nGet the raw ELF program headers.\nGet the relocation section that references this section.\nGet the index of the relocation section that references …\nGet a mapping for linked relocation sections.\nGet the raw ELF section header.\nGet the raw ELF section header for the COMDAT section …\nGet the ELF section table.\nGet the raw ELF symbol structure.\nGet the ELF symbol table.\nReturns the endianness.\nGet the endianness of the ELF file.\nIterate over the section headers and their indices.\nIterate over the symbols and their indices.\nReturn the filename of the library containing this version.\nReturn the offset and size of the segment in the file.\nReturn the offset and size of the segment in the file.\nReturn the offset and size of the section in the file.\nReturn the offset and size of the section in the file.\nUse the hash table to find the symbol table entry with the …\nUse the hash table to find the symbol table entry with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the relocation entry.\nGiven a section index, return the section index of the …\nReturn the contents of a <code>SHT_GNU_ATTRIBUTES</code> section.\nReturn the contents of a <code>SHT_GNU_ATTRIBUTES</code> section.\nReturn the contents of a GNU hash section.\nReturn the contents of a GNU hash section.\nReturn the contents of a GNU hash section.\nReturn the header of a GNU hash section.\nReturn the header of a GNU hash section.\nReturn the header of a GNU hash section.\nReturn an iterator for properties if this note’s type is …\nReturn an iterator for the entries of a <code>SHT_GNU_VERDEF</code> …\nReturn an iterator for the entries of a <code>SHT_GNU_VERDEF</code> …\nReturn the contents of a <code>SHT_GNU_VERDEF</code> section.\nReturn an iterator for the entries of a <code>SHT_GNU_VERNEED</code> …\nReturn an iterator for the entries of a <code>SHT_GNU_VERNEED</code> …\nReturn the contents of a <code>SHT_GNU_VERNEED</code> section.\nReturn the contents of a <code>SHT_GNU_VERSYM</code> section.\nReturn the contents of a <code>SHT_GNU_VERSYM</code> section.\nReturn the contents of a <code>SHT_GNU_VERSYM</code> section.\nReturn the contents of a group section.\nReturn the contents of a group section.\nReturn true if the <code>SHF_INFO_LINK</code> flag is set.\nReturn true if the <code>SHF_INFO_LINK</code> flag is set.\nReturn the contents of a SysV hash section.\nReturn the contents of a SysV hash section.\nReturn the contents of a SysV hash section.\nReturn hash of the version name.\nReturn the header of a SysV hash section.\nReturn the header of a SysV hash section.\nReturn the header of a SysV hash section.\nReturn the version index.\nReturn the indices.\nReturn the data containing the indices.\nGet the <code>sh_info</code> field as a section index.\nGet the <code>sh_info</code> field as a section index.\nReturn the data in an interpreter segment.\nReturn the data in an interpreter segment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the symbol section is <code>SHN_ABS</code>.\nReturn true if the symbol section is <code>SHN_ABS</code>.\nReturn true if the value is an address.\nReturn true if the value is an address.\nReturn true if the symbol section is <code>SHN_COMMON</code>.\nReturn true if the symbol section is <code>SHN_COMMON</code>.\nReturn true if the symbol is a definition of a function or …\nReturn true if the symbol is a definition of a function or …\nReturn true if the section table is empty.\nReturn true if the symbol table is empty.\nReturn true if the version table is empty.\nReturn true if it is the global index.\nReturn the hidden flag.\nReturn true if the symbol binding is <code>STB_LOCAL</code>.\nReturn true if the symbol binding is <code>STB_LOCAL</code>.\nReturn true if it is the local index.\nReturns whether this is a mips64el elf file.\nReturns whether this is a mips64el elf file.\nReturn true if the value is an offset in the dynamic …\nReturn true if the value is an offset in the dynamic …\nCheck that the ident field in the file header is a …\nCheck that the ident field in the file header is a …\nReturn true if this type is a 64-bit header.\nReturn true if this type is a 64-bit header.\nReturn true if the symbol section is <code>SHN_UNDEF</code>.\nReturn true if the symbol section is <code>SHN_UNDEF</code>.\nReturn true if the symbol binding is <code>STB_WEAK</code>.\nReturn true if the symbol binding is <code>STB_WEAK</code>.\nIterate over the section headers.\nIterate over the symbols.\nThe number of section headers.\nThe number of symbols.\nReturn the length of the attributes subsection.\nReturn the length of the attributes sub-subsection.\nGet the <code>sh_link</code> field as a section index.\nGet the <code>sh_link</code> field as a section index.\nConstruct a map from addresses to a user-defined map entry.\nReturn true if the given symbol index satisfies the …\nReturn the <code>n_descsz</code> field of the <code>NoteHeader</code>.\nReturn the <code>n_namesz</code> field of the <code>NoteHeader</code>.\nReturn the <code>n_type</code> field of the <code>NoteHeader</code>.\nParse the section name from the string table.\nParse the section name from the string table.\nParse the symbol name from the string table.\nParse the symbol name from the string table.\nReturn the bytes for the name field following the …\nReturn the version name.\nReturn the bytes for the name field following the …\nCreate a new section table.\nCreate a new iterator given the <code>SHT_RELR</code> section data.\nAn iterator over the notes in an ELF section or segment.\nParse an ELF attributes section given the section data.\nReturn the offset corresponding to the next bit in the bit …\nReturns the next note.\nReturns the next property.\nReturn the next <code>Verdef</code> entry.\nReturn the next <code>Verdaux</code> entry.\nReturn the next <code>Verneed</code> entry.\nReturn the next <code>Vernaux</code> entry.\nReturn the next subsection.\nReturn the next sub-subsection.\nParse the next index.\nReturn a note iterator for the segment data.\nReturn a note iterator for the segment data.\nReturn a note iterator for the section data.\nReturn a note iterator for the section data.\nRead the file header.\nRead the file header.\nParse the raw ELF file data.\nParse the given symbol table section.\nCreate a new mapping using the section table.\nParse a SysV hash table.\nParse a GNU hash table.\nParse the version sections.\nReturn the <code>e_phnum</code> field of the header. Handles extended …\nReturn the <code>e_phnum</code> field of the header. Handles extended …\nReturn the property data.\nReturn the property type.\nReturn the slice of program headers.\nReturn the slice of program headers.\nReturns the raw ELF file header.\nReturns the raw ELF segments.\nReturn a reference to the raw symbol structure.\nParse an integer value.\nParse a string value.\nParse a tag.\nReturn the <code>Elf::Rel</code> entries in the section.\nReturn the <code>Elf::Rel</code> entries in the section.\nReturn the <code>Elf::Rela</code> entries in the section.\nReturn the <code>Elf::Rela</code> entries in the section.\nCreate a mapping from section index to associated …\nReturn the <code>Elf::Relr</code> entries in the section.\nReturn the <code>Elf::Relr</code> entries in the section.\nGet the section header at the given index.\nReturn the section index of this symbol table.\nReturn the first section header, if present.\nReturn the first section header, if present.\nReturn the section header with the given name.\nReturn the slice of section headers.\nReturn the slice of section headers.\nReturn the section name for the given section header.\nReturn the string table for the section headers.\nReturn the string table for the section headers.\nGet the section index of the section header string table.\nGet the section index of the section header string table.\nReturn the section table.\nReturn the section table.\nReturn the extended section index for the given symbol if …\nReturn the section index of the shndx table.\nReturn the <code>e_shnum</code> field of the header. Handles extended …\nReturn the <code>e_shnum</code> field of the header. Handles extended …\nReturn the <code>e_shstrndx</code> field of the header. Handles …\nReturn the <code>e_shstrndx</code> field of the header. Handles …\nUse the value to get a string in a string table.\nUse the value to get a string in a string table.\nReturn the section index of the linked string table.\nReturn the strings in the section.\nReturn the strings in the section.\nReturn the string table at the given section index.\nReturn the string table used for the symbol names.\nReturn an iterator over the subsections.\nReturn an iterator over the sub-subsections.\nGet the symbol index referenced by the relocation.\nGet the symbol index referenced by the relocation.\nGet the symbol index referenced by the relocation.\nGet the symbol index referenced by the relocation.\nGet the symbol at the given index.\nReturn the symbol table index of the first symbol in the …\nReturn the symbol name for the given symbol.\nReturn the section index for the given symbol.\nReturn the symbol table at the given section index.\nReturn the symbol table length.\nDetermine the symbol table length by finding the last …\nReturn the symbols in the section.\nReturn the symbols in the section.\nReturn the symbol table of the given section type.\nReturn the symbol table.\nReturn the tag of the attributes sub-subsection.\nTry to convert the tag to a <code>u32</code>.\nTry to convert the tag to a <code>u32</code>.\nTry to convert the value to a <code>u32</code>.\nTry to convert the value to a <code>u32</code>.\nReturn the vendor name of the attributes subsection.\nReturn version information for a given symbol version …\nReturn the version of the attributes section.\nReturn version index for a given symbol index.\nReturns the symbol version table.\n<code>LC_BUILD_VERSION</code>\nA parsed representation of the dyld shared cache.\nOne image (dylib) from inside the dyld shared cache.\nAn iterator over all the images (dylibs) in the dyld …\n<code>LC_DYLD_ENVIRONMENT</code>\n<code>LC_DYLD_INFO</code> or <code>LC_DYLD_INFO_ONLY</code>\nInformation about a subcache.\nA slice of structs describing each subcache. The struct …\n<code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, <code>LC_REEXPORT_DYLIB</code>, …\n<code>LC_DYSYMTAB</code>\n<code>LC_ENCRYPTION_INFO</code>\n<code>LC_ENCRYPTION_INFO_64</code>\n<code>LC_MAIN</code>\nA trait for generic access to <code>macho::FatArch32</code> and …\n<code>LC_FILESET_ENTRY</code>\n<code>LC_ID_DYLIB</code>\n<code>LC_ID_DYLINKER</code>\n<code>LC_CODE_SIGNATURE</code>, <code>LC_SEGMENT_SPLIT_INFO</code>, …\n<code>LC_LINKER_OPTION</code>\nThe data for a <code>macho::LoadCommand</code>.\nAn iterator for the load commands from a <code>MachHeader</code>.\nA <code>macho::LoadCommand</code> that has been interpreted according …\n<code>LC_LOAD_DYLINKER</code>\nA trait for generic access to <code>macho::MachHeader32</code> and …\nA COMDAT section group in a <code>MachOFile</code>.\nA COMDAT section group in a <code>MachOFile32</code>.\nA COMDAT section group in a <code>MachOFile64</code>.\nAn iterator for the COMDAT section groups in a <code>MachOFile</code>.\nAn iterator for the COMDAT section groups in a <code>MachOFile64</code>.\nAn iterator for the COMDAT section groups in a <code>MachOFile64</code>.\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nA Mach-O universal binary.\nA 32-bit Mach-O universal binary.\nA 64-bit Mach-O universal binary.\nA partially parsed Mach-O file.\nA 32-bit Mach-O object file.\nA 64-bit Mach-O object file.\nAn iterator for the relocations in a <code>MachOSection</code>.\nAn iterator for the relocations in a <code>MachOSection32</code>.\nAn iterator for the relocations in a <code>MachOSection64</code>.\nA section in a <code>MachOFile</code>.\nA section in a <code>MachOFile32</code>.\nA section in a <code>MachOFile64</code>.\nAn iterator for the sections in a <code>MachOFile</code>.\nAn iterator for the sections in a <code>MachOFile32</code>.\nAn iterator for the sections in a <code>MachOFile64</code>.\nA segment in a <code>MachOFile</code>.\nA segment in a <code>MachOFile32</code>.\nA segment in a <code>MachOFile64</code>.\nAn iterator for the segments in a <code>MachOFile</code>.\nAn iterator for the segments in a <code>MachOFile32</code>.\nAn iterator for the segments in a <code>MachOFile64</code>.\nA symbol in a <code>MachOFile</code>.\nA symbol in a <code>MachOFile32</code>.\nA symbol in a <code>MachOFile64</code>.\nAn iterator for the symbols in a <code>MachOFile</code>.\nAn iterator for the symbols in a <code>MachOFile32</code>.\nAn iterator for the symbols in a <code>MachOFile64</code>.\nA symbol table in a <code>MachOFile</code>.\nA symbol table in a <code>MachOFile32</code>.\nA symbol table in a <code>MachOFile64</code>.\nA trait for generic access to <code>macho::Nlist32</code> and …\n<code>LC_NOTE</code>\nAn unrecognized or obsolete load command.\n<code>LC_PREBIND_CKSUM</code>\n<code>LC_PREBOUND_DYLIB</code>\n<code>LC_ROUTINES</code>\n<code>LC_ROUTINES_64</code>\n<code>LC_RPATH</code>\nA trait for generic access to <code>macho::Section32</code> and …\nA trait for generic access to <code>macho::SegmentCommand32</code> and …\n<code>LC_SEGMENT</code>\n<code>LC_SEGMENT_64</code>\n<code>LC_SOURCE_VERSION</code>\n<code>LC_SUB_CLIENT</code>\n<code>LC_SUB_FRAMEWORK</code>\n<code>LC_SUB_LIBRARY</code>\n<code>LC_SUB_UMBRELLA</code>\nA table of symbol entries in a Mach-O file.\n<code>LC_SYMTAB</code>\n<code>LC_THREAD</code> or <code>LC_UNIXTHREAD</code>\n<code>LC_TWOLEVEL_HINTS</code>\n<code>LC_UUID</code>\nV1, used between dyld-940 and dyld-1042.1.\nV2, used since dyld-1042.1.\n<code>LC_VERSION_MIN_MACOSX</code>, <code>LC_VERSION_MIN_IPHONEOS</code>, …\nFind the file offset of the image by looking up its …\nReturn the array of fat arches.\nGet the architecture type of the file.\nReturn the <code>LC_BUILD_VERSION</code> load command if present.\nTry to parse this command as a <code>macho::BuildVersionCommand</code>.\nReturn the <code>cmd</code> field of the <code>macho::LoadCommand</code>.\nReturn the <code>cmdsize</code> field of the <code>macho::LoadCommand</code>.\nGet the segment data from the file data.\nGet the segment data from the file data.\nReturn the section data.\nReturn the section data.\nReturns the raw data.\nParse the data as the given type.\nFind the address in a mapping and return the cache or …\nTry to parse this command as a <code>macho::DyldInfoCommand</code>.\nTry to parse this command as a <code>macho::DylibCommand</code>.\nTry to parse this command as a <code>macho::DysymtabCommand</code>.\nReturns the endianness.\nGet the endianness of the file.\nTry to parse this command as an <code>macho::EntryPointCommand</code>.\nReturn the offset and size of the segment in the file.\nReturn the offset and size of the segment in the file.\nReturn the offset and size of the section in the file.\nReturn the offset and size of the section in the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the fat header\nThe subcache data which contains the Mach-O header for …\nIterate over the images in this cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the <code>magic</code> field signifies big-endian.\nReturn true if the symbol is a definition of a function or …\nReturn true if the symbol is a definition of a function or …\nReturn true if the symbol table is empty.\nReturn true if the <code>magic</code> field signifies little-endian.\nReturn true if the file is little endian, false if it is …\nReturn true if this is a STAB symbol.\nReturn true if this is a STAB symbol.\nReturn true if this type is a 64-bit header.\nReturn true if this is an undefined symbol.\nReturn true if this is an undefined symbol.\nIterate over the symbols.\nThe number of symbols.\nReturn the library ordinal.\nReturn the library ordinal.\nGet the Mach-O file containing this segment.\nGet the Mach-O file containing this section.\nGet the Mach-O file containing this symbol.\nGet the raw Mach-O file header.\nGet the Mach-O load commands.\nGet the raw Mach-O relocation entries.\nGet the raw Mach-O section structure.\nGet the raw Mach-O segment structure.\nGet the raw Mach-O symbol structure.\nGet the Mach-O symbol table.\nConstruct a map from addresses to a user-defined map entry.\nReturn the <code>segname</code> bytes up until the null terminator.\nReturn the <code>segname</code> bytes up until the null terminator.\nReturn the <code>sectname</code> bytes up until the null terminator.\nReturn the <code>sectname</code> bytes up until the null terminator.\nReturn the next load command.\nConstruct a map from addresses to symbol names and object …\nRead the file header.\nRead the file header.\nParse the raw dyld shared cache data.\nAttempt to parse the fat header and fat arches.\nParse the raw Mach-O file data.\nParse the Mach-O file for the given image from the dyld …\nParse this image into an Object.\nThe file system path of this image.\nRaw bytes of this <code>macho::LoadCommand</code> structure.\nReturns the raw Mach-O file header.\nReturn the relocation array.\nReturn the relocation array.\nGet the array of sections from the data following the …\nGet the array of sections from the data following the …\nTry to parse this command as a <code>macho::SegmentCommand32</code>.\nTry to parse this command as a <code>macho::SegmentCommand64</code>.\nReturn the <code>segname</code> bytes up until the null terminator.\nReturn the <code>segname</code> bytes up until the null terminator.\nParse a load command string value.\nReturn the string table used for the symbol names.\nReturn the symbol at the given index.\nTry to parse this command as a <code>macho::SymtabCommand</code>.\nReturn the UUID from the <code>LC_UUID</code> load command, if one is …\nReturn the UUID from the <code>LC_UUID</code> load command, if one is …\nTry to parse this command as a <code>macho::UuidCommand</code>.\nParse the command data according to the <code>cmd</code> field.\nThe address of the export, relative to the image base.\nA resource data entry.\nThe table of data directories in a PE file.\nA fallible iterator for the descriptors in the delay-load …\nInformation for parsing a PE delay-load import table.\nAn export from a PE file.\nA partially parsed PE export table.\nWhere an export is pointing to.\nForwarded to an export name in another DLL.\nForwarded to an export ordinal in another DLL.\nA resource ID.\nA trait for generic access to <code>pe::ImageNtHeaders32</code> and …\nA trait for generic access to <code>pe::ImageOptionalHeader32</code> …\nA trait for generic access to <code>pe::ImageThunkData32</code> and …\nA parsed import thunk.\nA fallible iterator for the descriptors in the import data …\nInformation for parsing a PE import table.\nA list of import thunks.\nImport by name.\nA resource name.\nImport by ordinal.\nA COMDAT section group in a <code>PeFile</code>.\nA COMDAT section group in a <code>PeFile32</code>.\nA COMDAT section group in a <code>PeFile64</code>.\nAn iterator for the COMDAT section groups in a <code>PeFile</code>.\nAn iterator for the COMDAT section groups in a <code>PeFile32</code>.\nAn iterator for the COMDAT section groups in a <code>PeFile64</code>.\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nA PE image file.\nA PE32 (32-bit) image file.\nA PE32+ (64-bit) image file.\nAn iterator for the relocations in an <code>PeSection</code>.\nA section in a <code>PeFile</code>.\nA section in a <code>PeFile32</code>.\nA section in a <code>PeFile64</code>.\nAn iterator for the sections in a <code>PeFile</code>.\nAn iterator for the sections in a <code>PeFile32</code>.\nAn iterator for the sections in a <code>PeFile64</code>.\nA loadable section in a <code>PeFile</code>.\nA loadable section in a <code>PeFile32</code>.\nA loadable section in a <code>PeFile64</code>.\nAn iterator for the loadable sections in a <code>PeFile</code>.\nAn iterator for the loadable sections in a <code>PeFile32</code>.\nAn iterator for the loadable sections in a <code>PeFile64</code>.\nA relocation in the <code>.reloc</code> section of a PE file.\nAn iterator over the relocation blocks in the <code>.reloc</code> …\nAn iterator of the relocations in a block in the <code>.reloc</code> …\nThe <code>.rsrc</code> section of a PE file.\nData associated with a resource directory entry.\nA table of resource entries.\nA resource name.\nA resource name or ID.\nA PE rich header entry after it has been unmasked.\nParsed information about a Rich Header.\nA subtable entry.\nReturn the RVA portion of the thunk.\nReturns the export address table entry at the given …\nReturns the export address table entry at the given …\nReturns the unparsed address table.\nID of the component.\nNumber of times this component has been used when building …\nReturns this binary data.\nConverts to an option of data entry.\nReturns the string unicode buffer.\nReturns the data directories of this file.\nReturns the data directory at the given index.\nReturns the partially parsed delay-load import directory.\nReturn an iterator for the import descriptors.\nReturn an iterator for the import descriptors.\nReturns the header of the export table.\nReturn the DOS header of this file.\nThe table entries.\nIterator which gives the directories as well as their …\nReturns the unparsed export directory.\nReturns the export table of this file.\nReturns the partially parsed export directory.\nReturns the parsed exports in this table.\nReturn the file header.\nReturn the forward string if the export address table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the data directory at the given index.\nGet the thunk at the given index.\nThe table header.\nReturn the hint and name at the given address.\nReturn the hint and name at the given address.\nConverts to an option of ID.\nParse a thunk.\nParse a thunk.\nReturns the import table of this file.\nReturns the partially parsed import directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the target is an address.\nReturns true if the export is forwarded to another DLL.\nReturn true if the export address table entry is a forward.\nReturns true if the ordinal flag is set.\nReturn true if this type is a 64-bit header.\nReturn true if the magic field in the optional header is …\nIterator over the data directories.\nThe number of data directories.\nThe length (in bytes) of the rich header.\nReturn a library name given its address.\nReturn a library name given its address.\nConverts to an option of name.\nThe name of the export, if known.\nConvert an export name pointer table entry into a name.\nReturns an iterator for the entries in the name pointer …\nReturns the unparsed ordinal table.\nReturns the unparsed name pointer table.\nCreate a new import table parser.\nCreate a new delay load import table parser.\nConstruct a new iterator from the data of the <code>.reloc</code> …\nConstruct from the data of the <code>.rsrc</code> section.\nReturn the next descriptor.\nReturn the first thunk in the list, and update <code>self</code> to …\nReturn the next descriptor.\nRead the next relocation page.\nReturn the NT Headers of this file.\nThe offset at which the rich header starts.\nReturn the optional header.\nFind the optional header and read its <code>magic</code> field.\nReturn the ordinal portion of the thunk.\nThe ordinal of the export.\nReturns the base value of ordinals.\nRead the NT headers, including the data directories.\nRead the NT headers, including the data directories.\nParse the raw PE file data.\nParse the data directory table.\nParse the export table given its section data and address.\nTry to locate a rich header and its entries in the current …\nParse the export directory given its section data.\nGet the PE file containing this segment.\nGet the PE file containing this segment.\nGet the raw PE section header.\nGet the raw PE section header.\nReturn the raw thunk value.\nReturns the string buffer as raw bytes.\nReturns the blocks in the base relocation directory.\nReturns the resource directory.\nReturns information about the rich header of this file (if …\nParses the root resource directory.\nReturns the section table of this binary.\nRead the section table.\nRead the section table.\nReturn the signature\nReturn the size in bytes of this block of relocations.\nRead the COFF symbol table and string table.\nRead the COFF symbol table and string table.\nConverts to an option of table.\nThe target of this export.\nReturns the target of the export at the given address …\nReturns the target of the export at the given ordinal.\nConvert an export address table entry into a target.\nReturn a list of thunks given its address.\nReturn a list of thunks given its address.\nConverts to a <code>String</code>.\nOne of the <code>pe::IMAGE_REL_BASED_*</code> constants.\nReturns an iterator over the unmasked entries.\nReturn the virtual address of the page that this block of …\nThe virtual address of the relocation.\nThe XOR key used to mask the rich header.\nA trait for generic access to <code>xcoff::AuxHeader32</code> and …\nA trait for generic access to <code>xcoff::CsectAux32</code> and …\nA trait for generic access to <code>xcoff::FileAux32</code> and …\nA trait for generic access to <code>xcoff::FileHeader32</code> and …\nA trait for generic access to <code>xcoff::Rel32</code> and <code>xcoff::Rel64</code>…\nA trait for generic access to <code>xcoff::SectionHeader32</code> and …\nThe table of section headers in an XCOFF file.\nA trait for generic access to <code>xcoff::Symbol32</code> and …\nAn iterator for symbol entries in an XCOFF file.\nA table of symbol entries in an XCOFF file.\nA COMDAT section group in a <code>XcoffFile</code>.\nA COMDAT section group in a <code>XcoffFile32</code>.\nA COMDAT section group in a <code>XcoffFile64</code>.\nAn iterator for the COMDAT section groups in a <code>XcoffFile</code>.\nAn iterator for the COMDAT section groups in a <code>XcoffFile32</code>.\nAn iterator for the COMDAT section groups in a <code>XcoffFile64</code>.\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nAn iterator for the sections in a COMDAT section group in …\nA partially parsed XCOFF file.\nA 32-bit XCOFF object file.\nA 64-bit XCOFF object file.\nAn iterator for the relocations in an <code>XcoffSection</code>.\nAn iterator for the relocations in an <code>XcoffSection32</code>.\nAn iterator for the relocations in an <code>XcoffSection64</code>.\nA section in an <code>XcoffFile</code>.\nA section in an <code>XcoffFile32</code>.\nA section in an <code>XcoffFile64</code>.\nAn iterator for the sections in an <code>XcoffFile</code>.\nAn iterator for the sections in an <code>XcoffFile32</code>.\nAn iterator for the sections in an <code>XcoffFile64</code>.\nA loadable section in an <code>XcoffFile</code>.\nA segment in an <code>XcoffFile32</code>.\nA segment in an <code>XcoffFile64</code>.\nAn iterator for the segments in an <code>XcoffFile</code>.\nAn iterator for the segments in an <code>XcoffFile32</code>.\nAn iterator for the segments in an <code>XcoffFile64</code>.\nA symbol in an <code>XcoffFile</code>.\nA symbol in an <code>XcoffFile32</code>.\nA symbol in an <code>XcoffFile64</code>.\nAn iterator for the symbols in an <code>XcoffFile</code>.\nAn iterator for the symbols in an <code>XcoffFile32</code>.\nAn iterator for the symbols in an <code>XcoffFile64</code>.\nA symbol table in an <code>XcoffFile</code>.\nA symbol table in an <code>XcoffFile32</code>.\nA symbol table in an <code>XcoffFile64</code>.\nReturn the csect auxiliary symbol.\nReturn a file auxiliary symbol.\nRead the auxiliary file header.\nRead the auxiliary file header.\nReturn the section data.\nReturn the section data.\nReturns the raw data.\nReturn the offset and size of the section in the file.\nReturn the offset and size of the section in the file.\nParse the x_fname field, which may be an inline string or …\nParse the x_fname field, which may be an inline string or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the symbol entry at the given index and offset.\nReturn true if the symbol has csect auxiliary entry.\nReturn true if the symbol has csect auxiliary entry.\nReturn true if the symbol has file auxiliary entry.\nReturn true if the symbol has file auxiliary entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the symbol is a definition of a function or …\nReturn true if the section table is empty.\nReturn true if the symbol table is empty.\nReturn true if the symbol is a null placeholder.\nReturn true if the symbol is a null placeholder.\nReturn true if this type is a 64-bit header.\nReturn true if the symbol is undefined.\nReturn true if the symbol is undefined.\nIterate over the section headers.\nIterate over the symbols.\nThe number of section headers.\nThe number of symbol table entries.\nReturn the section name.\nReturn the section name.\nRead the file header.\nRead the file header.\nParse the raw XCOFF file data.\nParse the section table.\nParse the symbol table.\nReturns the raw XCOFF file header.\nRead the relocations.\nReturn the section index for the symbol.\nReturn the section index for the symbol.\nReturn the section header at the given index.\nRead the section table.\nRead the section table.\nReturn the string table used for the symbol names.\nGet the symbol at the given index.\nReturn the symbol table.\nReturn the symbol table.\nGet the raw XCOFF auxiliary header.\nGet the XCOFF file containing this section.\nGet the XCOFF file containing this symbol.\nGet the raw XCOFF file header.\nGet the raw XCOFF relocation entries for this section.\nGet the raw XCOFF section header.\nGet the XCOFF section table.\nGet the raw XCOFF symbol structure.\nGet the XCOFF symbol table.\nSome AIX programs generate auxiliary headers for 32-bit …\nIdentifies a csect auxiliary entry.\nIdentifies an exception auxiliary entry.\nIdentifies a function auxiliary entry.\nIdentifies a file auxiliary entry.\nIdentifies a SECT auxiliary entry.\nIdentifies a symbol auxiliary entry.\nThe auxiliary header immediately following file header. If …\nThe auxiliary header immediately following file header. If …\nBlock auxiliary entry for the C_BLOCK and C_FCN Symbols.\nBlock auxiliary entry for the C_BLOCK and C_FCN Symbols.\nDuplicate tag.\nFunction argument.\nAutomatic variable.\nBeginning of common block.\nBeginning of include file.\nBeginning or end of inner block.\nBeginning of static block.\nDeclaration of object (type).\nDWARF section symbol.\nLocal member of common block.\nEnd of common block.\nPhysical end of function.\nEnding of include file.\nEnumeration tag.\nAlternate entry.\nEnd of structure.\nEnd of static block.\nExternal symbol.\nExternal definition.\nBeginning or end of function.\nBit field.\nSource file name and compiler information.\nFunction or procedure.\nGlobal variable.\nGlobal thread-local variable.\nSpecial storage class for external.\nUn-named external symbol.\nComment string in .info section.\nLabel.\nAutomatic variable allocated on stack.\nMember of enumeration.\nMember of structure.\nMember of union.\nSymbol table entry marked for deletion.\nArgument to subroutine allocated on stack.\nRegister variable.\nRegister parameter.\nArgument to function or procedure stored in register.\nRegister variable.\nStatic.\nStructure tag.\nStatically allocated symbol.\nStatic thread-local variable.\nReserved.\nType definition.\nUndefined label.\nUnion tag.\nUndefined static.\nWeak external symbol.\nCsect auxiliary entry for C_EXT, C_WEAKEXT, and C_HIDEXT …\nCsect auxiliary entry for C_EXT, C_WEAKEXT, and C_HIDEXT …\nSection auxiliary entry Format for C_DWARF symbols.\nSection auxiliary entry Format for C_DWARF symbols.\nException auxiliary entry. (XCOFF64 only)\nIndicates that the file uses Very Large Program Support.\nIndicates the file is dynamically loadable and executable. …\nIndicates that the file is executable. No unresolved …\nIndicates that the file was reordered with the fdpr …\nIndicates that the file was profiled with the fdpr command.\nIndicates that line numbers have been stripped from the …\nIf the object file is a member of an archive, it can be …\nIndicates that the relocation information for binding has …\nIndicates the file is a shared object (shared library). …\nIndicates that one of the members of the auxiliary header …\nFile Auxiliary Entry for C_FILE Symbols.\nFile Auxiliary Entry for C_FILE Symbols.\nThe header at the start of every 32-bit XCOFF file.\nThe header at the start of every 64-bit XCOFF file.\nFunction auxiliary entry.\nFunction auxiliary entry.\nthe 32-bit mach magic number\nthe 64-bit mach magic number\nAn absolute symbol. The symbol has a value but is not …\nA special symbolic debugging symbol.\nAn undefined external symbol.\nBranch absolute relocation. References a non-modifiable …\nBranch relative to self relocation. References a …\nGlobal linkage-external TOC address relocation.\nNegative relocation.\nPositive relocation.\nBranch absolute relocation. References a modifiable …\nBranch relative to self relocation. References a …\nA non-relocating relocation.\nRelative to self relocation.\nPositive indirect load relocation.\nPositive load address relocation. Modifiable instruction.\nLocal object TOC address relocation.\nGeneral-dynamic reference to TLS symbol.\nModule reference to TLS.\nModule reference to the local TLS storage.\nInitial-exec reference to TLS symbol.\nLocal-dynamic reference to TLS symbol.\nLocal-exec reference to TLS symbol.\nRelative to the TOC relocation.\nRelative to TOC lower.\nRelative to TOC upper.\nTOC relative indirect load relocation.\nRelative to the TOC or to the thread-local storage base …\nRelocation table entry\nRelocation table entry\nSpecifies an uninitialized data section. A section header …\nSpecifies an initialized data section. A section of this …\nSpecifies a debug section. A section of this type contains …\nSpecifies a DWARF debugging section, which provide source …\nSpecifies an exception section. A section of this type …\nSpecifies a comment section. A section of this type …\nSpecifies a loader section. A section of this type …\nSpecifies a relocation or line-number field overflow …\nSpecifies a pad section. A section of this type is used to …\n“regular” section\nSpecifies an uninitialized thread-local data section.\nSpecifies an initialized thread-local data section.\nSpecifies an executable text (code) section. A section of …\nSpecifies a type-check section. A section of this type …\nValues for visibility as they would appear when encoded in …\nSection header.\nSection header.\nSection auxiliary entry for the C_STAT Symbol. (XCOFF32 …\nSymbol table entry.\nSymbol table entry.\nSpecifies compiler-defined information.\nSpecifies the compiler time stamp.\nSpecifies the compiler version number.\nSpecifies the source-file name.\nBSS class (uninitialized static internal)\nDebug Dictionary Table\nDescriptor csect\nGlobal Linkage (Interfile Interface Code)\nProgram Code\nRead Only Constant\nRead Write Data\nSupervisor Call (32-bit process only)\nSupervisor Call for both 32- and 64-bit processes\nSupervisor Call for 64-bit process\nTraceback Table csect\nGeneral TOC item\nTOC Anchor for TOC Addressability\nScalar data item in the TOC\nSymbol mapped at the end of TOC\nTraceback Index csect\nInitialized thread-local variable\nUnclassified - Treated as Read Write\nUn-named Fortran Common\nUninitialized thread-local variable\nExtended Operation (Pseudo Machine Instruction)\nCommon csect definition. For uninitialized storage.\nExternal reference.\nDefines an entry point to an initialized csect.\nCsect definition for initialized storage.\nExtra flags.\nExtra flags.\nMagic number. Must be 0x01DF.\nMagic number. Must be 0x01F7.\nNumber of sections.\nNumber of sections.\nNumber of entries in symbol table.\nNumber of entries in symbol table.\nNumber of bytes in optional header\nNumber of bytes in optional header\nByte offset to symbol table start.\nByte offset to symbol table start.\nTime and date of file creation.\nTime and date of file creation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSymbol name.\nNumber of auxiliary entries.\nNumber of auxiliary entries.\nOffset of the name in string table or .debug section.\nStorage class of symbol.\nStorage class of symbol.\nSection number of symbol.\nSection number of symbol.\nBasic and derived type specification.\nBasic and derived type specification.\nSymbol value; storage class-dependent.\nSymbol value; storage class-dependent.\nParse the symbol name for XCOFF32.\nParse the symbol name for XCOFF64.\nMaximum alignment for .data.\nMaximum alignment for .data.\nMaximum alignment for .text.\nMaximum alignment for .text.\nUninitialized data size in bytes.\nUninitialized data size in bytes.\nBit flags - cpu types of objects.\nBit flags - cpu types of objects.\nReserved for CPU type.\nReserved for CPU type.\nBase address of data (virtual address).\nBase address of data (virtual address).\nRequested data page size.\nRequested data page size.\nReserved for debuggers.\nReserved for debuggers.\nInitialized data size in bytes.\nInitialized data size in bytes.\nEntry point descriptor (virtual address).\nEntry point descriptor (virtual address).\nFlags and thread-local storage alignment.\nFlags and thread-local storage alignment.\nMaximum data size allowed (bytes).\nMaximum data size allowed (bytes).\nMaximum stack size allowed (bytes).\nMaximum stack size allowed (bytes).\nFlags.\nFlags.\nModule type field.\nModule type field.\nReserved.\nReserved.\nSection number for .bss.\nSection number for .bss.\nSection number for .data.\nSection number for .data.\nSection number for entry point.\nSection number for entry point.\nSection number for loader data.\nSection number for loader data.\nSection number for .tbss.\nSection number for .tbss.\nSection number for .tdata.\nSection number for .tdata.\nSection number for .text.\nSection number for .text.\nSection number for TOC.\nSection number for TOC.\nRequested stack page size.\nRequested stack page size.\nBase address of text (virtual address).\nBase address of text (virtual address).\nRequested text page size.\nRequested text page size.\nAddress of TOC anchor.\nAddress of TOC anchor.\nText size in bytes.\nText size in bytes.\nVersion.\nVersion.\nXCOFF64 flags.\nReserved.\nPad\nPad\nPad\nReserved.\nReserved.\nReserved.\nReserved.\nReserved.\nReserved.\nReserved.\nRelocation size and information.\nRelocation size and information.\nRelocation type.\nRelocation type.\nSymbol table index of item that is referenced.\nSymbol table index of item that is referenced.\nVirtual address (position) in section to be relocated.\nVirtual address (position) in section to be relocated.\nRead the relocations in a XCOFF32 file.\nRead the relocations in a XCOFF64 file.\nFlags to define the section type.\nFlags to define the section type.\nOffset in file to line number entries for section.\nOffset in file to line number entries for section.\nSection name.\nSection name.\nNumber of line number entries.\nNumber of line number entries.\nNumber of relocation entries.\nNumber of relocation entries.\nPhysical address.\nPhysical address.\nOffset in file to relocation entries for section.\nOffset in file to relocation entries for section.\nReserved.\nOffset in file to raw data for section.\nOffset in file to raw data for section.\nSection size.\nSection size.\nVirtual address (same as physical address).\nVirtual address (same as physical address).\nSpecifies the type of auxiliary entry. Contains _AUX_FILE …\nContains _AUX_CSECT; indicates type of auxiliary entry.\nContains _AUX_FCN; Type of auxiliary entry.\nContains _AUX_EXCEPT; Type of auxiliary entry\nContains _AUX_SYM; Type of auxiliary entry.\nContains _AUX_SECT; Type of Auxiliary entry.\nSymbol table index of next entry beyond this function.\nSymbol table index of next entry beyond this function.\nSymbol table index of next entry beyond this function.\nFile offset to exception table entry.\nFile offset to exception table entry.\nThe source file name or compiler-related string.\nThe source file name or compiler-related string.\nPad size for file name.\nPad size for file name.\nReserved.\nReserved.\nSize of function in bytes.\nSize of function in bytes.\nSize of function in bytes.\nThe source-file string type.\nThe source-file string type.\nSource line number.\nHigh-order 2 bytes of the source line number.\nLow-order 2 bytes of the source line number.\nFile pointer to line number\nFile pointer to line number\nNumber of line numbers.\nNumber of relocation entries.\nNumber of relocation entries in section.\nNumber of relocation entries in section.\nOffset of parameter type-check hash in .typchk section.\nOffset of parameter type-check hash in .typchk section.\nSection length.\nSection length.\nLength of portion of section represented by symbol.\nLength of portion of section represented by symbol.\nHigh 4 bytes of section length.\nLow 4 bytes of section length.\nStorage mapping class.\nStorage mapping class.\nSymbol alignment and type.\nSymbol alignment and type.\n.typchk section number.\n.typchk section number.\nx_snstab.\nReserved.")