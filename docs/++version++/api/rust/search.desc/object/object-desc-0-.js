searchState.loadedDescShard("object", 0, "<code>object</code>\nAArch64 call target.\nS + A\nThe size of an address value for an architecture.\nMultiple definitions are allowed.\nA CPU architecture.\nA binary file format.\nCOFF file flags.\nCOFF segment flags.\nCOFF section flags.\nCOFF relocation fields.\nCOFF flags for a section symbol.\nThe selection kind for a COMDAT section group.\nAn uninitialized common data section.\nSymbol is visible to the compilation unit.\nA data section.\nThe symbol is for a data object.\nDebug information.\nDebug strings.\nSymbol is visible to dynamically linked objects.\nE2K 28-bit value stored in CS0\nE2K 64-bit value stored in two LTS\nSome other ELF section type.\nELF file flags.\nELF segment flags.\nELF section flags.\nELF symbol flags.\nELF relocation fields.\nMultiple definitions must match exactly.\nThe symbol is the name of a file. It precedes symbols …\nFile flags that are specific to each file format.\nGeneric encoding.\nFormat independent representation.\nG + A - GotBase\nS + A - GotBase\nGotBase + A - P\nG + A - P\nS + A - Image\nThe symbol is for a code label.\nMultiple definitions are allowed, and the largest is …\nSymbol is visible to the static linkage unit.\nInformation for the linker.\nLoongArch branch offset with two trailing zeros.\nMach-O file flags.\nMach-O segment flags.\nMach-O section flags.\nMach-O symbol flags.\nMach-O relocation fields.\nMetadata such as symbols or relocations.\nMultiple definitions are allowed, and the newest is …\nMultiple definitions are not allowed.\nNo file flags.\nNo segment flags.\nNo section flags.\nNo symbol flags.\nELF note section.\nSome other non-loadable section.\nA non-loadable string section.\nL + A - P\nA read only data section.\nA read only data section with relocations.\nA loadable string section.\nS + A - P\nInformation about how the result of the relocation …\nRelocation fields that are specific to each file format …\nThe operation used to calculate the result of the …\ns390x PC-relative offset shifted right by one bit.\nMultiple definitions must have the same size.\nThe symbol is for a section.\nSection flags that are specific to each file format.\nThe index of the section containing the symbol.\nThe kind of a section.\nS + A - Section\nSegment flags that are specific to each file format.\nSHARC+ 48-bit Type A instruction\nSHARC+ 32-bit Type B instruction\nA CPU sub-architecture.\nSymbol flags that are specific to each file format.\nThe kind of a symbol.\nA symbol scope.\nAn executable code section.\nThe symbol is for executable code.\nA TLS data section.\nThe symbol is for a thread local storage entity.\nA TLS variables section.\nAn uninitialized data section.\nAn uninitialized TLS data section.\nThe section kind is unknown.\nThe selection kind is unknown.\nThe symbol kind is unknown.\nUnknown scope.\nThe operation is unknown.\nThe relocation encoding is unknown.\nx86 branch instruction.\nx86 rip-relative addressing.\nx86 rip-relative addressing in movq instruction.\nx86 sign extension at runtime.\nXCOFF file flags.\nXCOFF section flags.\nXCOFF symbol flags.\nXCOFF relocation fields.\nThe size of an address value for this architecture.\nArchive definitions.\nThe size in bytes of an address value.\nELF definitions.\nTypes for compile-time and run-time endianness.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this section contains zerofill data.\nMach-O definitions.\nThe target’s native binary format for relocatable object …\nPE/COFF definitions.\nTools for converting file format structures to and from …\nInterface for reading object files.\nXCOFF definitions\n<code>abi_version</code> field in the ELF file header.\n<code>Characteristics</code> field in the COFF file header.\n<code>e_flags</code> field in the ELF file header.\n<code>f_flags</code> field in the XCOFF file header.\n<code>flags</code> field in the Mach-O file header.\n<code>os_abi</code> field in the ELF file header.\nInformation about how the result of the relocation …\nThe operation used to calculate the result of the …\n<code>r_length</code> field in the Mach-O relocation.\n<code>r_pcrel</code> field in the Mach-O relocation.\n<code>r_rsize</code> field in the XCOFF relocation.\n<code>r_rtype</code> field in the XCOFF relocation.\n<code>r_type</code> field in the ELF relocation.\n<code>r_type</code> field in the Mach-O relocation.\nThe size in bits of the place of relocation.\n<code>typ</code> field in the COFF relocation.\n<code>Characteristics</code> field in the section header.\n<code>flags</code> field in the section header.\n<code>s_flags</code> field in the section header.\n<code>sh_flags</code> field in the section header.\n<code>Characteristics</code> field in the segment header.\n<code>flags</code> field in the segment header.\n<code>initprot</code> field in the segment header.\n<code>maxprot</code> field in the segment header.\n<code>p_flags</code> field in the segment header.\n<code>Number</code> field in the auxiliary symbol for the section.\nThe containing csect for the symbol.\n<code>n_desc</code> field in the Mach-O symbol.\n<code>n_sclass</code> field in the XCOFF symbol.\n<code>Selection</code> field in the auxiliary symbol for the section.\n<code>st_info</code> field in the ELF symbol.\n<code>st_other</code> field in the ELF symbol.\n<code>x_smclas</code> field in the CSECT auxiliary symbol.\n<code>x_smtyp</code> field in the CSECT auxiliary symbol.\nFile identification bytes at the beginning of AIX big …\nThe AIX big archive’s fixed length header at file …\nThe header at the start of an AIX big archive member, …\nOffset of a member in an AIX big archive.\nThe header at the start of an archive member.\nFile identification bytes stored at the beginning of the …\nThe terminator for each archive member header.\nFile identification bytes stored at the beginning of a …\nFile modification timestamp in decimal.\nFile member date in decimal.\nOffset of first member on free list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOffset of first member.\nGroup ID in decimal.\nFile member group id in decimal.\nOffset of global symbol table for 64-bit objects.\nOffset of global symbol table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffset of last member.\nArchive magic string.\nOffset of member table.\nFile mode in octal.\nFile member mode in octal.\nThe file name.\nFile member name length in decimal.\nNext member offset in decimal.\nPrevious member offset in decimal.\nFile size in decimal.\nFile member size in decimal.\nMust be equal to <code>TERMINATOR</code>.\nUser ID in decimal.\nFile member user id in decimal.\nSection compression header.\nSection compression header.\nConfiguration alternative created.\nDirect binding enabled.\nDisp reloc applied at build time.\nDisp reloc applied at run-time.\nObject is modified after built.\nFiltee terminates filters search.\nSet RTLD_GLOBAL for this object.\nGlobal auditing required.\nSet RTLD_GROUP for this object.\nSet RTLD_INITFIRST for this object.\nObject is used to interpose.\nTrigger filtee loading at runtime.\nIgnore default lib search path.\nSet RTLD_NODELETE for this object.\nObject has no-direct binding.\nObject can’t be dldump’ed.\nSet RTLD_NOOPEN for this object.\nSet RTLD_NOW for this object.\n$ORIGIN must be handled.\nSingleton symbols are used.\nObject has individual interposers.\nNo lazy binding for this object\nObject may use DF_ORIGIN\nModule uses the static TLS model\nSymbol resolutions starts here\nObject contains text relocations\nObject auditing.\nShared object to load before self\nProcess relocations of object\nConfiguration information.\nFor debugging; unspecified\nDependency auditing.\nStart of encoded range\nFeature selection (DTF_*).\nShared object to get values from\nAddress of termination function\nArray with addresses of fini fct\nSize in bytes of DT_FINI_ARRAY\nFlags for the object being loaded\nState flags, see DF_1_* below.\nStart of conflict section\nSize of conflict section\nGNU-style hash table.\nLibrary list\nSize of library list\nPrelinking timestamp\nAddress of symbol hash table\nEnd of OS-specific\nEnd of processor-specific\nAddress of init function\nArray with addresses of init fct\nSize in bytes of DT_INIT_ARRAY\nAddress of PLT relocs\nStart of OS-specific\nStart of processor-specific\nAddress of aux .dynamic.\nBase address\n(O32)Size of compact rel section.\nAddress of CONFLICT section\nNumber of CONFLICT entries\nFlags indicating for C++ flavor.\nDelta C++ class definition.\nDelta symbols that hold the class declaration.\nNumber of entries in DT_MIPS_DELTA_CLASSSYM.\nNumber of entries in DT_MIPS_DELTA_CLASS.\nDelta C++ class instances.\nNumber of entries in DT_MIPS_DELTA_INSTANCE.\nDelta relocations.\nNumber of entries in DT_MIPS_DELTA_RELOC.\nDelta symbols that Delta relocations refer to.\nNumber of entries in DT_MIPS_DELTA_SYM.\nFlags\nFirst GOT entry in DYNSYM\nGP value for aux GOTs.\nNumber of GOT page table entries\nChecksum\nAddress of .interface.\nSize of the .interface section.\nVersion string (string tbl index)\nAddress of LIBLIST section\nNumber of LIBLIST entries\nNumber of local GOT entries\nAddress of .options.\nDefault suffix of dso to be added by rld on dlopen() calls.\nThe address of .got.plt in an executable using the new …\nAddress of run time loader map.\nAn alternative description of the classic MIPS RLD_MAP …\nAddress of rld_text_rsolve function stored in GOT.\nRuntime linker interface version\nThe base of the PLT in an executable using the new non-PIC …\nNumber of DYNSYM entries\nTimestamp\nFirst external DYNSYM\nMove table.\nName of needed library\nAddress of _gp.\nMarks end of dynamic section\nProcessor defined value\nPLT padding.\nType of reloc in PLT\nSize in bytes of PLT relocs\nFlags for DT_* entries, affecting the following DT_* entry.\nArray with addresses of preinit fct\nsize in bytes of DT_PREINIT_ARRAY\nAddress of Rel relocs\nAddress of Rela relocs\nSize of one Rela reloc\nTotal size of Rela relocs\nSize of one Rel reloc\nTotal size of Rel relocs\nLibrary search path (deprecated)\nLibrary search path\nName of shared object\nSize of string table\nAddress of string table\nStart symbol search here\nSize of one symbol table entry\nEntry size of syminfo\nSyminfo table.\nSize of syminfo table (in bytes)\nAddress of symbol table\nAddress of SYMTAB_SHNDX section\nReloc might modify .text\nAddress of version definition table\nNumber of version definitions\nAddress of table with needed versions\nNumber of needed versions\nDynamic section entry.\nDynamic section entry.\nPA-RISC 1.0 big-endian.\nPA-RISC 1.1 big-endian.\nPA-RISC 2.0 big-endian.\nAll addresses must be &lt; 2GB.\nRelocations for relaxing exist.\nNB conflicts with EF_ARM_VFP_FLOAT\nNB conflicts with EF_ARM_SOFT_FLOAT\n8-bit structure alignment is in use\nBitmask for <code>EF_AVR_ARCH_*</code>.\nIf set, it is assumed that the elf file uses local symbols …\n64-bit ABI\narch. version mask\nos-specific flags\nUses GPRs, 64-bit FPRs and the stack for parameter passing\nAdditional properties of the base ABI type, including the …\nUses GPRs, 32-bit FPRs and the stack for parameter passing\nUses GPRs and the stack for parameter passing\nUses relocation types directly writing to immediate slots\nMask for selecting EF_MIPS_ABI_ variant\nEABI in 32-bit mode\nEABI in 64-bit mode\nThe first MIPS 32 bit ABI\nO32 ABI extended for 64-bit architectures\nMIPS architecture level.\n-mips1 code.\n-mips2 code.\n-mips3 code.\nMIPS32 code.\nMIPS32r2 code.\nMIPS32r6 code\n-mips4 code.\n-mips5 code.\nMIPS64 code.\nMIPS64r2 code.\nMIPS64r6 code\nUses PIC calling sequence.\nUses FP64 (12 callee-saved).\nUses IEEE 754-2008 NaN encoding.\nA .noreorder directive was used.\nContains PIC code.\nArchitecture version.\nProgram uses arch. extensions.\nAllow lazy swapping.\nProgram expects little endian.\nNo kernel assisted branch prediction.\nTrap nil pointer dereference.\nProgram expects wide mode.\nPowerPC64 bits specifying ABI.\nPowerPC embedded flag\nPowerPC -mrelocatable flag\nPowerPC -mrelocatable-lib flag\nHigh GPRs kernel facility needed.\ngeneric V8+ features\nHAL R1 extensions\nlittle endian data\nSun UltraSPARC1 extensions\nSun UltraSPARCIII extensions\n32-bit object.\n64-bit object.\nInvalid class.\nEnd of OS-specific compression types.\nEnd of processor-specific compression types.\nStart of OS-specific compression types.\nStart of processor-specific compression types.\nZLIB/DEFLATE algorithm.\nZstandard algorithm.\n2’s complement, little endian.\n2’s complement, big endian.\nInvalid data encoding.\nFile identification bytes stored in <code>Ident::magic</code>.\nIBM AIX.\nARM.\nARM EABI.\nAROS\nNuxi CloudABI\nFenixOS\nFreeBSD.\nObject uses GNU ELF extensions.\nHP-UX.\nGNU/Hurd.\nSGI Irix.\nObject uses GNU ELF extensions.\nNovell Modesto.\nNetBSD.\nUNIX System V ABI.\nHewlett-Packard Non-Stop Kernel.\nOpenBSD.\nOpenVMS.\nSun Solaris.\nStandalone (embedded) application.\nUNIX System V ABI.\nCompaq TRU64 UNIX.\nNote name for core files.\nGNU entries in the note section have this name.\nGo entries in the note section have this name.\nNote name for linux core files.\nOS descriptor for <code>NT_GNU_ABI_TAG</code>.\nOS descriptor for <code>NT_GNU_ABI_TAG</code>.\nOS descriptor for <code>NT_GNU_ABI_TAG</code>.\nOS descriptor for <code>NT_GNU_ABI_TAG</code>.\nSolaris entries in the note section have this name.\nIntel 80386\nFreescale 56800EX DSC\nMotorola MC68HC05 microcontroller\nMotorola MC68HC08 microcontroller\nMotorola MC68HC11 microcontroller\nMotorola M68HC12\nMotorola MC68HC16 microcontroller\nMotorola m68k family\nRenesas 78KOR\nIntel 8051 and variants\nIntel 80860\nMotorola m88k family\nIntel 80960\nARM AARCH64\nDigital Alpha\nAltera Nios II\nAMD GPU\nArgonaut RISC Core\nArca RISC\nARC International ARCompact\nSynopsys ARCompact V2\nARM\nAtmel AVR 8-bit microcontroller\nAmtel 32-bit microprocessor\nBeyond BA1\nBeyond BA2\nAnalog Devices Blackfin DSP\nLinux BPF – in-kernel virtual machine\nInfineon C16x/XC16x\nPaneve CDP\nFreescale Communication Engine RISC\nCloudShield\nCognitive Smart Memory Processor\nMotorola Coldfire\nBluechip CoolEngine\nKIPO-KAIST Core-A 1st gen.\nKIPO-KAIST Core-A 2nd gen.\nNational Semi. CompactRISC\nNational Semi. CompactRISC CR16\nCray NV2 vector architecture\nAxis Communications 32-bit emb.proc\nNational Semi. CompactRISC CRX\nC-SKY\nCSR Kalimba\nNVIDIA CUDA\nCypress M8C\nMitsubishi D10V\nMitsubishi D30V\nNew Japan Radio (NJR) 24-bit DSP\nMicrochip Technology dsPIC30F\nIcera Semi. Deep Execution Processor\nCyan Technology eCOG16\nCyan Technology eCOG1X\nCyan Technology eCOG2\nKM211 KMX16\nKM211 KMX8\nFreescale Extended Time Processing Unit\neXcess configurable cpu\nFujitsu F2MC16\nDigital Alpha\nElement 14 64-bit DSP Processor\nFujitsu FR20\nFujitsu FR30\nFTDI Chip FT32\nSiemens FX66 microcontroller\nHitachi H8S\nHitachi H8/300\nHitachi H8/300H\nHitachi H8/500\nQUALCOMM Hexagon\nHarvard University machine-independent object files\nIntel MCU\nIntel Merced\nUbicom IP2xxx\nInfineon Technologies 32-bit emb.proc\nIntel K10M\nKM211 KM32\nKM211 KMX32\nKM211 KVARC\nIntel L10M\nRISC for Lattice FPGA\nLoongson LoongArch\nRenesas M16C\nAT&amp;T WE 32100\nRenesas M32C\nMitsubishi M32R\nM2000 Reconfigurable RISC\nMAX processor\nDallas Semi. MAXQ30 mc\nMicrochip 8-bit PIC(r)\nMCST Elbrus\nToyota ME16 processor\nImagination Tech. META\nXilinx MicroBlaze\nMIPS R3000 big-endian\nMIPS R3000 little-endian\nStanford MIPS-X\nFujitsu MMA Multimedia Accelerator\nSTMicroelectronics 64bit VLIW DSP\nDonald Knuth’s educational 64-bit proc\nMatsushita MN10200\nMatsushita MN10300\nMoxie processor\nTexas Instruments msp430\nSony nCPU embeeded RISC\nDenso NDR1 microprocessor\nAndes Tech. compact code emb. RISC\nNo machine\nNanoradio Optimized RISC\nNational Semi. 32000\nOpen8 RISC\nOpenRISC 32-bit embedded processor\nHPPA\nSiemens PCP\nDigital PDP-10\nDigital PDP-11\nSony DSP Processor\npicoJava\nPowerPC\nPowerPC 64-bit\nSiTera Prism\nRenesas R32C\nMotorola RCE\nTRW RH-32\nRISC-V\nRenesas RL78\nFreescale RS08\nRenesas RX\nIBM System/370\nIBM S390\nSolana Binary Format\nSunplus S+core7 RISC\nSharp embedded microprocessor\nSeiko Epson C17\nSeiko Epson S1C33 family\nHitachi SH\nAnalog Devices SHARC family\nInfineon Tech. SLE9X\nTrebia SNP 1000\nSUN SPARC\nSun’s “v8plus”\nSPARC v9 64-bit\nIBM SPU/SPC\nSTMicroelectronic ST100 processor\nSTMicroelectronics ST19 8 bit mc\nSTMicroelectronics ST200\nSTmicroelectronics ST7 8 bit mc\nSTMicroelectronics ST9+ 8/16 mc\nMotorola Start*Core processor\nSTMicroelectronics STM8\nSTMicroelectronics STxP7x\nSilicon Graphics SVx\nTileta TILE64\nTilera TILE-Gx\nTilera TILEPro\nAdvanced Logic Corp. Tinyj emb.fam\nTexas Instruments App. Specific RISC\nTexas Instruments TMS320C2000 DSP\nTexas Instruments TMS320C55x DSP\nTexas Instruments TMS320C6000 DSP\nTexas Instruments Prog. Realtime Unit\nThompson Multimedia General Purpose Proc\nTenor Network TPC\nSiemens Tricore\nNXP Semi. TriMedia\nAltium TSK3000\nPKU-Unity &amp; MPRC Peking Uni. mc series\nNEC V800 series\nNEC v850\nDigital VAX\nAlphamosaic VideoCore\nBroadcom VideoCore III\nBroadcom VideoCore V\nControls and Data Services VISIUMcore\nFujitsu VPP500\nAMD x86-64 architecture\nXMOS xCORE\nMotorola XGATE\nNew Japan Radio (NJR) 16-bit DSP\nTensilica Xtensa Architecture\nZilog Z80\nLSI Logic 16-bit DSP Processor\nCore file.\nShared object file.\nExecutable file.\nOS-specific range end.\nProcessor-specific range end.\nOS-specific range start.\nProcessor-specific range start.\nNo file type.\nRelocatable file.\nCurrent ELF version.\nInvalid ELF version.\n-mtune=elbrus-12c code.\n-mtune=elbrus-16c code.\n-mtune=elbrus-1c+ code.\n-mtune=elbrus-2c3 code.\n-mtune=elbrus-48c code.\n-mtune=elbrus-8c code.\n-mtune=elbrus-8v7 code.\n-march=generic code.\n-march=elbrus-v1 code.\n-march=elbrus-v2 code.\n-march=elbrus-v3 code.\n-march=elbrus-v4 code.\n-march=elbrus-v5 code.\n-march=elbrus-v6 code.\n-march=elbrus-v7 code.\nThe header at the start of every 32-bit ELF file.\nThe header at the start of every 64-bit ELF file.\nThe needed properties by the object file.  */\nSet if the object file requires canonical function …\nAArch64 specific GNU properties.\nProcessor-specific semantics, hi\nApplication-specific semantics, hi\nProcessor-specific semantics, lo\nApplication-specific semantics, lo\nNo copy relocation on protected data symbol.\nStack size.\nX86 processor-specific features used in program.\nThis indicates that all executable sections are compatible …\nThis indicates that all executable sections are compatible …\nGNU_PROPERTY_X86_ISA_1_BASELINE: CMOV, CX8 (cmpxchg8b), …\nThe x86 instruction sets indicated by the corresponding …\nThe x86 instruction sets indicated by the corresponding …\nGNU_PROPERTY_X86_ISA_1_V2: GNU_PROPERTY_X86_ISA_1_BASELINE,\nGNU_PROPERTY_X86_ISA_1_V3: GNU_PROPERTY_X86_ISA_1_V2, AVX, …\nGNU_PROPERTY_X86_ISA_1_V4: GNU_PROPERTY_X86_ISA_1_V3, …\nMark group as COMDAT.\nHeader of <code>SHT_GNU_HASH</code> section.\nHeader of <code>SHT_HASH</code> section.\nMagic number and other information.\nRequire exact match\nIgnore interface version\nx86 io permission bitmap (1=deny).\ni386 TLS slots (struct user_desc).\nARM hardware breakpoint registers.\nARM hardware watchpoint registers.\nARM Scalable Vector Extension registers.\nARM system call number.\nARM TLS register.\nARM VFP/NEON registers.\nContains copy of asrset struct.\nContains copy of auxv array.\nContains information about mapped files.\nContains copy of fpregset struct.\nABI information.\nBuild ID bits as generated by <code>ld --build-id</code>.\nVersion note generated by GNU gold containing a version …\nSynthetic hwcap information.\nProgram property.\nBuild ID bits as generated by Go’s gc compiler.\nContains copy of gwindows struct.\nContains copy of lwpinfo struct.\nContains copy of lwpstatus struct.\nMIPS DSP ASE registers.\nMIPS floating-point mode.\nString from sysinfo(SI_PLATFORM).\nData Stream Control Register.\nEvent Based Branch Registers.\nMemory Protection Keys registers.\nPerformance Monitor Registers.\nProgram Priority Register.\nPowerPC SPE/EVR registers.\nTarget Address Register.\nTM checkpointed Data Stream Control Register.\nTM checkpointed FPR Registers.\nTM checkpointed GPR Registers.\nTM checkpointed Program Priority Register.\nTM checkpointed Target Address Register.\nTM checkpointed VMX Registers.\nTM checkpointed VSX Registers.\nTM Special Purpose Registers.\nPowerPC Altivec/VMX registers.\nPowerPC VSX registers.\nContains copy of prcred struct.\nContains copy of fpregset struct.\nContains copy of fprxregset struct.\nContains copy of prpsinfo struct.\nContains copy of prstatus struct.\nContains copy of user_fxsr_struct.\nContains copy of prxregset struct.\nContains copy of psinfo struct.\nContains copy of pstatus struct.\ns390 control registers.\ns390 guarded storage broadcast control block.\ns390 guarded storage registers.\ns390 upper register halves.\ns390 breaking event address.\ns390 prefix register.\ns390 runtime instrumentation.\ns390 system call restart data.\ns390 transaction diagnostic block.\ns390 timer register.\ns390 TOD clock comparator register.\ns390 TOD programmable register.\ns390 vector registers 16-31.\ns390 vector registers 0-15 upper half.\nContains copy of siginfo_t, size might increase.\nDesired pagesize for the binary.\nContains copy of task structure.\nContains copy of utsname struct.\nNote type for version string.\nVmcore Device Dump Note.\nx86 extended state using xsave.\nNote section entry header.\nNote section entry header.\nException processing options.\nrecord the fill value used by the linker.\nHW workarounds.  ‘AND’ bits when merging.\nHW workarounds.  ‘OR’ bits when merging.\nHardware workarounds performed\nUndefined.\nSection padding options.\nRegister usage information.\nreserve space for desktop tools to write.\nDismiss invalid address faults?\nForce floating point debug mode?\nFPE’s which MAY be enabled.\nFPE’s which MUST be enabled.\npage zero must be mapped.\nForce sequential memory mode?\nR4000 end-of-page patch.\nR5000 cvt.[ds].l bug.  clean=1.\nR5000 end-of-page patch.\nmay need R8000 prefetch patch.\nAbsolute segment.\nPosition-independent segment.\nSegment contains the location addressed by the static base.\nspec insns w/o recovery\nOS-specific segment flags.\nProcessor-specific segment flags.\nSegment is readable.\nSegment is writable.\nSegment is executable.\nSpecial value for <code>FileHeader*::e_phnum</code>.\nARM unwind segment.\nDynamic linking information.\nGCC <code>.eh_frame_hdr</code> segment.\nSegment containing <code>.note.gnu.property</code> section.\nRead-only after relocation.\nIndicates stack executability.\nEnd of OS-specific segment types.\nEnd of processor-specific segment types.\narch extension bits\nia64 unwind bits\nProgram interpreter.\nLoadable program segment.\nStart of OS-specific segment types.\nStart of processor-specific segment types.\nFP mode requirement.\nRegister usage information.\nRuntime procedure table.\nAuxiliary information.\nProgram header table entry is unused.\nSegment contains the program header table.\nReserved.\nThread-local storage segment.\nProgram segment header.\nProgram segment header.\nNo flags\nHash size not power of 2\nIgnore LD_LIBRARY_PATH\nUse quickstart\nDirect 16 bit\nDirect 32 bit\nDirect 32 bit PLT address\nDirect 8 bit\nCopy symbol at runtime\nCreate GOT entry\n32 bit GOT entry\nLoad from 32 bit GOT entry, relaxable.\n32 bit offset to GOT\n32 bit PC relative offset to GOT\nAdjust indirectly by program base\nCreate PLT entry\nNo reloc\nPC relative 16 bit\nPC relative 32 bit\nPC relative 8 bit\n32 bit PLT address\nAdjust by program base\n32-bit symbol size\nTLS descriptor containing pointer to code and to argument, …\nMarker of call through TLS descriptor for relaxation.\nID of module containing symbol\nOffset in TLS block\nDirect 32 bit for GNU version of general dynamic thread …\nDirect 32 bit for general dynamic thread local data\nRelocation for call to __tls_get_addr()\nTag for popl in GD TLS code\nTag for pushl in GD TLS code\nGOT offset for TLS descriptor.\nGOT entry for static TLS block offset\nAddress of GOT entry for static TLS block offset\nGOT entry for negated static TLS block offset\nDirect 32 bit for GNU version of local dynamic thread …\nDirect 32 bit for local dynamic thread local data in LE …\nRelocation for call to __tls_get_addr() in LDM code\nTag for popl in LDM TLS code\nTag for pushl in LDM TLS code\nOffset relative to TLS block\nOffset relative to static TLS block\nNegated offset relative to static TLS block\nOffset in static TLS block\nNegated offset in static TLS block\nDirect 12 bit.\nDirect 16 bit.\nDirect 20 bit.\nDirect 32 bit.\nDirect 64 bit.\nDirect 8 bit.\nCopy symbol at runtime.\nCreate GOT entry.\n12 bit GOT offset.\n16 bit GOT offset.\n20 bit GOT offset.\n32 bit GOT offset.\n64 bit GOT offset.\n32 bit PC rel. to GOT entry &gt;&gt; 1.\n16 bit offset to GOT.\n32 bit offset to GOT.\n64 bit offset to GOT.\n32 bit PC relative offset to GOT.\n32 bit PC rel. GOT shifted by 1.\n12 bit offset to jump slot.\n16 bit offset to jump slot.\n20 bit offset to jump slot.\n32 bit offset to jump slot.\n64 bit offset to jump slot.\n32 bit rel. offset to jump slot.\nSTT_GNU_IFUNC relocation.\nCreate PLT entry.\nNo reloc.\nPC relative 16 bit.\nPC relative 16 bit shifted by 1.\nPC relative 32 bit.\nPC relative 32 bit shifted by 1.\nPC relative 64 bit.\n16 bit PC rel. PLT shifted by 1.\n32 bit PC relative PLT address.\n32 bit PC rel. PLT shifted by 1.\n64 bit PC relative PLT address.\n16 bit offset from GOT to PLT.\n32 bit offset from GOT to PLT.\n16 bit offset from GOT to PLT.\nAdjust by program base.\nID of module containing symbol.\nOffset in TLS block.\nDirect 32 bit for general dynamic thread local data.\nDirect 64 bit for general dynamic thread local data.\nTag for function call in general dynamic TLS code.\n12 bit GOT offset for static TLS block offset.\n20 bit GOT offset for static TLS block offset.\n32 bit GOT offset for static TLS block offset.\n64 bit GOT offset for static TLS block offset.\n32 bit address of GOT entry for negated static TLS block …\n64 bit address of GOT entry for negated static TLS block …\n32 bit rel. offset to GOT entry for negated static TLS …\nTag for function call in local dynamic TLS code.\nDirect 32 bit for local dynamic thread local data in LE …\nDirect 64 bit for local dynamic thread local data in LE …\n32 bit offset relative to TLS block.\n64 bit offset relative to TLS block.\n32 bit negated offset relative to static TLS block.\n64 bit negated offset relative to static TLS block.\nTag for load insn in TLS code.\nNegated offset in static TLS block.\nDirect 16 bit\nDirect 32 bit\nDirect 8 bit\nCopy symbol at runtime\nCreate GOT entry\n16 bit PC relative GOT entry\n16 bit GOT offset\n32 bit PC relative GOT entry\n32 bit GOT offset\n8 bit PC relative GOT entry\n8 bit GOT offset\nCreate PLT entry\nNo reloc\nPC relative 16 bit\nPC relative 32 bit\nPC relative 8 bit\n16 bit PC relative PLT address\n16 bit PLT offset\n32 bit PC relative PLT address\n32 bit PLT offset\n8 bit PC relative PLT address\n8 bit PLT offset\nAdjust by program base\n32 bit module number\n32 bit module-relative offset\n16 bit GOT offset for GD\n32 bit GOT offset for GD\n8 bit GOT offset for GD\n16 bit GOT offset for IE\n32 bit GOT offset for IE\n8 bit GOT offset for IE\n16 bit GOT offset for LDM\n32 bit GOT offset for LDM\n8 bit GOT offset for LDM\n16 bit module-relative offset\n32 bit module-relative offset\n8 bit module-relative offset\n16 bit offset relative to static TLS block\n32 bit offset relative to static TLS block\n8 bit offset relative to static TLS block\n32 bit TP-relative offset\nDirect 16-bit.\nDirect 32 bit.\nDirect 64 bit.\nDir. ADD imm. from bits 11:0.\nP-page-rel. GOT off. ADRP 32:12.\nPC-rel. ADR imm. from bits 20:0.\nPage-rel. ADRP imm. from 32:12.\nLikewise; no overflow check.\nLikewise for CALL.\nPC-rel. cond. br. imm. from 20:2.\nCopy symbol at runtime.\nCreate GOT entry.\nGOT-relative 32-bit.\nGOT-relative 64-bit.\nPC-rel. GOT off. load imm. 20:2.\nSTT_GNU_IFUNC relocation.\nPC-rel. B imm. from bits 27:2.\nCreate PLT entry.\nGOT-rel. off. LD/ST imm. 14:3.\nGOT-page-rel. GOT off. LD/ST 14:3\nDir. GOT off. LD/ST imm. 11:3.\nDir. ADD imm. from bits 11:4.\nDir. ADD imm. from bits 11:1.\nLikewise for bits 11:2.\nLikewise for bits 11:3.\nLikewise for LD/ST; no check.\nPC-rel. LD imm. from bits 20:2.\nGOT-rel. off. MOV{N,Z} imm. 15:0.\nLikewise for MOVK; no check.\nGOT-rel. o. MOV{N,Z} imm. 31:16.\nLikewise for MOVK; no check.\nGOT-rel. o. MOV{N,Z} imm. 47:32.\nLikewise for MOVK; no check.\nGOT-rel. o. MOV{N,Z} imm. 63:48.\nPC-rel. MOV{N,Z} imm. from 15:0.\nLikewise for MOVK; no check.\nPC-rel. MOV{N,Z} imm. from 31:16.\nLikewise for MOVK; no check.\nPC-rel. MOV{N,Z} imm. from 47:32.\nLikewise for MOVK; no check.\nPC-rel. MOV{N,Z} imm. from 63:48.\nDir. MOV{N,Z} imm. from 15:0.\nDir. MOV{N,Z} imm. from 31:16.\nDir. MOV{N,Z} imm. from 47:32.\nDir. MOVZ imm. from bits 15:0.\nLikewise for MOVK; no check.\nDir. MOVZ imm. from bits 31:16.\nLikewise for MOVK; no check.\nDir. MOVZ imm. from bits 47:32.\nLikewise for MOVK; no check.\nDir. MOV{K,Z} imm. from 63:48.\nNo relocation.\nDirect 32 bit.\nCopy symbol at runtime.\nCreate GOT entry.\nSTT_GNU_IFUNC relocation.\nCreate PLT entry.\nAdjust by program base.\nTLS Descriptor.\nModule number, 32 bit.\nModule-relative offset, 32 bit.\nTP-relative offset, 32 bit.\nPC-relative 16-bit.\nPC-relative 32-bit.\nPC-relative 64-bit.\nAdjust by program base.\nTLS Descriptor.\nRelax ADD.\nDirect ADD imm. from 11:0.\nPage-rel. ADRP imm. 32:12.\nPC-rel. ADR immediate 20:0.\nRelax BLR.\nDirect LD off. from 11:3.\nRelax LDR.\nPC-rel. load immediate 20:2.\nGOT-rel. MOVK imm. 15:0; no ck.\nGOT-rel. MOV{N,Z} imm. 31:16.\ndirect ADD imm. from 11:0.\npage-rel. ADRP imm. 32:12.\nPC-relative ADR imm. 20:0.\nGOT-rel. MOVK imm. 15:0.\nGOT-rel. MOV{N,Z} 31:16.\nPage-rel. ADRP 32:12.\nDirect LD off. 11:3.\nPC-rel. load imm. 20:2.\nGOT-rel. MOVK 15:0.\nGOT-rel. MOV{N,Z} 31:16.\nDTP-rel. ADD imm. from 23:12.\nDTP-rel. ADD imm. from 11:0.\nLikewise; no ovfl. check.\nLike 514; local dynamic model.\nLike 513; local dynamic model.\nLike 512; local dynamic model.\nDTP-rel. LD/ST imm. 11:4.\nLikewise; no check.\nDTP-rel. LD/ST imm. 11:1.\nLikewise; no check.\nDTP-rel. LD/ST imm. 11:2.\nLikewise; no check.\nDTP-rel. LD/ST imm. 11:3.\nLikewise; no check.\nDTP-rel. LD/ST imm. 11:0.\nLikewise; no check.\nTLS PC-rel. load imm. 20:2.\nTLS DTP-rel. MOV{N,Z} 15:0.\nLikewise; MOVK; no check.\nTLS DTP-rel. MOV{N,Z} 31:16.\nLikewise; MOVK; no check.\nTLS DTP-rel. MOV{N,Z} 47:32.\nLike 516; local dynamic model.\nLike 515; local dynamic model.\nTP-rel. ADD imm. 23:12.\nTP-rel. ADD imm. 11:0.\nLikewise; no ovfl. check.\nTP-rel. LD/ST off. 11:4.\nLikewise; no check.\nTP-rel. LD/ST off. 11:1.\nLikewise; no check.\nTP-rel. LD/ST off. 11:2.\nLikewise; no check.\nTP-rel. LD/ST off. 11:3.\nLikewise; no check.\nTP-rel. LD/ST off. 11:0.\nLikewise; no ovfl. check.\nTLS TP-rel. MOV{N,Z} 15:0.\nLikewise; MOVK; no check.\nTLS TP-rel. MOV{N,Z} 31:16.\nLikewise; MOVK; no check.\nTLS TP-rel. MOV{N,Z} 47:32.\nModule number, 64 bit.\nModule-relative offset, 64 bit.\nTP-relative offset, 64 bit.\nPC-rel. TBZ/TBNZ imm. from 15:2.\nPC+4 relative 23 bit shifted\nCopy symbol at runtime\nCreate GOT entry\nAdd displacement to GP\nGP relative 16 bit\nGP relative 32 bit\nGP relative 32 bit, high 16 bits\nGP relative 32 bit, low 16 bits\nPC+4 relative 16 bit shifted\nCreate PLT entry\nGP relative 16 bit w/optimization\nOptimization hint for LITERAL\nNo reloc\nDirect 32 bit\nDirect 64 bit\nAdjust by program base\nPC relative 16 bit\nPC relative 32 bit\nPC relative 64 bit\nDirect 12 bit\nDirect 16 bit\nDirect 32 bit\nDirect 32-bit.\nDirect 8 bit\nObsolete.\nObsolete.\nObsolete.\nPC relative (<code>ADD</code>, <code>SUB</code>).\nPC relative (<code>ADD</code>, <code>SUB</code>).\nPC relative (<code>ADD</code>, <code>SUB</code>).\nPC relative (<code>ADD</code>, <code>SUB</code>).\nPC relative (<code>ADD</code>, <code>SUB</code>).\nDeprecated, prog. base relative.\nDeprecated, prog. base relative.\nProgram base relative (<code>ADD</code>,<code>SUB</code>).\nProgram base relative (<code>ADD</code>,<code>SUB</code>).\nProgram base relative (<code>ADD</code>,<code>SUB</code>).\nProgram base relative (<code>ADD</code>,<code>SUB</code>).\nProgram base relative (<code>ADD</code>,<code>SUB</code>).\nAdjust by program base.\nPC relative 24 bit (<code>BL</code>, <code>BLX</code>).\nCopy symbol at runtime\nCreate GOT entry\n32 bit GOT entry\n32 bit offset to GOT\n12 bit, GOT entry relative to GOT origin (<code>LDR</code>, <code>STR</code>).\n32 bit PC relative offset to GOT\nGOT entry.\nGOT entry relative to GOT origin (<code>LDR</code>).\nPC relative GOT entry.\nPC relative 24 bit (<code>B</code>, <code>BL&lt;cond&gt;</code>).\nCreate PLT entry\nPC relative (<code>LDC</code>, <code>STC</code>).\nPC relative (<code>LDC</code>, <code>STC</code>).\nPC relative (<code>LDC</code>, <code>STC</code>).\nProgram base relative (<code>LDC</code>,<code>STC</code>).\nProgram base relative (<code>LDC</code>,<code>STC</code>).\nProgram base relative (<code>LDC</code>,<code>STC</code>).\nPC relative (<code>STR{D,H}</code>, <code>LDR{D,SB,H,SH}</code>).\nPC relative (<code>STR{D,H}</code>, <code>LDR{D,SB,H,SH}</code>).\nPC relative (<code>STR{D,H}</code>, <code>LDR{D,SB,H,SH}</code>).\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nPC relative (<code>LDR</code>,<code>STR</code>,<code>LDRB</code>,<code>STRB</code>).\nPC relative (<code>LDR</code>,<code>STR</code>,<code>LDRB</code>,<code>STRB</code>).\nDeprecated, prog. base relative.\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nProgram base relative (<code>LDR</code>, <code>STR</code>, <code>LDRB</code>, <code>STRB</code>).\nObsolete.\nDirect high 16-bit (<code>MOVT</code>).\nProgram base relative high 16 bit (<code>MOVT</code>).\nPC relative (MOVT).\nDirect 16-bit (<code>MOVW</code>).\nProgram base relative 16 bit (<code>MOVW</code>).\nProgram base relative 16 bit (<code>MOVW</code>).\nPC relative 16-bit (<code>MOVW</code>).\nNo reloc\nDeprecated PC relative 26 bit branch.\nDeprecated, 32 bit PLT address.\n32 bit PC relative.\nPC relative 32 bit\nPC relative 32-bit.\nAdjust by program base\nProgram base relative.\nObsolete static relocation.\nDirect &amp; 0x7C (<code>LDR</code>, <code>STR</code>).\nPC relative 12 bit (Thumb32 <code>ADR.W</code>).\nGOT entry relative to GOT origin, 12 bit (Thumb32 <code>LDR</code>).\nPC relative 20 bit (Thumb32 <code>B&lt;cond&gt;.W</code>).\nPC relative 24 bit (Thumb32 <code>B.W</code>).\nPC relative X &amp; 0x7E (Thumb16 <code>CBZ</code>, <code>CBNZ</code>).\nDirect high 16 bit (Thumb32 <code>MOVT</code>).\nProgram base relative high 16 bit (Thumb32 <code>MOVT</code>).\nPC relative high 16 bit (Thumb32 <code>MOVT</code>).\nDirect 16 bit (Thumb32 <code>MOVW</code>).\nProgram base relative 16 bit (Thumb32 <code>MOVW</code>).\nProgram base relative 16 bit (Thumb32 <code>MOVW</code>).\nPC relative 16 bit (Thumb32 <code>MOVW</code>).\nPC relative &amp; 0xFFE (Thumb16 <code>B</code>).\nPC relative 12 bit (Thumb32 <code>LDR{D,SB,H,SH}</code>).\nPC relative 24 bit (Thumb32 <code>BL</code>).\nPC relative &amp; 0x3FC (Thumb16 <code>LDR</code>, <code>ADD</code>, <code>ADR</code>).\nPC relative &amp; 0x1FE (Thumb16 <code>B</code>/<code>B&lt;cond&gt;</code>).\nReserved.\nReserved.\nDynamic relocation.\nTLS relaxation.\nID of module containing symbol\nOffset in TLS block\nPC-rel 32 bit for global dynamic thread local data\n12 bit GOT entry relative to GOT origin (<code>LDR</code>).\nPC-rel 32 bit for GOT entry of static TLS block offset\nPC-rel 32 bit for local dynamic thread local data\n12 bit relative to TLS block (<code>LDR</code>, <code>STR</code>).\n32 bit offset relative to TLS block\n12 bit relative to static TLS block (<code>LDR</code>, <code>STR</code>).\n32 bit offset relative to static TLS block\nOffset in static TLS block\nReserved.\nDirect 16 bit\nDirect 32 bit\nNo reloc\ndirect 32 bit (S + A)\nGOT entry in GLOB_DAT (GOT + G)\nhigh &amp; low 16 bit ADDRGOT, (GOT + G * 4) &amp; 0xffff\n(GOT + G * 4) &amp; 0xffff\nPLT entry in GLOB_DAT (GOT + G)\nhigh &amp; low 16 bit ADDRPLT, ((GOT + G * 4) &gt;&gt; 16) &amp; 0xFFFF\n(GOT+G*4) &amp; 0xffff\nhigh &amp; low 16 bit ADDR, ((S + A) &gt;&gt; 16) &amp; 0xffff\n(S + A) &amp; 0xffff\n32 bit adjust by program base\ndisp (S+A-BDATA) &amp; 0x3ffff\ndisp ((S+A-BDATA)&gt;&gt;1) &amp; 0x3ffff\ndisp ((S+A-BDATA)&gt;&gt;2) &amp; 0x3ffff\n(S+A-BTEXT) &amp; 0xffff\noff between got and sym (S)\n12 bit disp GOT entry (G)\n32 bit GOT entry (G)\noffset to GOT (S + A - GOT)\nhigh &amp; low 16 bit GOTOFF, ((S + A - GOT) &gt;&gt; 16) &amp; 0xffff\n(S + A - GOT) &amp; 0xffff\nPC offset to GOT (GOT + A - P)\nhigh &amp; low 16 bit GOTPC, ((GOT + A - P) &gt;&gt; 16) &amp; 0xffff\n(GOT + A - P) &amp; 0xffff\nhigh &amp; low 16 bit GOT, (G &gt;&gt; 16) &amp; 0xffff\ndisp (G &gt;&gt; 2)\n(G &amp; 0xffff)\nPLT entry (S)\nno reloc\n32-bit rel (S + A - P)\ndisp ((S + A - P) &gt;&gt; 1) &amp; 0x7ff\ndisp ((S + A - P) &gt;&gt; 2) &amp; 0xff\ndisp ((S + A - P) &gt;&gt;1) &amp; 0x7ff\ndisp ((S + A - P) &gt;&gt; 1) &amp; 0x3ff\ndisp ((S + A - P) &gt;&gt; 2) &amp; 0x3ff\ndisp ((S + A - P) &gt;&gt; 1) &amp; 0xffff\ndisp ((S + A - P) &gt;&gt; 2) &amp; 0xffff\ndisp ((S+A-P) &gt;&gt;1) &amp; 0x3ffff\n((S + A - P) &gt;&gt; 1) &amp; 0x3ff_ffff\ndisp ((S+A-P) &gt;&gt;2) &amp; 0x7f\ndisp ((S+A-P) &gt;&gt;1) &amp; x3ff_ffff\n12 bit disp PLT entry (G)\n32 bit PLT entry (G)\nhigh &amp; low 16 bit PLT, (G &gt;&gt; 16) &amp; 0xffff\ndisp (G &gt;&gt; 2)\nG &amp; 0xffff\n32 bit adjust program base(B + A)\n32 bit offset to TLS block\n(S+A-BTEXT) &amp; 0xffff\nDirect 32 bit.\nCopy relocation, 32-bit case.\nSymbol value if resolved by the definition in the same …\nAdjust indirectly by program base, 32-bit case.\nCreate PLT entry.\nPC relative 32 bit.\nAdjust by program base, 32-bit case.\nSize of symbol plus 32-bit addend.\nOffset relative to static TLS block, 32-bit case.\nDirect 64 bit.\nDirect 64 bit for literal.\nCopy relocation, 64-bit case.\nSymbol value if resolved by the definition in the same …\n64-bit offset of the symbol from GOT.\nThe symbol’s offset from GOT encoded within a 64-bit …\nAdjust indirectly by program base, 64-bit case.\nCreate PLT entry, 64-bit case.\nPC relative 64 bit in data.\nPC relative 64 bit for literal.\nAdjust by program base, 64-bit case.\nAdjust by program base for literal, 64-bit case.\nSize of symbol plus 64-bit addend.\nOffset relative to static TLS block, 64-bit case.\nDirect AP.\n32-bit offset of AP GOT entry.\nPC relative 28 bit for DISP.\n32-bit offset of the symbol’s entry in GOT.\n32-bit offset of the symbol from GOT.\n32-bit offset of the symbol’s entry in .got.plt.\nIs symbol resolved locally during the link. The result is …\nIs symbol resloved locally during the link. The result is …\nNo reloc.\nDirect PL.\n32-bit offset of PL GOT entry.\nPrefetch insn line containing the label (symbol).\nID of module containing symbol, 32-bit case.\nOffset in module TLS block, 32-bit case.\nOffset in static TLS block, 32-bit case.\nID of module containing symbol, 64-bit case.\nOffset in module TLS block, 64-bit case.\nOffset in static TLS block, 64-bit case.\nGOT entry for ID of module containing symbol.\nGOT entry for offset in module TLS block.\nStatic TLS block offset GOT entry.\nDirect 32 bit\ncopy relocation\nsymbol + addend, data4 LSB\nsymbol + addend, data4 MSB\nsymbol + addend, data8 LSB\nsymbol + addend, data8 MSB\n@dtpmod(sym + add), data8 LSB\n@dtpmod(sym + add), data8 MSB\n@dtprel(sym + add), imm14\n@dtprel(sym + add), imm22\n@dtprel(sym + add), data4 LSB\n@dtprel(sym + add), data4 MSB\n@dtprel(sym + add), imm64\n@dtprel(sym + add), data8 LSB\n@dtprel(sym + add), data8 MSB\n@fptr(sym + add), data4 LSB\n@fptr(sym + add), data4 MSB\n@fptr(sym + add), mov imm64\n@fptr(sym + add), data8 LSB\n@fptr(sym + add), data8 MSB\n@gprel(sym + add), add imm22\n@gprel(sym + add), data4 LSB\n@gprel(sym + add), data4 MSB\n@gprel(sym + add), mov imm64\n@gprel(sym + add), data8 LSB\n@gprel(sym + add), data8 MSB\nsymbol + addend, add imm14\nsymbol + addend, add imm22\nsymbol + addend, mov imm64\ndynamic reloc, imported PLT, LSB\ndynamic reloc, imported PLT, MSB\nUse of LTOFF22X.\n@ltoff(sym + add), add imm22\nLTOFF22, relaxable.\n@ltoff(sym + add), mov imm64\n@ltoff(@dtpmod(sym + add)), imm22\n@ltoff(@dtprel(s+a)), imm22\n@ltoff(@fptr(s+a)), imm22\n@ltoff(@fptr(s+a)), data4 LSB\n@ltoff(@fptr(s+a)), data4 MSB\n@ltoff(@fptr(s+a)), imm64\n@ltoff(@fptr(s+a)), data8 LSB\n@ltoff(@fptr(s+a)), data8 MSB\n@ltoff(@tprel(s+a)), imm2\nsymbol + addend, data4 LSB\nsymbol + addend, data4 MSB\nsymbol + addend, data8 LSB\nsymbol + addend, data8 MSB\nnone\n@pcrel(sym + add), ptb, call\n@pcrel(sym + add), 21bit inst\n@pcrel(sym + add), fchkf\n@pcrel(sym + add), chk.s\n@pcrel(sym + add), 22bit inst\n@pcrel(sym + add), data4 LSB\n@pcrel(sym + add), data4 MSB\n@pcrel(sym + add), brl\n@pcrel(sym + add), 64bit inst\n@pcrel(sym + add), data8 LSB\n@pcrel(sym + add), data8 MSB\n@pltoff(sym + add), add imm22\n@pltoff(sym + add), mov imm64\n@pltoff(sym + add), data8 LSB\n@pltoff(sym + add), data8 MSB\ndata 4 + REL\ndata 4 + REL\ndata 8 + REL\ndata 8 + REL\n@secrel(sym + add), data4 LSB\n@secrel(sym + add), data4 MSB\n@secrel(sym + add), data8 LSB\n@secrel(sym + add), data8 MSB\n@segrel(sym + add), data4 LSB\n@segrel(sym + add), data4 MSB\n@segrel(sym + add), data8 LSB\n@segrel(sym + add), data8 MSB\nAddend and symbol difference\n@tprel(sym + add), imm14\n@tprel(sym + add), imm22\n@tprel(sym + add), imm64\n@tprel(sym + add), data8 LSB\n@tprel(sym + add), data8 MSB\nRuntime address resolving\n32-bit PC relative\nRuntime address resolving\n64-bit PC relative\n52..=63 bits of 64-bit absolute address\n32..=51 bits of 64-bit absolute address\n12..=31 bits of 32/64-bit absolute address\n0..=11 bits of 32/64-bit absolute address\n16-bit in-place addition\n24-bit in-place addition\n32-bit in-place addition\n6-bit in-place addition\n64-bit in-place addition\n8-bit in-place addition\nLEB128 in-place addition\nDelete some bytes to ensure the instruction at PC + A …\n18-bit PC-relative jump offset with two trailing zeros\n23-bit PC-relative jump offset with two trailing zeros\n28-bit PC-relative jump offset with two trailing zeros\n18..=37 bits of <code>S + A - PC</code> into the <code>pcaddu18i</code> instruction …\nReserved\nRuntime memory copy in executable\nReserved\nGNU C++ vtable member usage\nGNU C++ vtable hierarchy\n52..=63 bits of 64-bit GOT entry absolute address\n32..=51 bits of 64-bit GOT entry absolute address\n52..=63 bits of the 64-bit offset from the PC relative …\n32..=51 bits of the 64-bit offset from the PC relative …\n12..=31 bits of 32/64-bit GOT entry absolute address\n0..=11 bits of 32/64-bit GOT entry absolute address\nThe signed 32-bit offset <code>offs</code> from <code>PC &amp; 0xfffff000</code> to …\n0..=11 bits of the 32/64-bit offset from the PC relative …\nRuntime local indirect function resolving\nRuntime PLT supporting\nMark la.abs: load absolute address for static link.\nMark external label branch: access PC relative address for …\nNo reloc\n52..=63 bits of the 64-bit offset from the PC relative …\n32..=51 bits of the 64-bit offset from the PC relative …\nThe signed 32-bit offset <code>offs</code> from <code>PC &amp; 0xfffff000</code> to …\nSame as R_LARCH_ABS_LO12.  0..=11 bits of the 32/64-bit …\n22-bit PC-relative offset with two trailing zeros\nRuntime fixup for load-address\nPaired with a normal relocation at the same address to …\nStack top addition (binary)\nStack top bitwise and (binary)\nAssert stack top\nStack top selection (tertiary)\nStack top logical not (unary)\nPop stack top to fill 28-bit signed immediate operand with …\nPop stack top to fill 23-bit signed immediate operand with …\nPop stack top to fill 12-bit signed immediate operand\nPop stack top to fill 16-bit signed immediate operand\nPop stack top to fill 18-bit signed immediate operand with …\nPop stack top to fill 5-bit signed immediate operand\nPop stack top to fill 20-bit signed immediate operand\nPop stack top to fill an instruction\nPop stack top to fill 12-bit unsigned immediate operand\nPush constant or absolute address\nDuplicate stack top\nPush for access GOT entry\nPush PC-relative offset\nPush for external function calling\nPush for TLS-GD\nPush for TLS-IE\nPush for TLS-LE\nStack top left shift (binary)\nStack top right shift (binary)\nStack top subtraction (binary)\n16-bit in-place subtraction\n24-bit in-place subtraction\n32-bit in-place subtraction\n6-bit in-place subtraction\n64-bit in-place subtraction\n8-bit in-place subtraction\nLEB128 in-place subtraction\nRuntime relocation for TLS-GD\nRuntime relocation for TLS-GD\nRuntime relocation for TLS-GD\nRuntime relocation for TLS-GD\n12..=31 bits of TLS GD GOT entry 32/64-bit absolute address\n12..=31 bits of the 32/64-bit PC-relative offset to the …\n51..=63 bits of TLS IE GOT entry 64-bit absolute address\n32..=51 bits of TLS IE GOT entry 64-bit absolute address\n52..=63 bits of the 64-bit offset from the PC-relative …\n32..=51 bits of the 64-bit offset from the PC-relative …\n12..=31 bits of TLS IE GOT entry 32/64-bit absolute address\n0..=11 bits of TLS IE GOT entry 32/64-bit absolute address\nThe signed 32-bit offset <code>offs</code> from <code>PC &amp; 0xfffff000</code> to …\n0..=12 bits of the 32/64-bit offset from the PC-relative …\n12..=31 bits of TLS LD GOT entry 32/64-bit absolute address\n12..=31 bits of the offset from <code>PC</code> to <code>GP + GD + 0x800</code>, …\n52..=63 bits of TLS LE 64-bit offset from thread pointer\n32..=51 bits of TLS LE 64-bit offset from thread pointer\n12..=31 bits of TLS LE 32/64-bit offset from thread pointer\n0..=11 bits of TLS LE 32/64-bit offset from thread pointer\nRuntime relocation for TLE-IE\nRuntime relocation for TLE-IE\nPC relative 10 bit shifted.\nPC relative 10 bit shifted.\nDirect 16 bit.\nDirect 16 bit.\nPC relative 18 bit shifted.\nPC relative 18 bit shifted.\nDirect 24 bit.\nDirect 24 bit.\nPC relative 26 bit shifted.\nPC relative 26 bit shifted.\n26 bit PC relative to PLT shifted\nDirect 32 bit.\nDirect 32 bit.\nCopy symbol at runtime\nCreate GOT entry\nHigh 16 bit GOT entry with signed low\nHigh 16 bit GOT entry with unsigned low\nLow 16 bit GOT entry\n24 bit GOT entry\n24 bit offset to GOT\nHigh 16 bit offset to GOT with signed low\nHigh 16 bit offset to GOT with unsigned low\nLow 16 bit offset to GOT\n24 bit PC relative offset to GOT\nHigh 16 bit PC relative offset to GOT with signed low\nHigh 16 bit PC relative offset to GOT with unsigned low\nLow 16 bit PC relative offset to GOT\nHigh 16 bit with signed low.\nHigh 16 bit with signed low\nHigh 16 bit with unsigned low.\nHigh 16 bit with unsigned low\nCreate PLT entry\nLow 16 bit.\nLow 16 bit\nNo reloc.\nKeep this the last entry.\nPC relative 32 bit.\nAdjust by program base\n16 bit offset in SDA.\n16 bit offset in SDA\n32bit absolute address\nNo reloc\nDirect 32 bit.\nLow 16 bit.\nPC relative 32 bit.\nLow 16 bits of PCREL32.\nSymbol Op Symbol relocation.\nDirect 64 bit.\nNo reloc.\nPC relative 64 bit.\nRuntime copy.\nCreate GOT entry.\nGNU C++ vtable member usage.\nGNU C++ vtable hierarchy.\n32 bit offset to GOT.\n64 bit offset to GOT.\nPC-relative GOT offset.\nGOT entry offset.\nCreate PLT entry.\nNo reloc.\nPLT offset (PC-relative).\nAdjust by program base.\nRead-only small data area.\nRead-write small data area.\nTLS Reloc.\nTLS Module ID.\nTLS Offset Within TLS Block.\nTLS Offset Within TLS Block.\nTLS General Dynamic.\nTLS Offset From Thread Pointer.\nTLS Local Dynamic.\nTLS Offset From Thread Pointer.\nDirect 16 bit\nDirect 26 bit shifted\nDirect 32 bit\n16 bit GOT entry for function\n16 bit GOT entry\nGP relative 16 bit\nGP relative 32 bit\nHigh 16 bit\n16 bit literal entry\nLow 16 bit\nNo reloc\nPC relative 16 bit\nPC relative 32 bit\nModule number 32 bit\nModule number 64 bit\nModule-relative offset 32 bit\nModule-relative offset 64 bit\nModule-relative offset, high 16 bits\nModule-relative offset, low 16 bits\n16 bit GOT offset for GD\n16 bit GOT offset for IE\n16 bit GOT offset for LDM\nTP-relative offset, 32 bit\nTP-relative offset, 64 bit\nTP-relative offset, high 16 bits\nTP-relative offset, low 16 bits\nDirect 16 bit.\nDirect 24 bit.\nDirect 32 bit.\nDirect 8 bit.\nAlignment requirement for linker relaxation.\nCopy symbol at runtime.\nCreate GOT entry.\n… collection annotation.\nAncient C++ vtable garbage…\n16-bit offset to GOT entry.\n24-bit offset to GOT entry.\n32-bit offset to GOT entry.\n16-bit offset from GOT.\n24-bit offset from GOT.\n32-bit offset from GOT.\n16-bit PCrel offset to GOT.\n32-bit PCrel offset to GOT.\nCreate PLT entry.\nNo reloc.\nPC-relative 16-bit signed.\nPC-relative 32-bit.\nPC-relative 8-bit signed.\n16-bit PCrel to PLT entry.\n32-bit PCrel to PLT entry.\nAdjust by program base.\nAdjustment for next reloc as needed by linker relaxation.\nID of module containing symbol.\nOffset in module TLS block.\n32-bit offset for global dynamic.\nGOT offset for static TLS block offset.\nGOT address for static TLS block offset.\n32-bit offset for local dynamic.\nModule-relative offset.\nOffset relative to static TLS block.\nOffset in static TLS block.\nDirect 16 bit\nDirect 32 bit\nAlignment requirement for linker relaxation.\n16 bit symbol value + addend.\n32 bit symbol value + addend.\n8 bit symbol value + addend.\n5 bit expression, shift 22.\n16 bit GOT entry for function.\nDirect call.\nDirect call in .noat section.\nIndirect call through register.\n%hiadj() of function GOT entry.\n%lo() of function GOT entry.\nConditional branch.\nCopy symbol at runtime.\nCreate GOT entry.\nGNU C++ vtable member usage.\nGNU C++ vtable hierarchy.\n16 bit GOT entry.\n16 bit offset to GOT pointer.\n%hiadj of offset to GOT pointer.\n%lo of offset to GOT pointer.\n%hiadj() of GOT entry.\n%lo() of GOT entry.\n16 bit GP pointer offset.\nHigh 16 bit.\nHigh 16 bit, adjusted.\n5 bit constant expression.\n6 bit constant expression.\n8 bit constant expression.\nCreate PLT entry.\nLow 16 bit.\nNo reloc.\nPC relative 16 bit.\n%hiadj of PC relative offset.\n%lo of PC relative offset.\nAdjust by program base.\nDirect signed 16 bit.\nModule number.\nModule-relative offset.\n16 bit GOT offset for TLS GD.\n16 bit GOT offset for TLS IE.\n16 bit GOT offset for TLS LDM.\n16 bit module relative offset.\n16 bit LE TP-relative offset.\nTP-relative offset.\nDirect unsigned 16 bit.\nUnconditional branch.\nCopy relocation.\n14 bits of eff. address.\nRight 14 bits of eff. address.\n14 bits of eff. address.\n16 bits of eff. address.\n16 bits of eff. address.\n16 bits of eff. address.\n17 bits of eff. address.\nRight 17 bits of eff. address.\nLeft 21 bits of eff. address.\nDirect 32-bit reference.\n64 bits of eff. address.\nRight 14 bits of rel. address.\nLeft 21 bits of rel. address.\nDynamic reloc, exported PLT\n64 bits function address.\nGP-rel. address, right 14 bits.\nGP-relative, right 14 bits.\nGP-rel. address, right 14 bits.\n16 bits GP-rel. address.\n16 bits GP-rel. address.\n16 bits GP-rel. address.\nGP-relative, left 21 bits.\n64 bits of GP-rel. address.\nDynamic reloc, imported PLT\nLT-rel. address, right 14 bits.\nLT-relative, right 14 bits.\nLT-rel. address, right 14 bits.\n16 bits LT-rel. address.\n16 bits LT-rel. address.\n16 bits LT-rel. address.\nLT-relative, left 21 bits.\n64 bits LT-rel. address.\nLT-rel. fct. ptr., right 14 bits.\nLT-rel. fct ptr, right 14 bits.\nLT-rel. fct. ptr., right 14 bits.\n16 bits LT-rel. function ptr.\n16 bits LT-rel. function ptr.\n16 bits LT-rel. function ptr.\nLT-rel. fct ptr, left 21 bits.\n32 bits LT-rel. function pointer.\n64 bits LT-rel. function ptr.\nLT-TP-rel. address, right 14 bits.\n14 bits LT-TP-rel. address.\nLT-TP-rel. address, right 14 bits.\nLT-TP-rel. address, right 14 bits.\n16 bits LT-TP-rel. address.\n16 bits LT-TP-rel. address.\n16 bits LT-TP-rel. address.\nLT-TP-rel. address, left 21 bits.\n64 bits LT-TP-rel. address.\nNo reloc.\nPC rel. address, right 14 bits.\nRight 14 bits of rel. address.\nPC-rel. address, right 14 bits.\n16 bits PC-rel. address.\n16 bits PC-rel. address.\n16 bits PC-rel. address.\n17 bits of rel. address.\nRight 17 bits of rel. address.\nLeft 21 bits of rel. address.\n22 bits PC-rel. address.\n32-bit rel. address.\n64 bits PC-rel. address.\nRight 14 bits of fdesc address.\nLeft 21 bits of fdesc address.\n32 bits function address.\nPLT-rel. address, right 14 bits.\nPLT rel. address, right 14 bits.\nPLT-rel. address, right 14 bits.\n16 bits PLT-rel. address.\n16 bits LT-rel. address.\n16 bits PLT-rel. address.\nPLT rel. address, left 21 bits.\n32 bits section rel. address.\n64 bits section rel. address.\nNo relocation, set segment base.\n32 bits segment rel. address.\n64 bits segment rel. address.\nDTP module 32-bit.\nDTP module 64-bit.\nDTP offset 32-bit.\nDTP offset 32-bit.\nGD 14-bit right.\nGD 21-bit left.\nGD call to __t_g_a.\nLD module 14-bit right.\nLD module 21-bit left.\nLD module call to __t_g_a.\nLD offset 14-bit right.\nLD offset 21-bit left.\nTP-rel. address, right 14 bits.\nTP-rel. address, right 14 bits.\nTP-rel. address, right 14 bits.\n16 bits TP-rel. address.\n16 bits TP-rel. address.\n16 bits TP-rel. address.\nTP-rel. address, left 21 bits.\n32 bits TP-rel. address.\n64 bits TP-rel. address.\n16bit address, word aligned\n16bit absolute address\nhalf16ds* (S + A) &gt;&gt; 2\nadjusted high 16bits.\nhigh 16bits of address.\nhalf16 #higher(S + A)\nhalf16 #highera(S + A)\nhalf16 #highest(S + A)\nhalf16 #highesta(S + A)\nlower 16bits of address\nhalf16ds  #lo(S + A) &gt;&gt; 2\n26bit address, word aligned\nword30 (S + A - P) &gt;&gt; 2\n32bit absolute address\ndoubleword64 S + A\ndoubleword64 (sym+add)@dtpmod\nhalf16* (sym+add)@dtprel\nhalf16ds* (sym+add)@dtprel\nhalf16  (sym+add)@dtprel@ha\nhalf16  (sym+add)@dtprel@h\nhalf16  (sym+add)@dtprel@higher\nhalf16  (sym+add)@dtprel@highera\nhalf16  (sym+add)@dtprel@highest\nhalf16  (sym+add)@dtprel@highesta\nhalf16  (sym+add)@dtprel@l\nhalf16ds (sym+add)@dtprel@l\ndoubleword64 (sym+add)@dtprel\nhalf16ds* (G + A) &gt;&gt; 2\nhalf16ds  #lo(G + A) &gt;&gt; 2\nhalf16ds* (sym+add)@got@dtprel\nhalf16  (sym+add)@got@dtprel@ha\nhalf16  (sym+add)@got@dtprel@h\nhalf16ds (sym+add)@got@dtprel@l\nhalf16* (sym+add)@got@tlsgd\nhalf16  (sym+add)@got@tlsgd@ha\nhalf16  (sym+add)@got@tlsgd@h\nhalf16  (sym+add)@got@tlsgd@l\nhalf16* (sym+add)@got@tlsld\nhalf16  (sym+add)@got@tlsld@ha\nhalf16  (sym+add)@got@tlsld@h\nhalf16  (sym+add)@got@tlsld@l\nhalf16ds* (sym+add)@got@tprel\nhalf16  (sym+add)@got@tprel@ha\nhalf16  (sym+add)@got@tprel@h\nhalf16ds (sym+add)@got@tprel@l\nGNU extension to support local ifunc.\nGNU extension to support local ifunc.\nhalf16ds  #lo(L + A) &gt;&gt; 2\ndoubleword64 L + A\nhalf16* M + A\nhalf16ds* (M + A) &gt;&gt; 2\nhalf16 #ha(M + A)\nhalf16 #hi(M + A)\nhalf16 #lo(M + A)\nhalf16ds  #lo(M + A) &gt;&gt; 2\ndoubleword64 L + A - P\nPC relative 16 bit\nhalf16   (sym+add-.)\nhalf16   (sym+add-.)@ha\nhalf16   (sym+add-.)@h\nhalf16   (sym+add-.)@l\nPC-rel. 26 bit, word aligned\ndoubleword64 S + A - P\nhalf16ds* (R + A) &gt;&gt; 2\nhalf16ds  #lo(R + A) &gt;&gt; 2\nnone    (sym+add)@tls\nnone    (sym+add)@tlsgd\nnone    (sym+add)@tlsld\ndoubleword64 .TOC\nhalf16* S + A - .TOC\nhalf16ds* (S + A - .TOC.) &gt;&gt; 2\nhalf16 #ha(S + A - .TOC.)\nhalf16 #hi(S + A - .TOC.)\nhalf16 #lo(S + A - .TOC.)\nhalf16ds  #lo(S + A - .TOC.) &gt;&gt; 2\nnone\nhalf16* (sym+add)@tprel\nhalf16ds* (sym+add)@tprel\nhalf16  (sym+add)@tprel@ha\nhalf16  (sym+add)@tprel@h\nhalf16  (sym+add)@tprel@higher\nhalf16  (sym+add)@tprel@highera\nhalf16  (sym+add)@tprel@highest\nhalf16  (sym+add)@tprel@highesta\nhalf16  (sym+add)@tprel@l\nhalf16ds (sym+add)@tprel@l\ndoubleword64 (sym+add)@tprel\ndoubleword64 S + A\n16bit address, 2 bits ignored\n16bit absolute address\nadjusted high 16bit\nhigh 16bit of absolute address\nlower 16bit of absolute address\n26bit address, 2 bits ignored.\n32bit absolute address\nlike EMB_RELSDA, adjusted high 16\nlike EMB_RELSDA, but high 16 bit\nlike EMB_RELSDA, but lower 16 bit\nlike EMB_SDA21, adjusted high 16\nlike EMB_SDA21, but high 16 bit\nlike EMB_SDA21, but lower 16 bit\nword32  (sym+add)@dtpmod\nhalf16*(sym+add)@dtprel\nhalf16  (sym+add)@dtprel@ha\nhalf16  (sym+add)@dtprel@h\nhalf16  (sym+add)@dtprel@l\nword32  (sym+add)@dtprel\n16 bit relative offset in SDA\n16 bit offset in SDA\nhalf16* (sym+add)@got@dtprel\nhalf16* (sym+add)@got@dtprel@ha\nhalf16* (sym+add)@got@dtprel@h\nhalf16* (sym+add)@got@dtprel@l\nhalf16* (sym+add)@got@tlsgd\nhalf16  (sym+add)@got@tlsgd@ha\nhalf16  (sym+add)@got@tlsgd@h\nhalf16  (sym+add)@got@tlsgd@l\nhalf16* (sym+add)@got@tlsld\nhalf16  (sym+add)@got@tlsld@ha\nhalf16  (sym+add)@got@tlsld@h\nhalf16  (sym+add)@got@tlsld@l\nhalf16* (sym+add)@got@tprel\nhalf16  (sym+add)@got@tprel@ha\nhalf16  (sym+add)@got@tprel@h\nhalf16  (sym+add)@got@tprel@l\nGNU extension to support local ifunc.\nPC relative 16 bit\nhalf16   (sym+add-.)\nhalf16   (sym+add-.)@ha\nhalf16   (sym+add-.)@h\nhalf16   (sym+add-.)@l\nPC relative 26 bit\nnone    (sym+add)@tls\nnone    (sym+add)@tlsgd\nnone    (sym+add)@tlsld\nThis is a phony reloc to handle any old fashioned TOC16 …\nhalf16* (sym+add)@tprel\nhalf16  (sym+add)@tprel@ha\nhalf16  (sym+add)@tprel@h\nhalf16  (sym+add)@tprel@l\nword32  (sym+add)@tprel\nNo reloc\n24-bit absolute address in bits 23:0 of a 48-bit instr\n32-bit absolute address in bits 31:0 of a 48-bit instr\n16-bit absolute address into bits 15:0 of a 16-bit …\n32-bit absolute address in bits 31:0 of a 32-bit data …\n16-bit absolute address in bits 39:24 of a 48-bit instr\n16-bit absolute address into bits 15:0 of a 32-bit instr\n6-bit absolute address in bits 32:27 of a 48-bit instr\n6-bit absolute address into bits 16:11 of a 32-bit instr\n7-bit absolute address into bits 6:0 of a 32-bit instr\n6-bit PC-relative address into bits 16:11 of a Type B\n24-bit PC-relative address in bits 23:0 of a 48-bit instr\n6-bit PC-relative address in bits 32:27 of a 48-bit instr\nDirect 10 bit\nDirect 11 bit\nDirect 13 bit\nDirect 16 bit\nDirect 22 bit\nDirect 32 bit\nDirect 5 bit\nDirect 6 bit\nDirect 64 bit\nDirect 7 bit\nDirect 8 bit\nCopy symbol at runtime\nPC relative 16 bit\nPC relative 32 bit\nPC relative 64 bit\nPC relative 8 bit\nCreate GOT entry\nwas part of v9 ABI but was removed\nTruncated 10 bit GOT entry\n13 bit GOT entry\n22 bit GOT entry shifted\nDirect high 12 of 44 bit\nTop 22 bits of direct 64 bit\nHigh 22 bit\nHigh 22 bit PLT entry\nHigh 22 bit complemented\nHigh middle 10 bits of …\nCreate PLT entry\nDirect low 10 of 44 bit\nLow middle 22 bits of …\nTruncated 10 bit\nTruncated 10 bit PLT entry\nTruncated 11 bit complemented\nDirect mid 22 of 44 bit\nNo reloc\n10bit with secondary 13bit addend\nPC relative 10 bit truncated\nPC relative 22 bit shifted\nPC rel trunc 10 bit PLT entry\nPC rel high 22 bit PLT entry\nPC rel 32 bit ref to PLT entry\nTop 22 bits of pc rel 64 bit\nHigh middle 10 bit of …\nLow miggle 22 bits of …\nDirect 32 bit ref to PLT entry\nDirect 64 bit ref to PLT entry\nGlobal register usage\nAdjust by program base\nDirect 16 bit unaligned\nDirect 32 bit unaligned\nDirect 64 bit unaligned\nPC relative 16 bit shifted\nPC relative 19 bit shifted\nPC relative 22 bit shifted\nPC relative 30 bit shifted\n30 bit PC relative PLT address\nDirect 16 bit\nPC relative 16 bit\nDirect 32 bit\nPC relative 32 bit\nDirect 64 bit\nPC relative 64 bit\nDirect 8 bit\nPC relative 8 bit\nX1 pipe branch offset\nCopy relocation\nX1 pipe destination 8-bit\nCreate GOT entry\nGNU C++ vtable member usage\nGNU C++ vtable hierarchy\nhword 0 16-bit\nlast hword 0 16-bit\nhword 1 16-bit\nlast hword 1 16-bit\nhword 2 16-bit\nlast hword 2 16-bit\nhword 3 16-bit\nX0 pipe hword 0\nX0 pipe hword 0 GOT offset\nX0 pipe last hword 0\nX0 pipe last hword 0 GOT offset\nX0 pipe PC-rel last hword 0\nX0 pipe PC-rel PLT last hword 0\nX0 pipe last hword 0 GD off\nX0 pipe last hword 0 IE off\nX0 pipe last hword 0 LE off\nX0 pipe PC relative hword 0\nX0 pipe PC-rel PLT hword 0\nX0 pipe hword 0 TLS GD offset\nX0 pipe hword 0 TLS IE offset\nX0 pipe hword 0 TLS LE offset\nX0 pipe hword 1\nX0 pipe last hword 1\nX0 pipe last hword 1 GOT offset\nX0 pipe PC-rel last hword 1\nX0 pipe PC-rel PLT last hword 1\nX0 pipe last hword 1 GD off\nX0 pipe last hword 1 IE off\nX0 pipe last hword 1 LE off\nX0 pipe PC relative hword 1\nX0 pipe PC-rel PLT hword 1\nX0 pipe hword 2\nX0 pipe last hword 2\nX0 pipe PC-rel last hword 2\nX0 pipe PC-rel PLT last hword 2\nX0 pipe PC relative hword 2\nX0 pipe PC-rel PLT hword 2\nX0 pipe hword 3\nX0 pipe PC relative hword 3\nX0 pipe PC-rel PLT hword 3\nX1 pipe hword 0\nX1 pipe hword 0 GOT offset\nX1 pipe last hword 0\nX1 pipe last hword 0 GOT offset\nX1 pipe PC-rel last hword 0\nX1 pipe PC-rel PLT last hword 0\nX1 pipe last hword 0 GD off\nX1 pipe last hword 0 IE off\nX1 pipe last hword 0 LE off\nX1 pipe PC relative hword 0\nX1 pipe PC-rel PLT hword 0\nX1 pipe hword 0 TLS GD offset\nX1 pipe hword 0 TLS IE offset\nX1 pipe hword 0 TLS LE offset\nX1 pipe hword 1\nX1 pipe last hword 1\nX1 pipe last hword 1 GOT offset\nX1 pipe PC-rel last hword 1\nX1 pipe PC-rel PLT last hword 1\nX1 pipe last hword 1 GD off\nX1 pipe last hword 1 IE off\nX1 pipe last hword 1 LE off\nX1 pipe PC relative hword 1\nX1 pipe PC-rel PLT hword 1\nX1 pipe hword 2\nX1 pipe last hword 2\nX1 pipe PC-rel last hword 2\nX1 pipe PC-rel PLT last hword 2\nX1 pipe PC relative hword 2\nX1 pipe PC-rel PLT hword 2\nX1 pipe hword 3\nX1 pipe PC relative hword 3\nX1 pipe PC-rel PLT hword 3\nX0 pipe 8-bit\nX0 pipe “addi” for TLS GD/IE\nX0 pipe “addi” for TLS GD\nX1 pipe 8-bit\nX1 pipe “addi” for TLS GD/IE\nX1 pipe “addi” for TLS GD\nY0 pipe 8-bit\nY0 pipe “addi” for TLS GD/IE\nY0 pipe “addi” for TLS GD\nY1 pipe 8-bit\nY1 pipe “addi” for TLS GD/IE\nY1 pipe “addi” for TLS GD\nCreate PLT entry\nX1 pipe jump offset\nX1 pipe jump offset to PLT\nX1 pipe mfspr\nX0 pipe mm “end”\nX0 pipe mm “start”\nX1 pipe mtspr\nNo reloc\nAdjust by program base\nX0 pipe shift amount\nX1 pipe shift amount\nY0 pipe shift amount\nY1 pipe shift amount\n32-bit ID of symbol’s module\n64-bit ID of symbol’s module\n32-bit offset in TLS block\n64-bit offset in TLS block\n“jal” for TLS GD\n“ld_tls” for TLS IE\n32-bit offset in static TLS block\n64-bit offset in static TLS block\nDirect 16 bit\nPC relative 16 bit\nDirect 32 bit\nPC relative 32 bit\nDirect 8 bit\nPC relative 8 bit\nX1 pipe branch offset\nCopy relocation\nX1 pipe destination 8-bit\nCreate GOT entry\nGNU C++ vtable member usage\nGNU C++ vtable hierarchy\nHigh 16 bit, adjusted\nHigh 16 bit\nX0 pipe 16-bit\nX0 pipe 16-bit GOT offset\nX0 pipe ha() 16-bit GOT offset\nX0 pipe high 16-bit GOT offset\nX0 pipe low 16-bit GOT offset\nX0 pipe high 16-bit, adjusted\nX0 pipe PC relative ha() 16 bit\nX0 pipe high 16-bit\nX0 pipe PC relative high 16 bit\nX0 pipe low 16-bit\nX0 pipe PC relative low 16 bit\nX0 pipe PC relative 16 bit\nX0 pipe 16-bit TLS GD offset\nX0 pipe ha() 16-bit TLS GD offset\nX0 pipe high 16-bit TLS GD offset\nX0 pipe low 16-bit TLS GD offset\nX0 pipe 16-bit TLS IE offset\nX0 pipe ha() 16-bit TLS IE offset\nX0 pipe high 16-bit TLS IE offset\nX0 pipe low 16-bit TLS IE offset\nX0 pipe 16-bit TLS LE offset\nX0 pipe ha() 16-bit TLS LE offset\nX0 pipe high 16-bit TLS LE offset\nX0 pipe low 16-bit TLS LE offset\nX1 pipe 16-bit\nX1 pipe 16-bit GOT offset\nX1 pipe ha() 16-bit GOT offset\nX1 pipe high 16-bit GOT offset\nX1 pipe low 16-bit GOT offset\nX1 pipe high 16-bit, adjusted\nX1 pipe PC relative ha() 16 bit\nX1 pipe high 16-bit\nX1 pipe PC relative high 16 bit\nX1 pipe low 16-bit\nX1 pipe PC relative low 16 bit\nX1 pipe PC relative 16 bit\nX1 pipe 16-bit TLS GD offset\nX1 pipe ha() 16-bit TLS GD offset\nX1 pipe high 16-bit TLS GD offset\nX1 pipe low 16-bit TLS GD offset\nX1 pipe 16-bit TLS IE offset\nX1 pipe ha() 16-bit TLS IE offset\nX1 pipe high 16-bit TLS IE offset\nX1 pipe low 16-bit TLS IE offset\nX1 pipe 16-bit TLS LE offset\nX1 pipe ha() 16-bit TLS LE offset\nX1 pipe high 16-bit TLS LE offset\nX1 pipe low 16-bit TLS LE offset\nX0 pipe 8-bit\nX0 pipe “addi” for TLS GD\nX1 pipe 8-bit\nX1 pipe “addi” for TLS GD\nY0 pipe 8-bit\nY0 pipe “addi” for TLS GD\nY1 pipe 8-bit\nY1 pipe “addi” for TLS GD\nCreate PLT entry\nX1 pipe jump offset\nX1 pipe jump offset to PLT\nLow 16 bit\nX1 pipe mfspr\nX0 pipe mm “end”\nX1 pipe mm “end”\nX0 pipe mm “start”\nX1 pipe mm “start”\nX1 pipe mtspr\nNo reloc\nAdjust by program base\nX0 pipe shift amount\nX1 pipe shift amount\nY0 pipe shift amount\nY1 pipe shift amount\nID of module containing symbol\nOffset in TLS block\n“jal” for TLS GD\n“lw_tls” for TLS IE\nOffset in static TLS block\nDirect 16 bit zero extended\nDirect 32 bit zero extended\nDirect 32 bit sign extended\nDirect 64 bit\nDirect 8 bit sign extended\nCopy symbol at runtime\nID of module containing symbol\nOffset in TLS block\nOffset in module’s TLS block\nCreate GOT entry\n32 bit GOT entry\n64-bit GOT entry offset\n64 bit offset to GOT\n32 bit signed pc relative offset to GOT\nGOT offset for TLS descriptor.\n64-bit PC relative offset to GOT\n32 bit signed PC relative offset to GOT\n64-bit PC relative offset to GOT entry\nLoad from 32 bit signed pc relative offset to GOT entry …\nlike GOT64, says PLT entry needed\n32 bit signed PC relative offset to GOT entry for IE symbol\nAdjust indirectly by program base\nCreate PLT entry\nNo reloc\n16 bit sign extended pc relative\nPC relative 32 bit signed\nPC relative 64 bit\n8 bit sign extended pc relative\n32 bit PLT address\n64-bit GOT relative offset to PLT entry\nAdjust by program base\n64-bit adjust by program base\nLoad from 32 bit signed pc relative offset to GOT entry …\nSize of symbol plus 32-bit addend\nSize of symbol plus 64-bit addend\nTLS descriptor.\nMarker for call through TLS descriptor.\n32 bit signed PC relative offset to two GOT entries for GD …\n32 bit signed PC relative offset to two GOT entries for LD …\nOffset in initial TLS block\nOffset in initial TLS block\nRelocation table entry without explicit addend.\nRelocation table entry without explicit addend.\nRelocation table entry with explicit addend.\nRelocation table entry with explicit addend.\n32-bit relative relocation table entry.\n64-bit relative relocation table entry.\nSection occupies memory during execution.\nSection may be multiply defined in the input to a link …\nSection contains an entry point\nSection is compressed.\nThis section is excluded from the final executable or …\nSection is executable.\nMbind section.\nSection should not be garbage collected by the linker.\nSection is a member of a group.\nspec insns w/o recovery\nsection near gp\nThe <code>sh_info</code> field contains a section header table index.\nSection has special ordering requirements when combining …\nOS-specific section flags.\nProcessor-specific section flags.\nSection may be be merged to eliminate duplication.\nMust be in global data area.\nSection requires special OS-specific handling.\nSection far from gp.\nStatic branch prediction code.\nSection with short addressing.\nSection contains nul-terminated strings.\nSection holds thread-local storage.\nSection is writable.\nAssociated symbol is absolute.\nAssociated symbol is common.\nEnd of OS-specific section indices.\nEnd of processor-specific section indices.\nEnd of reserved section indices.\nStart of OS-specific section indices.\nStart of processor-specific section indices.\nOS-specific range start. Start of reserved section indices.\nAllocated common symbols.\nAllocated data symbols.\nSmall common symbols.\nSmall undefined symbols.\nAllocated test symbols.\nSection for tentatively declared symbols in ANSI C.\nCommon blocks in huge model.\nUndefined section.\nSection index is in the <code>SHT_SYMTAB_SHNDX</code> section.\nAArch64 attributes section.\nARM attributes section.\nARM unwind section.\nPreemption details.\nChecksum for DSO content.\nC-SKY attributes section.\nDynamic linking information.\nDynamic linker symbol table.\nArray of destructors.\nObject attributes.\nGNU-style hash table.\nPrelink library list\nVersion definition section.\nVersion needs section.\nVersion symbol table.\nSection group.\nSymbol hash table.\nEnd of OS-specific section types.\nEnd of processor-specific section types.\nSun-specific high bound.\nEnd of application-specific section types.\nextension bits\nunwind bits\nArray of constructors.\nLLVM-style dependent libraries.\nStart of OS-specific section types.\nStart of processor-specific section types.\nSun-specific low bound.\nStart of application-specific section types.\nConflicting symbols.\nMIPS ECOFF debugging info.\nDWARF debugging information.\nEvent section.\nGlobal data area sizes.\nShared objects used in link.\nMiscellaneous options.\nRegister usage information.\nReserved for SGI/MIPS compilers\nProgram space with no data (bss).\nNotes.\nSection header table entry is unused.\nDebug info for optimized code.\nContains product specific ext.\nUnwind information.\nArray of pre-constructors.\nProgram data.\nRelocation entries without explicit addends.\nRelocation entries with explicit addends.\nRelocation entries; only offsets.\nRISC-V attributes section.\n.adi.attributes\nReserved section type.\nString table.\nSymbol table.\nExtended section indices for a symbol table.\nUnwind information.\nGlobal symbol.\nUnique symbol.\nEnd of OS-specific symbol binding.\nEnd of processor-specific symbol binding.\nLocal symbol.\nStart of OS-specific symbol binding.\nStart of processor-specific symbol binding.\nWeak symbol.\nNo PV required.\nPV only used for initial ldgp.\nOnly valid for <code>STB_MIPS_SPLIT_COMMON</code>.\nA Thumb label.\nA Thumb function.\nSymbol is a common data object.\nSymbol’s name is a file name.\nSymbol is a code object.\nSymbol is an indirect code object.\nEnd of OS-specific symbol types.\nEnd of processor-specific symbol types.\nStart of OS-specific symbol types.\nStart of processor-specific symbol types.\nSymbol type is unspecified.\nSymbol is a data object.\nMillicode function entry point.\nSymbol is associated with a section.\nGlobal register reserved to app.\nSymbol is a thread-local storage object.\nDefault symbol visibility rules.\nSymbol is not visible to other components.\nProcessor specific hidden class.\nSymbol is visible to other components, but is not …\nBeginning of reserved entries\nSymbol bound to parent\nSymbol bound to self\nSymbol is a copy-reloc\nDirect bound symbol\nSymbol bound to object to be lazy loaded\nPass-thru symbol for translator\nSection header.\nSection header.\nSymbol table entry.\nSymbol table entry.\nAdditional information about a <code>Sym32</code>.\nAdditional information about a <code>Sym64</code>.\nSymbol is hidden.\nSymbol version index.\nCurrent version\nNo version\nVersion definition of file itself\nWeak version identifier\nSymbol is global.\nSymbol is local.\nCurrent version\nNo version\nAuxiliary version information.\nVersion definition sections\nAuxiliary needed version information.\nVersion dependency.\nVersion symbol information\nABI version.\nThe number of words in the bloom filter.\nThe bit shift count for the bloom filter.\nThe number of hash buckets.\nThe number of hash buckets.\nUncompressed data alignment.\nUncompressed data alignment.\nReserved.\nUncompressed data size.\nUncompressed data size.\nCompression format. One of the <code>ELFCOMPRESS_*</code> values.\nCompression format. One of the <code>ELFCOMPRESS_*</code> values.\nThe number of chain values.\nFile class. One of the <code>ELFCLASS*</code> constants.\nDynamic entry type.\nDynamic entry type.\nValue (integer or address).\nValue (integer or address).\nData encoding. One of the <code>ELFDATA*</code> constants.\nSize in bytes of this header.\nSize in bytes of this header.\nEntry point virtual address.\nEntry point virtual address.\nProcessor-specific flags.\nProcessor-specific flags.\nMagic number and other information.\nMagic number and other information.\nArchitecture. One of the <code>EM_*</code> constants.\nArchitecture. One of the <code>EM_*</code> constants.\nProgram header table entry size.\nProgram header table entry size.\nProgram header table entry count.\nProgram header table entry count.\nProgram header table file offset.\nProgram header table file offset.\nSection header table entry size.\nSection header table entry size.\nSection header table entry count.\nSection header table entry count.\nSection header table file offset.\nSection header table file offset.\nSection header string table index.\nSection header string table index.\nObject file type. One of the <code>ET_*</code> constants.\nObject file type. One of the <code>ET_*</code> constants.\nObject file version. Must be <code>EV_CURRENT</code>.\nObject file version. Must be <code>EV_CURRENT</code>.\nDecode <code>E_E2K_MACH_*</code> from <code>FileHeader*::e_flags</code>.\nEncode <code>E_E2K_MACH_*</code> into <code>FileHeader*::e_flags</code>.\nParse the file from the string table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate the GNU hash for a symbol name.\nCalculate the SysV hash for a symbol name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMagic number. Must be <code>ELFMAG</code>.\nLength of the note’s descriptor.\nLength of the note’s descriptor.\nLength of the note’s name.\nLength of the note’s name.\nType of the note.\nType of the note.\nParse the version name from the string table.\nParse the version name from the string table.\nOS ABI identification. One of the <code>ELFOSABI*</code> constants.\nSegment alignment.\nSegment alignment.\nSegment size in the file.\nSegment size in the file.\nSegment flags. A combination of the <code>PF_*</code> constants.\nSegment flags. A combination of the <code>PF_*</code> constants.\nSegment size in memory.\nSegment size in memory.\nSegment file offset.\nSegment file offset.\nSegment physical address.\nSegment physical address.\nSegment type. One of the <code>PT_*</code> constants.\nSegment type. One of the <code>PT_*</code> constants.\nSegment virtual address.\nSegment virtual address.\nPadding bytes.\nExplicit addend.\nExplicit addend.\nCalculate the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> …\nCalculate the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> …\nCalculate the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> …\nCalculate the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> …\nRelocation type and symbol index.\nRelocation type and symbol index.\nRelocation type and symbol index.\nRelocation type and symbol index.\nRelocation address.\nRelocation address.\nRelocation address.\nRelocation address.\nGet the <code>r_sym</code> component of the <code>r_info</code> field.\nGet the <code>r_sym</code> component of the <code>r_info</code> field.\nGet the <code>r_sym</code> component of the <code>r_info</code> field.\nGet the <code>r_sym</code> component of the <code>r_info</code> field.\nGet the <code>r_type</code> component of the <code>r_info</code> field.\nGet the <code>r_type</code> component of the <code>r_info</code> field.\nGet the <code>r_type</code> component of the <code>r_info</code> field.\nGet the <code>r_type</code> component of the <code>r_info</code> field.\nSet the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> components.\nSet the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> components.\nSet the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> components.\nSet the <code>r_info</code> field given the <code>r_sym</code> and <code>r_type</code> components.\nSet the <code>st_info</code> field given the <code>st_bind</code> and <code>st_type</code> …\nSet the <code>st_info</code> field given the <code>st_bind</code> and <code>st_type</code> …\nSection virtual address at execution.\nSection virtual address at execution.\nSection alignment.\nSection alignment.\nEntry size if the section holds a table.\nEntry size if the section holds a table.\nSection flags. A combination of the <code>SHF_*</code> constants.\nSection flags. A combination of the <code>SHF_*</code> constants.\nAdditional section information.\nAdditional section information.\nLink to another section.\nLink to another section.\nSection name.\nSection name.\nSection file offset.\nSection file offset.\nSection size in bytes.\nSection size in bytes.\nSection type. One of the <code>SHT_*</code> constants.\nSection type. One of the <code>SHT_*</code> constants.\nDirect bindings, symbol bound to.\nDirect bindings, symbol bound to.\nPer symbol flags.\nPer symbol flags.\nGet the <code>st_bind</code> component of the <code>st_info</code> field.\nGet the <code>st_bind</code> component of the <code>st_info</code> field.\nSymbol type and binding.\nSymbol type and binding.\nSymbol name.\nSymbol name.\nSymbol visibility.\nSymbol visibility.\nSection index or one of the <code>SHN_*</code> values.\nSection index or one of the <code>SHN_*</code> values.\nSymbol size.\nSymbol size.\nGet the <code>st_type</code> component of the <code>st_info</code> field.\nGet the <code>st_type</code> component of the <code>st_info</code> field.\nSymbol value.\nSymbol value.\nGet the <code>st_visibility</code> component of the <code>st_info</code> field.\nGet the <code>st_visibility</code> component of the <code>st_info</code> field.\nThe symbol table index of the first symbol in the hash.\nOffset in bytes to verdaux array\nNumber of associated aux entries\nVersion information\nVersion name hash value\nVersion Index\nOffset in bytes to next verdef entry\nVersion revision\nVersion or dependency names\nOffset in bytes to next verdaux\nELF version. Must be <code>EV_CURRENT</code>.\nOffset in bytes to vernaux array\nNumber of associated aux entries\nOffset of filename for this dependency\nOffset in bytes to next verneed entry\nVersion of structure\nDependency specific information\nHash value of dependency name\nDependency name string offset\nOffset in bytes to next vernaux entry\nVersion Index\nBig endian byte order.\nCompile-time big endian byte order.\nA trait for using an endianness specification.\nAn endianness that is selectable at run-time.\nAn <code>i16</code> value with an externally specified endianness of …\nAn unaligned <code>i16</code> value with an externally specified …\nAn <code>i32</code> value with an externally specified endianness of …\nAn unaligned <code>i32</code> value with an externally specified …\nAn <code>i64</code> value with an externally specified endianness of …\nAn unaligned <code>i64</code> value with an externally specified …\nLittle endian byte order.\nCompile-time little endian byte order.\nThe native endianness for the target platform.\nA <code>u16</code> value with an externally specified endianness of …\nAn unaligned <code>u16</code> value with an externally specified …\nA <code>u32</code> value with an externally specified endianness of …\nAn unaligned <code>u32</code> value with an externally specified …\nA <code>u64</code> value with an externally specified endianness of …\nAn unaligned <code>u64</code> value with an externally specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a specification for the endianness of some …\nConstruct a new value given bytes that already have the …\nConstruct a new value given bytes that already have the …\nConstruct a new value given bytes that already have the …\nConstruct a new value given bytes that already have the …\nConstruct a new value given bytes that already have the …\nConstruct a new value given bytes that already have the …\nConstruct a specification for the endianness of some …\nReturn the value as a native endian value.\nReturn the value as a native endian value.\nReturn the value as a native endian value.\nReturn the value as a native endian value.\nReturn the value as a native endian value.\nReturn the value as a native endian value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true for big endian byte order.\nReturn true for little endian byte order.\nConstruct a new value given a native endian value.\nConstruct a new value given a native endian value.\nConstruct a new value given a native endian value.\nConstruct a new value given a native endian value.\nConstruct a new value given a native endian value.\nConstruct a new value given a native endian value.\nConverts a signed 16 bit integer to native endian.\nConverts an unaligned signed 16 bit integer to native …\nConverts a signed 32 bit integer to native endian.\nConverts an unaligned signed 32 bit integer to native …\nConverts a signed 64 bit integer to native endian.\nConverts an unaligned signed 64 bit integer to native …\nConverts an unsigned 16 bit integer to native endian.\nConverts an unaligned unsigned 16 bit integer to native …\nConverts an unsigned 32 bit integer to native endian.\nConverts an unaligned unsigned 32 bit integer to native …\nConverts an unsigned 64 bit integer to native endian.\nConverts an unaligned unsigned 64 bit integer to native …\nSet the value given a native endian value.\nSet the value given a native endian value.\nSet the value given a native endian value.\nSet the value given a native endian value.\nSet the value given a native endian value.\nSet the value given a native endian value.\nConverts a signed 16 bit integer from native endian.\nConverts an unaligned signed 16 bit integer from native …\nConverts a signed 32 bit integer from native endian.\nConverts an unaligned signed 32 bit integer from native …\nConverts a signed 64 bit integer from native endian.\nConverts an unaligned signed 64 bit integer from native …\nConverts an unsigned 16 bit integer from native endian.\nConverts an unaligned unsigned 16 bit integer from native …\nConverts an unsigned 32 bit integer from native endian.\nConverts an unaligned unsigned 32 bit integer from native …\nConverts an unsigned 64 bit integer from native endian.\nConverts an unaligned unsigned 64 bit integer from native …\nmust be followed by PAGE21 or PAGEOFF12\na B/BL instruction with 26-bit displacement\npc-rel distance to page of GOT slot\noffset within page of GOT slot, scaled by r_length\npc-rel distance to page of target\noffset within page, scaled by r_length\nfor pointers to GOT slots\nmust be followed by a ARM64_RELOC_UNSIGNED\npc-rel distance to page of TLVP slot\noffset within page of TLVP slot, scaled by r_length\nfor pointers\n24 bit branch displacement (to a word address)\nlike ARM_RELOC_SECTDIFF, but the symbol referenced was …\nthe second relocation entry of a pair\nprebound lazy pointer\na PAIR follows with subtract symbol value\ngeneric relocation as described above\nobsolete - a thumb 32-bit branch instruction possibly …\n22 bit branch displacement (to a half-word address)\n64 bit ABI\nABI for 64-bit hardware with 32-bit types; LP32\nmask for architecture bits\nWhen selecting a slice, ANY will pick the slice with the …\nNot meant to be run under xnu\nARMv7-A and ARMv7-R\nNot meant to be run under xnu\nCortex A9\nNot meant to be run under xnu\nSwift\nNot meant to be run under xnu\n64 bit libraries\nmask for feature flags\npmax\n3max\npointer authentication with versioned ABI\nHaswell feature subset\nThe dyld cache header. Corresponds to struct …\nCorresponds to struct dyld_cache_image_info from …\nCorresponds to struct dyld_cache_mapping_info from …\nAdded in dyld-940, which shipped with macOS 12 / iOS 15. …\nAdded in dyld-1042.1, which shipped with macOS 13 / iOS 16.\nNXSwapLong(FAT_MAGIC)\nNXSwapLong(FAT_MAGIC_64)\nOnly follows a GENERIC_RELOC_SECTDIFF\nprebound lazy pointer\nthread local variables\ngeneric relocation as described above\nbuild for platform min OS version\nlocal of code signature\ntable of non-instructions in __text\nused with <code>LinkeditDataCommand</code>\nstring for dyld to treat like environment variable\nused with <code>LinkeditDataCommand</code>, payload is trie\ncompressed dyld information\ncompressed dyld information only\nCode signing DRs copied from linked dylibs\ndynamic link-edit symbol table info\nencrypted segment information\n64-bit encrypted segment information\nused with <code>FilesetEntryCommand</code>\ncompressed table of function start addresses\nfixed VM file inclusion (internal use)\nobject identification info (obsolete)\nfixed VM shared library identification\ndynamically linked shared lib ident\ndynamic linker identification\ndelay load of dylib until first use\noptimization hints in MH_OBJECT files\nlinker options in MH_OBJECT files\nload a specified fixed VM shared library\nload a dynamically linked shared library\nload a dynamic linker\nload upward dylib\nload a dynamically linked shared library that is allowed …\nreplacement for LC_UNIXTHREAD\narbitrary data included within a Mach-O file\nprebind checksum\nmodules prebound for a dynamically linked shared library\nprepage command (internal use)\nload and re-export dylib\nimage routines\n64-bit image routines\nrunpath additions\nsegment of this file to be mapped\n64-bit segment of this file to be mapped\nlocal of info to split segments\nsource version used to build binary\nsub client\nsub framework\nsub library\nsub umbrella\nlink-edit gdb symbol table info (obsolete)\nlink-edit stab symbol table info\nthread\ntwo-level namespace lookup hints\nunix thread (includes a stack)\nthe uuid\nbuild for iPhoneOS min OS version\nbuild for MacOSX min OS version\nbuild for AppleTV min OS version\nbuild for Watch min OS version\nA variable length string in a load command.\nCommon fields at the start of every load command.\n1 thru 255 inclusive\nindicates that this binary binds to all two-level …\nWhen this bit is set, all stacks in the task will be given …\nThe code was linked for use in an application extension.\nthe object file’s undefined references are bound by the …\nthe final linked image uses weak symbols\ndynamically bound bundle file\nthe binary has been canonicalized via the unprebind …\nNXSwapInt(MH_MAGIC)\nNXSwapInt(MH_MAGIC_64)\ncore file\nOnly for use on dylibs.  When linking against a dylib that …\ncompanion file with only debug sections\nthe object file is input for the dynamic linker and can’…\ndynamically bound shared library\nOnly for use on dylibs. When this bit is set, the dylib is …\nshared library stub for static linking only, no section …\ndynamic link editor\ndemand paged executable file\nset of mach-o’s\nthe executable is forcing all images to use flat name …\nfixed VM shared library file\nContains a section of type S_THREAD_LOCAL_VARIABLES\nthe object file is the output of an incremental link …\nx86_64 kexts\nthe shared library init routine is to be run lazily via …\nthe mach magic number\nthe 64-bit mach magic number\nThe external symbols listed in the nlist symbol table do …\ndo not have dyld notify the prebinding agent about this …\nthis umbrella guarantees no multiple definitions of …\nthe object file has no undefined references\nWhen this bit is set, the OS will run the main executable …\nWhen this bit is set on a dylib, the static linker does …\nrelocatable object file\nWhen this bit is set, the OS will load the main executable …\nthe binary is not prebound but can have its prebinding …\nthe file has its dynamic undefined references prebound.\npreloaded executable file\nWhen this bit is set, the binary declares it is safe for …\nWhen this bit is set, the binary declares it is safe for …\nAllow LC_MIN_VERSION_MACOS and LC_BUILD_VERSION load …\nthe file has its read-only and read-write segments split\nsafe to divide up the sections into sub-sections via …\nthe image is using two-level name space bindings\nthe final linked image contains external weak symbols\nThe 32-bit mach header.\nThe 64-bit mach header.\nsymbol is not in any section\nabsolute, n_sect == NO_SECT\nsymbol is a Thumb function (ARM)\nAST file path: name,,NO_SECT,0,0\nbegin common: name,,NO_SECT,0,0\ninclude file beginning: name,,NO_SECT,0,sum\nbegin nsect sym: 0,,n_sect,0,address\nsymbol is discarded\nend common (local name): 0,,n_sect,0,address\nend common: name,,n_sect,0,0\ninclude file end: name,,NO_SECT,0,0\nend nsect sym: 0,,n_sect,0,address\nalternate entry: name,,n_sect,linenumber,address\ndeleted include file: name,,NO_SECT,0,sum\nexternal symbol bit, set for external symbols\nprocedure name (f77 kludge): name,,NO_SECT,0,0\nprocedure: name,,n_sect,linenumber,address\nglobal symbol: name,,NO_SECT,type,0\nindirect\nleft bracket: 0,,NO_SECT,nesting level,address\n.lcomm symbol: name,,n_sect,type,address\nsecond stab entry with length information\nlocal sym: name,,NO_SECT,type,offset\nsymbol is not to be dead stripped\ncompiler -O level: name,,NO_SECT,0,0\nemitted with gcc2_compiled and in gcc source\nobject file name: name,,0,0,st_mtime\ncompiler parameters: name,,NO_SECT,0,0\nprebound undefined (defined in a dylib)\nglobal pascal symbol: name,,NO_SECT,subtype,line\nprivate external symbol bit\nparameter: name,,NO_SECT,type,offset\nright bracket: 0,,NO_SECT,nesting level,address\nreference to a weak symbol\nregister sym: name,,NO_SECT,type,register\ndefined in section number n_sect\nsrc line: 0,,n_sect,linenumber,address\nsource file name: name,,n_sect,0,address\n#included file name: name,,n_sect,0,address\nstructure elt: name,,NO_SECT,type,struct_offset\nif any of these bits set, a symbolic debugging entry\nstatic symbol: name,,n_sect,type,address\nmask for the type bits\nundefined, n_sect == NO_SECT\ncompiler version: name,,NO_SECT,0,0\ncoalesced symbol is a weak definition\nsymbol is weak referenced\n14 bit branch displacement (to a word address)\n24 bit branch displacement (to a word address)\nSame as the RELOC_HI16 except the low 16 bits and the high …\na PAIR follows with the low half\nsection difference forms of above.  a PAIR\nSame as the LO16 except that the low 2 bits are not stored …\na PAIR follows with the high half\nfollows these with subtract symbol value\nlike PPC_RELOC_SECTDIFF, but the symbol referenced was …\nthe second relocation entry of a pair\nprebound lazy pointer\na PAIR follows with subtract symbol value\ngeneric relocation as described above\nabsolute relocation type for Mach-O files\nBit set in <code>Relocation::r_word0</code> for scattered relocations.\nA relocation entry.\n24 section attributes\nsystem setable attributes\nUser setable attributes\n256 section types\nthe real uninitialized data section no padding\nthe section common symbols are allocated in by the link …\nthe real initialized data section no padding, no bss …\nthe fvmlib initialization section\nthe section following the fvmlib initialization section\nthe icon headers\nthe icons in tiff format\nmodule information\nstring table\nstring table\nsymbol table\nthe real text part of the text section no headers, and no …\nthe tradition UNIX data segment\nthe icon segment\nthe segment for the self (dyld) modifying code stubs that …\nthe segment containing all structs created and maintained …\nthe segment overlapping with linkedit containing linking …\nobjective-C runtime segment\nthe pagezero segment which has no protections and catches …\nthe tradition UNIX text segment\nthe unix stack segment\nthis segment is the VM that is allocated by a fixed VM …\nthe file contents for this segment is for the high part of …\nthis segment has nothing that was relocated in it and …\nThis segment is protected.  If the segment starts at file …\nThis segment is made read-only after fixups\nsection with only 16 byte literals\nsection with only 4 byte literals\nsection with only 8 byte literals\na debug section\nsection has external relocation entries\nblocks are live if they reference live blocks\nsection has local relocation entries\nno dead stripping\nsection contains coalesced symbols that are not to be in a …\nsection contains only true machine instructions\nUsed with i386 code stubs written on by dyld\nsection contains some machine instructions\nok to strip static symbols in this section in files with …\nsection contains symbols that are to be coalesced\nsection with only literal C strings\nsection contains DTrace Object Format\nzero fill on demand section (that can be larger than 4 …\n32-bit offsets to initializers\nsection with only pairs of function pointers for …\nsection with only lazy symbol pointers to lazy loaded …\nsection with only lazy symbol pointers\nsection with only pointers to literals\nsection with only function pointers for initialization\nsection with only function pointers for termination\nsection with only non-lazy symbol pointers\nregular section\nsection with only symbol stubs, byte size of stub in the …\nfunctions to call to initialize TLV values\ntemplate of initial values for TLVs\nTLV descriptors\npointers to TLV descriptors\ntemplate of initial values for TLVs\nzero fill on demand section\n32-bit section.\n64-bit section.\n32-bit segment load command.\n64-bit segment load command.\nexecute permission\nread permission\nwrite permission\na CALL/JMP instruction with 32-bit displacement\nother GOT references\na MOVQ load of a GOT entry\nfor signed 32-bit displacement\nfor signed 32-bit displacement with a -1 addend\nfor signed 32-bit displacement with a -2 addend\nfor signed 32-bit displacement with a -4 addend\nmust be followed by a X86_64_RELOC_UNSIGNED\nfor thread local variables\nfor absolute addresses\nmemory address of this section\nmemory address of this section\nalignment as a power of 2\nalignment as a power of 2\nsection alignment (power of 2)\nsection alignment (power of 2)\nfile offset to binding info\nsize of binding info\nThe offset of this subcache from the main cache base …\nThe offset of this subcache from the main cache base …\nthe check sum or zero\nthe client name\nType of load command.\nLC_SEGMENT\nLC_SEGMENT_64\nLC_IDFVMLIB or LC_LOADFVMLIB\nLC_ID_DYLIB, LC_LOAD_{,WEAK_}DYLIB, LC_REEXPORT_DYLIB\nLC_SUB_FRAMEWORK\nLC_SUB_CLIENT\nLC_SUB_UMBRELLA\nLC_SUB_LIBRARY\nLC_PREBOUND_DYLIB\nLC_ID_DYLINKER, LC_LOAD_DYLINKER or LC_DYLD_ENVIRONMENT\nLC_THREAD or  LC_UNIXTHREAD\nLC_ROUTINES\nLC_ROUTINES_64\nLC_SYMTAB\nLC_DYSYMTAB\nLC_TWOLEVEL_HINTS\nLC_PREBIND_CKSUM\nLC_UUID\nLC_RPATH\n<code>LC_CODE_SIGNATURE</code>, <code>LC_SEGMENT_SPLIT_INFO</code>, …\nLC_ENCRYPTION_INFO\nLC_ENCRYPTION_INFO_64\nLC_VERSION_MIN_MACOSX or LC_VERSION_MIN_IPHONEOS or …\nLC_BUILD_VERSION\nLC_DYLD_INFO or LC_DYLD_INFO_ONLY\nLC_LINKER_OPTION only used in MH_OBJECT filetypes\nLC_SYMSEG\nLC_IDENT\nLC_FVMFILE\nLC_MAIN only used in MH_EXECUTE filetypes\nLC_SOURCE_VERSION\nLC_NOTE\nTotal size of command in bytes.\nincludes sizeof section structs\nincludes sizeof section_64 structs\nincludes pathname string\nincludes pathname string\nincludes umbrella string\nincludes client string\nincludes sub_umbrella string\nincludes sub_library string\nincludes strings\nincludes pathname string\ntotal size of this command\ntotal size of this command\ntotal size of this command\nsizeof(struct SymtabCommand)\nsizeof(struct DysymtabCommand)\nsizeof(struct TwolevelHintsCommand)\nsizeof(struct PrebindCksumCommand)\nsizeof(struct UuidCommand)\nincludes string\nsizeof(struct LinkeditDataCommand)\nincludes id string\nsizeof(struct EncryptionInfoCommand32)\nsizeof(struct EncryptionInfoCommand64)\nsizeof(struct VersionMinCommand)\nsizeof(struct BuildVersionCommand) plus ntools * …\nsizeof(struct DyldInfoCommand)\nsizeof(struct SymsegCommand)\nstrings that follow this command\nincludes pathname string\n24\n16\nsizeof(struct NoteCommand)\nlibrary’s compatibility vers number\nnumber of strings\nmachine specifier (int)\nmachine specifier (int)\nmachine specifier\nmachine specifier\ncpu specifier (int)\ncpu specifier (int)\ncpu specifier\ncpu specifier\nwhich enryption system, 0 means not-encrypted yet\nwhich enryption system, 0 means not-encrypted yet\nfile offset of encrypted range\nfile offset of encrypted range\nfile size of encrypted range\nfile size of encrypted range\nlibrary’s current version number\nowner name for this LC_NOTE\nfile offset of data in __LINKEDIT segment\nfile size of data in __LINKEDIT segment\nbase address of dyld when cache was built\nthe library identification\ncontained entry id\nfile (__TEXT) offset of main()\nfile offset to lazy binding info\nsize of lazy binding infs\noffset to referenced symbol table\noffset to external relocation entries\nFind the file offset of the image by looking up its …\nThe file name suffix of the subCache file, e.g. “.25.data…\nfile offset of this segment\nfile offset of this segment\nfile offset of the dylib\namount to map from the file\namount to map from the file\ntype of file\ntype of file\nflags\nflags\nflags\nflags\nflags (section type and attributes)\nflags (section type and attributes)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe library identification\nlibrary’s header address\nfiles virtual address\nindex to externally defined symbols\nindex into externally defined symbols\nindex into externally defined symbols\nindex into external relocation entries\nindex into external relocation entries\nlow 16 bits are the index into the init section, high 16 …\nlow 16 bits are the index into the init section, high 16 …\nindex to local symbols\nindex into symbols for local symbols\nindex into symbols for local symbols\nReturn the image information table.\nnumber of dyld_cache_image_info entries Use this  instead …\nfile offset to first dyld_cache_image_info Use this  …\nnumber of dyld_cache_image_info entries\nfile offset to first dyld_cache_image_info\nfile offset to the indirect symbol table\nReturn the fields of a plain relocation.\naddress of initialization routine\naddress of initialization routine\nindex into the module table that the init routine is …\nindex into the module table that the init routine is …\ninitial VM protection\ninitial VM protection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nindex into reference symbol table\nindex into reference symbol table\nindex to undefined symbols\na DICE_KIND_* value\nfile offset to lazy binding info\nsize of lazy binding infs\nnumber of bytes in data range\nbit vector of linked modules\nfile offset of where local symbols are stored\nsize of local symbols information\noffset to local relocation entries\ne.g. “dyld_v0    i386”\nFAT_MAGIC or FAT_MAGIC_64\nmach magic number identifier\nmach magic number identifier\nnumber of dyld_cache_mapping_info entries\nfile offset to first dyld_cache_mapping_info\nReturn the mapping information table.\nmaximum VM protection\nmaximum VM protection\nlibrary’s minor version number\nX.Y.Z is encoded in nibbles xxxx.yy.zz\nfile offset to module table\nindex into the module table this symbol is defined in\nthe module name (index into string table)\nthe module name (index into string table)\nsee &lt;mach-o/stab.h&gt;\nsee &lt;mach-o/stab.h&gt;\nsection number or NO_SECT\nsection number or NO_SECT\nindex into the string table\nindex into the string table\ntype flag, see below\ntype flag, see below\nvalue of this symbol (or stab offset)\nvalue of this symbol (or stab offset)\nlibrary’s target pathname\nlibrary’s path name\nlibrary’s path name\ndynamic linker’s path name\nfiles pathname\nnumber of load commands\nnumber of load commands\nnumber of externally defined symbols\nnumber of externally defined symbols\nnumber of externally defined symbols\nnumber of referenced symbol table entries\nnumber of external relocation entries\nnumber of external relocation entries\nnumber of external relocation entries\nnumber of structs that follow\nnumber of hints in the hint table\nnumber of indirect symbol table entries\nlow 16 bits are the number of init section entries, high …\nlow 16 bits are the number of init section entries, high …\nnumber of local symbols\nnumber of local symbols\nnumber of local symbols\nnumber of local relocation entries\nnumber of module table entries\nnumber of modules in library\nnumber of reference symbol table entries\nnumber of reference symbol table entries\nnumber of relocation entries\nnumber of relocation entries\nnumber of sections in segment\nnumber of sections in segment\nnumber of symbol table entries\nnumber of entries in table of contents\nnumber of tool entries following this\nnumber of undefined symbols\nfor this module address of the start of the (__OBJC,__…\nfor this module address of the start of the (__OBJC,__…\nfor this module size of the (__OBJC,__module_info) section\nfor this module size of the (__OBJC,__module_info) section\nfile offset to this object file\nfile offset to this object file\noffset to the string\nfile offset of this section\nfile offset of this section\noffset to the hint table\nsymbol segment offset\nfrom mach_header to start of data range\nfile offset of this data\npadding to make this struct’s size a multiple of 8 bytes\nRead the dyld cache header.\nReturns (arch, endian) based on the magic string.\nThe file system path of this image.\npath to add to run path\nplatform\noffset in the section to what is being relocated\noffset in the section to what is being relocated\ndoes not include value of sym referenced\n0=byte, 1=word, 2=long, 3=quad\n0=byte, 1=word, 2=long, 3=quad\nwas relocated pc relative already\nwas relocated pc relative already\nDetermine whether this is a scattered relocation.\nsymbol index if r_extern == 1 or section ordinal if …\nif not 0, machine specific relocation type\nif not 0, machine specific relocation type\nthe value the item to be relocated is referring to …\nfile offset to rebase info\nsize of rebase info\nCombine the fields into a <code>Relocation</code>.\nCombine the fields into a <code>Relocation</code>.\nfile offset of relocation entries\nfile offset of relocation entries\nreserved\nreserved\nentry_id is 32-bits long, so this is the reserved padding\nreserved (for offset or index)\nreserved (for offset or index)\nreserved (for count or sizeof)\nreserved (for count or sizeof)\nreserved\nReturn the fields of a scattered relocation.\nX.Y.Z is encoded in nibbles xxxx.yy.zz\nX.Y.Z is encoded in nibbles xxxx.yy.zz\nname of this section\nname of this section\nsegment name\nsegment name\nsegment this section goes in\nsegment this section goes in\nsize of this object file\nsize of this object file\nsize in bytes of this section\nsize in bytes of this section\nsymbol segment size in bytes\nlength of data region\nthe size of all the load commands\nthe size of all the load commands\nif not zero, initial stack size\nstring table offset\nstring table size in bytes\nthe sub_library name\nthe sub_umbrella framework name\nReturn the information about subcaches, if present.\nnumber of dyld_subcache_info entries\nfile offset to first dyld_subcache_info\nthe defined external symbol (index into the symbol table)\nReturn the symbol table that this command references.\nReturn the UUID for the .symbols subcache, if present.\nthe UUID of the .symbols subcache\nsymbol table offset\nlibrary’s build time stamp\nfile offset to table of contents\nenum for the tool\nthe umbrella framework name\nunique value for each shared cache file\nThe UUID of this subcache.\nThe UUID of this subcache.\nthe 128-bit uuid\nX.Y.Z is encoded in nibbles xxxx.yy.zz\nversion number of the tool\nA.B.C.D.E packed as a24.b10.c10.d10.e10\nmemory address of this segment\nmemory address of this segment\nmemory address of the dylib\nmemory size of this segment\nmemory size of this segment\nfile offset to weak binding info\nsize of weak binding info\nThe required value of <code>AnonObjectHeaderBigobj::class_id</code>.\nNon-COFF Object file header\nV-table slots are 32-bits in size.\nV-table slots are 64-bits in size.\nCall most derived method described by\nIf set, transition from unmanaged.\nIf set, transition from unmanaged with keeping the current …\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nSize of a jump thunk reserved range.\nDelay load version 2 flag for …\nArchitecture Specific Data\nBase Relocation Table\nBound Import Directory in headers\nCOM Runtime descriptor\nDebug Directory\nDelay Load Import Descriptors\nException Directory\nExport Directory\nRVA of GP\nImport Address Table\nImport Directory\nLoad Configuration Directory\nResource Directory\nSecurity Directory\nTLS Directory\nImage should execute in an AppContainer\nDLL can move.\nCode Integrity Image\nImage supports Control Flow Guard.\nImage can handle a high entropy 64-bit virtual address …\nDo not bind this image.\nImage understands isolation and doesn’t want it\nImage does not use SEH.  No SE handler may reside in this …\nImage is NX compatible\nDriver uses WDM model\nMZ\n32 bit word machine.\nAggressively trim working set\nBytes of machine word are reversed.\nBytes of machine word are reversed.\nDebugging info stripped from file in .DBG file\nFile is a DLL.\nFile is executable  (i.e. no unresolved external …\nApp can handle &gt;2gb addresses\nLine numbers stripped from file.\nLocal symbols stripped from file.\nAlpha_AXP\nALPHA64\nAMD64 (K8)\nARM Little-Endian\nARM64 Little-Endian\nARM64EC (“Emulation Compatible”)\nARM64X (Mixed ARM64 and ARM64EC)\nARM Thumb-2 Little-Endian\nCHPE x86 (“Compiled Hybrid Portable Executable”)\nEFI Byte Code\nIntel 386.\nIntel 64\nM32R little-endian\nMIPS\nMIPS\nMIPS\nIBM PowerPC Little-Endian\nMIPS little-endian\nMIPS little-endian, 0x160 big-endian\nMIPS little-endian\nRISCV128\nRISCV32\nRISCV64\nSH3 little-endian\nSH3E little-endian\nSH4 little-endian\nSH5\nUseful for indicating we want to interact with the host …\nARM Thumb/Thumb-2 Little-Endian\nInfineon\nMIPS little-endian WCE v2\nIf Image is on Net, copy and run from the swap file.\nRelocation info stripped from file.\nIf Image is on removable media, copy and run from the swap …\nSystem File.\nFile should only be run on a UP machine\nModule performs control flow and write integrity checks\nModule enables suppression of exports\nModule contains suppressed export information.\nModule contains valid control flow target metadata\nStride of Guard CF function table encoded in these bits …\nShift to right-justify Guard CF function table stride\nModule performs control flow integrity checks using …\nModule contains longjmp target information\nDelayload import table in its own .didat section (with …\nThe containing GFID entry is export suppressed\nThe containing GFID entry is suppressed\nModule supports read only delay load IAT\nModule was built with retpoline support\nModule requests that the OS enable return flow protection\nModule contains return flow instrumentation and metadata\nModule requests that the OS enable return flow protection …\nModule does not make use of the /GS security cookie\nPE00\nNE\nLE\nHigh 16-bit GP relative reference\nLow 16-bit GP relative reference\nLow 16 bits of 48 bit reference\nMiddle 16 bits of 48 bit reference\nHigh 16 bits of 48 bit reference\nHigh 16-bit section relative reference\nLow 16-bit section relative reference\nReference is absolute, no relocation is necessary\n32-bit address (VA).\n32-bit address w/o image base (RVA).\n64-bit address (VA).\nIndirect branch to a CFG check\nIndirect branch to a CFG check, with REX.W prefix\nIndirect call to a CFG check\nIndirect branch to an import\nIndirect call to an import\nIndirect branch to a target in RAX (no CFG)\nIndirect branch to a target in RAX, with REX.W prefix (no …\nIndirect branch for a switch table using Reg 0 (RAX)\nIndirect branch for a switch table using Reg 15 (R15)\nIndirect call to a target in RAX (no CFG)\n32-bit relative address from byte following reloc\n32-bit relative address from byte distance 1 from reloc\n32-bit relative address from byte distance 2 from reloc\n32-bit relative address from byte distance 3 from reloc\n32-bit relative address from byte distance 4 from reloc\n32-bit relative address from byte distance 5 from reloc\n32 bit offset from base of section containing target\n7 bit unsigned offset from base of section containing …\nSection index\n32 bit signed span-dependent value emitted into object\n32 bit signed span-dependent value applied at link time\n32 bit metadata token\nNo relocation required\n32 bit address. Review! do we need it?\n32 bit address w/o image base (RVA: for Data/PData/XData)\n64 bit address\nTBZ/TBNZ\n19 bit offset &lt;&lt; 2 &amp; sign ext. for conditional B\n26 bit offset &lt;&lt; 2 &amp; sign ext. for B &amp; BL\nADRP\nADD/ADDS (immediate) with zero shift, for page offset\nLDR (indexed, unsigned immediate), for page offset\nADR\n32-bit relative address from byte following reloc\nOffset within section\nADD/ADDS (immediate) with zero shift, for bit 12:23 of …\nADD/ADDS (immediate) with zero shift, for bit 0:11 of …\nLDR (indexed, unsigned immediate), for bit 0:11 of section …\nSection table index\nNo relocation required\n32 bit address\n32 bit address w/o image base\nThumb: BLX immediate\nThumb: 2 11 bit offsets\nThumb: 32-bit conditional B\n24 bit offset &lt;&lt; 2 &amp; sign ext.\nThumb: 32-bit B or BL\nGP-relative addressing (ARM)\nGP-relative addressing (Thumb)\nARM: MOVW/MOVT (deprecated)\nARM: MOVW/MOVT\nThumb: MOVW/MOVT\n32-bit relative address from byte following reloc\nOffset within section\nSection table index\nclr token\nReference is absolute, no relocation is necessary\n32-bit address (VA).\n32-bit address w/o image base (RVA).\n64-bit address (VA).\n32 bit offset from base of section containing target\nSection index\n32 bit metadata token\nReference is absolute, no relocation is necessary\n32-bit address (VA).\n32-bit address w/o image base (RVA).\n64-bit address (VA).\n32 bit offset from base of section containing target\nSection index\n32 bit metadata token\nNo relocation required\n32 bit address w/o image base\n32-bit relative address from byte following reloc\nOffset within section\nSection table index\nReference is absolute, no relocation is necessary\nDirect 16-bit reference to the symbols virtual address\nDirect 32-bit reference to the symbols virtual address\nDirect 32-bit reference to the symbols virtual address, …\nPC-relative 16-bit reference to the symbols virtual address\nPC-relative 32-bit reference to the symbols virtual address\n7 bit offset from base of section containing target\nDirect 16-bit reference to the segment-selector bits of a …\nclr token\nIf possible, convert to MBB bundle with NOP.B in slot 1\nIf possible, convert to MFB bundle with NOP.F in slot 1\nIf possible, convert to MIB bundle with NOP.I in slot 1\nIf possible, convert to MMB bundle with NOP.M in slot 1\nThis is always a BRL and never converted\nclr token\nNo relocation required\n24 bit address\n32 bit address\n32 bit address w/o image base\nGP relative addressing\nLink HI and LO\n16 bit offset &lt;&lt; 2 &amp; sign ext.\n24 bit offset &lt;&lt; 2 &amp; sign ext.\n8 bit offset &lt;&lt; 2 &amp; sign ext.\n16 MSBs\n16 MSBs; adj for LSB sign ext.\n16 LSBs\n32 bit section relative reference\nSection table index\nclr token\nReference is absolute, no relocation is necessary\nHigh 16-bit section relative reference (used for &gt;32k TLS)\nLow 16-bit section relative reference (used for &gt;32k TLS)\nclr token\nNOP\n16-bit address, shifted left 2 (load doubleword)\n16-bit address\n26-bit address, shifted left 2 (branch absolute)\n32-bit address\n32-bit addr w/o image base\n64-bit address\nfix branch prediction bit to predict branch not taken\nfix branch prediction bit to predict branch taken\nsubstitute TOC restore instruction iff symbol is glue code\nsymbol is glue code; virtual address is TOC restore …\nsubtract reloc value rather than adding it\n16-bit PC-relative offset, shifted left 2 (br cond …\n26-bit PC-relative offset, shifted left 2 (branch relative)\nva of containing section (as in an image sectionhdr)\nva of containing section (limited to 16 bits)\nHigh 16-bit section relative reference (used for &gt;32k TLS)\nLow 16-bit section relative reference (used for &gt;32k TLS)\nsectionheader number\ntoc slot defined in file (or, data in toc)\n16-bit offset from TOC base, shifted left 2 (load …\n16-bit offset from TOC base\nclr token\nmask to isolate above values in IMAGE_RELOCATION.Type\nNo relocation\n16 bit direct\n32 bit direct\n32 bit direct not based\n4 bit direct (0 ext.)\n4 bit direct .L (0 ext.)\n4 bit direct .W (0 ext.)\n8 bit direct, -128..255\n8 bit direct .L (0 ext.)\n8 bit direct .W (0 ext.)\nGP-relative addressing\n12 LSB PC relative .W\n8 bit PC relative .L\n8 bit PC relative .W\nOffset within section\nSection table index\nSize of EXE section\nStart of EXE section\nclr token\noffset operand for relocation\nOffset from current instruction in longwords if not …\nHigh bits of 32-bit address\nLow bits of 32-bit address\nHigh bits of relative reference\nLow bits of relative reference\nrelocation ignores section mode\nThumb: BLX immediate (deprecated)\nThumb: 32-bit conditional B (deprecated)\nThumb: 32-bit B or BL (deprecated)\nThumb: MOVW/MOVT (deprecated)\nDefault alignment if no others are specified.\nSection contains code.\nSection contains initialized data.\nSection contains uninitialized data.\nSection content can be accessed relative to GP\nSection contents comdat.\nSection contains comments or some other type of …\nSection contains extended relocations.\nReserved.\nSection contents will not become part of image.\nSection can be discarded.\nSection is executable.\nSection is not cacheable.\nSection is not pageable.\nSection is readable.\nSection is shareable.\nSection is writeable.\nReset speculative exceptions handling bits in the TLB …\nTls index is scaled\nReserved.\nwhen DBG was updated, the old checksum didn’t match.\nImage doesn’t require a subsystem.\nimage is a native Win9x driver.\nimage runs in the OS/2 character subsystem.\nimage runs in the Posix character subsystem.\nUnknown subsystem.\nImage runs in the Windows CE subsystem.\nImage runs in the Windows character subsystem.\nImage runs in the Windows GUI subsystem.\nSymbol is an absolute value.\nSymbol is a special debug item.\narray.\nfunction.\nno derived type.\npointer.\nValues 0xFF00-0xFFFF are special\ntype character.\nenumeration.\nmember of enumeration.\nno type.\ntype short integer.\nSymbol is undefined or is common.\nLE\nImport name == public symbol name.\nImport name == a name is explicitly provided after the DLL …\nImport name == public symbol name skipping leading ?, @, …\nImport name == public symbol name skipping leading ?, @, …\nImport by ordinal\nAuxiliary symbol format 1: function definitions.\nAuxiliary symbol format 2: .bf and .ef symbols.\nAuxiliary symbol format 5: sections.\nAuxiliary symbol format 3: weak externals.\nDOS .EXE header\nOS/2 .EXE header\nWindows VXD header\nA PE rich header entry.\nID for: Accelerator table.\nID for: Animated cursor.\nID for: Animated icon.\nID for: Bitmap resource.\nID for: Hardware-dependent cursor resource.\nID for: Dialog box.\nID for: Allows a resource editing tool to associate a …\nID for: Font resource.\nID for: Font directory resource.\nID for: Hardware-independent cursor resource.\nID for: Hardware-independent icon resource.\nID for: HTML resource.\nID for: Hardware-dependent icon resource.\nID for: Side-by-Side Assembly Manifest.\nID for: Menu resource.\nID for: Message-table entry.\nID for: Plug and Play resource.\nID for: Application-defined resource (raw data).\nID for: String-table entry.\nID for: Version resource.\nID for: VXD.\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nIntel-IA64-Filler\nPIMAGE_TLS_CALLBACK *;\nPIMAGE_TLS_CALLBACK *\nRVA from base of image\nPDWORD\nPDWORD\nRVA from base of image\nRVA from base of image\nReturn the virtual address range of this directory entry.\nIMAGE_AUX_SYMBOL_TYPE\nRVA to an optional bound IAT\nVersion 2 and later\nVersion 2 and later\n0xFFFF means not available\nchecksum for communal\nVA\nUsed to invoke CoCreateInstance\nUsed to invoke CoCreateInstance\nMust be <code>ANON_OBJECT_HEADER_BIGOBJ_CLASS_ID</code>.\nReturn the section alignment in bytes.\nReturn the section data in a COFF file.\nReturn the offset and size of the section in a COFF file.\nRead the relocations in a COFF file.\nTests whether a given RVA is part of this section\nGet the data referenced by this directory entry.\nReturns the data associated to this directory entry.\nReturns the section offset of the associated table or data.\ntype of misc data, see defines\nFile member date - decimal.\nRVA to the name of the target library (NULL-terminate …\nVA\nVA\nObject # for automatic data object\nThe byte ordering for the VXD\nSize of Non-resident Name Table\nThe CPU type\nOffset of Enumerated Data Pages\nDDK version for VxD\nOffset of the debugging information\nThe length of the debugging info. in bytes\nDevice ID for VxD\nNumber of module directives\nOffset of Module Directive Table\nExtended instruction pointer\nOffset of Entry Table\nExtended stack pointer\nFixup section size\nFixup section checksum\nOffset of Fixup Page Table\nOffset of Fixup Record Table\nSize of heap - for 16-bit apps\nOffset of Import Module Name Table\nNumber of entries in Import Module Name Table\nOffset of Import Procedure Name Table\nNumber of instance pages in demand load section of VXD file\nNumber of instance pages in preload section of VXD file\nObject iterated data map offset\nLast page size in VXD\nLoader section size\nLoader section checksum\nThe EXE format level for now = 0\nMagic number\nModule flags\nModule # pages\nNon-resident Name Table Checksum\nOffset of Non-resident Names Table\nNumber of objects in module\nObject page map offset\nObject table offset\nThe OS type\nVXD page size\nOffset of Per-Page Checksum Table\nNumber of preload pages\nReserved words\nOffset of resident name table\nNumber of resource entries\nOffset of Resource Table\nObject # for stack pointer\nObject # for instruction pointer\nModule version\nThe word ordering for the VXD\nBytes on last page of file\nPages in file\nSize of header in paragraphs\nRelocations\nInitial (relative) CS value\nChecksum\nInitial IP value\nFile address of new exe header\nFile address of relocation table\nMagic number\nMaximum extra paragraphs needed\nMinimum extra paragraphs needed\nOEM identifier (for e_oeminfo)\nOEM information; e_oemid specific\nOverlay number\nReserved words\nReserved words\nInitial SP value\nInitial (relative) SS value\nVA\nVA\nVA\nVA\nString to end header.\nVersion 3 and later\nReturn the file offset and size of this directory entry.\nRVA to IAT (if bound this IAT has actual addresses)\nRVA of instruction to fixup\n0x1 -&gt; contains metadata\n0x1 -&gt; contains metadata\nFlags to indicate if CI information is available, etc.\n-1 if no forwarders\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFile member group id - decimal.\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nVA\nReturns true if the entry has a name, rather than an ID.\nhigh bits of the section number\nRVA to the start of the IAT (PIMAGE_THUNK_DATA)\nRVA to the start of the name table …\nThe type of import.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTell whether this import descriptor is the null descriptor …\nTell whether this delay-load import descriptor is the null …\nReturns true if the entry is a subtable.\nsection length\ntotal length of record, rounded to four byte multiple.\ndeclaration line number\nLine number.\nVA\nVA\nActual machine - IMAGE_FILE_MACHINE_xxx\nOffset of CLR metadata\nOffset of CLR metadata\nSize of CLR metadata\nSize of CLR metadata\nFile member mode - octal.\nRVA to the HMODULE caching location (PHMODULE)\nReturn the section name.\nIf first 4 bytes are 0, then second 4 bytes are offset …\nIf first 4 bytes are 0, then second 4 bytes are offset …\nFile member name - `/’ terminated.\nReturn the string table offset of the section name.\nReturns the entry name\nThe type of import name.\nSegment alignment shift count\nAutomatic data segment number\nNumber of bytes in Entry Table\nSize of non-resident name table\nEntries in Module Reference Table\nCount of movable entries\nChecksum of whole file\nCount of resource segments\nCount of file segments\nInitial CS:IP setting\nOffset of Entry Table")