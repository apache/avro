searchState.loadedDescShard("digest", 0, "This crate provides traits which describe functionality of …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nBuffer length is not equal to hash output size.\nThe error type used in variable hash traits.\nMaximum size of output hash.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new hasher instance.\nCreate new hasher instance with the given output size.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.")