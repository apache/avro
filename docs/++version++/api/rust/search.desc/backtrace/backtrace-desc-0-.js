searchState.loadedDescShard("backtrace", 0, "A library for acquiring a backtrace at runtime\nRepresentation of an owned and self-contained backtrace.\nA formatter for backtraces.\nCaptured version of a frame in a backtrace.\nA formatter for just one frame of a backtrace.\nCaptured version of a symbol in a backtrace.\nA slice, typically provided on Unix platforms.\nA platform independent representation of a string. When …\nA trait representing one frame of a backtrace, yielded to …\nPrints a backtrace that contains all possible information\nThe styles of printing that we can print\nPrints a terser backtrace which ideally only contains …\nA trait representing the resolution of a symbol in a file.\nA wrapper around a symbol name to provide ergonomic …\nWide strings typically from Windows.\nPrints a preamble for the backtrace about to be printed.\nReturns the starting address of this function.\nSame as <code>Symbol::addr</code>\nReturns the raw symbol name as a list of bytes\nReturns the raw (mangled) symbol name as a <code>str</code> if the …\nPrints a <code>BacktraceFrame</code> with this frame formatter.\nPrints a <code>BacktraceSymbol</code> within a <code>BacktraceFrame</code>.\nAttempt to reclaim that cached memory used to symbolicate …\nReturns the column number for where this symbol is …\nSame as <code>Symbol::colno</code>\nReturns the file name where this function was defined.\nSame as <code>Symbol::filename</code>\nReturns the raw filename as a slice. This is mainly useful …\nCompletes the backtrace output.\nReturn the inner formatter.\nAdds a frame to the backtrace output.\nReturns the frames from when this backtrace was captured.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a <code>Path</code> representation of <code>BytesOrWideString</code>.\nReturns the current instruction pointer of this frame.\nSame as <code>Frame::ip</code>\nReturns the line number for where this symbol is currently …\nSame as <code>Symbol::lineno</code>\nInserts a message in the backtrace output.\nReturns the base address of the module to which the frame …\nSame as <code>Frame::module_base_address</code>\nReturns the name of this function.\nSame as <code>Symbol::name</code>\nCreates a new symbol name from the raw underlying bytes.\nCreate a new <code>BacktraceFmt</code> which will write output to the …\nCaptures a backtrace at the callsite of this function, …\nSimilar to <code>new</code> except that this does not resolve any …\nAdds a raw frame to the backtrace output.\nAdds a raw frame to the backtrace output, including column …\nResolve an address to a symbol, passing the symbol to the …\nIf this backtrace was created from <code>new_unresolved</code> then …\nResolve all addresses in this frame to their symbolic …\nResolve a previously captured frame to a symbol, passing …\nSame as <code>resolve_frame</code>, only unsafe as it’s …\nSame as <code>resolve</code>, only unsafe as it’s unsynchronized.\nReturns the current stack pointer of this frame.\nPrints a raw traced <code>Frame</code> and <code>Symbol</code>, typically from …\nReturns the starting symbol address of the frame of this …\nSame as <code>Frame::symbol_address</code>\nReturns the list of symbols that this frame corresponds to.\nLossy converts to a <code>Cow&lt;str&gt;</code>, will allocate if <code>Bytes</code> is …\nInspects the current call-stack, passing all active frames …\nSame as <code>trace</code>, only unsafe as it’s unsynchronized.")