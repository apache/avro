searchState.loadedDescShard("liblzma", 0, "LZMA/XZ encoding and decoding streams\nI/O streams for wrapping <code>BufRead</code> types as encoders/decoders\nDecompress all data from the given source as if using a …\nCompress all data from the given source as if using a …\nDecompress from the given source as if using a …\nCompress from the given source as if using a …\nReader-based compression/decompression streams\nRaw in-memory LZMA streams.\nWriter-based compression/decompression streams\nA xz decoder, or decompressor.\nA xz encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nCreates a new decoder which will decompress data read from …\nCreates a new encoder with a custom <code>Stream</code>.\nCreates a new decoder with a custom <code>Stream</code>.\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes produced by the compressor …\nReturns the number of bytes that the decompressor has …\nA decompression stream which wraps a compressed stream of …\nA compression stream which wraps an uncompressed stream of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the underlying writer, finishing the compression …\nUnwrap the underlying writer, finishing the compression …\nCreate a new compression stream which will compress at the …\nCreate a new decompression stream, which will read …\nCreate a new decompression stream, which will read …\nCreates a new encoder with a custom <code>Stream</code>.\nCreates a new decoder with a custom <code>Stream</code>.\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes consumed by the decompressor …\nReturns the number of bytes produced by the compressor …\nReturns the number of bytes produced by the decompressor …\nThe <code>action</code> argument for <code>Stream::process</code>,\nBinary Tree with 2-byte hashing\nBinary Tree with 2- and 3-byte hashing\nBinary Tree with 2-, 3-, and 4-byte hashing\nA flag passed when initializing a decoder, indicates that …\nPossible integrity checks that can be part of a .xz stream.\nThe underlying data was corrupt.\nPossible error codes that can be returned from a …\nFast compression.\nA custom chain of filters to configure an encoding stream.\nFinish the current operation\nFile format wasn’t recognized.\nFinish encoding of the current block.\nFinish encoding of the current block.\nIf the TELL_ANY_CHECK flags is specified when constructing …\nHash Chain with 2- and 3-byte hashing\nHash Chain with 2-, 3-, and 4-byte hashing\nA flag passed when initializing a decoder, causes the …\nOptions that can be used to configure how LZMA encoding …\nMatch finders\nMemory couldn’t be allocated.\nMemory usage limit was reached.\nAn error has not been encountered, but no progress is …\nCompression modes\nThe <code>TELL_NO_CHECK</code> flag was specified and no integrity …\nNormal compression.\nOperation completed successfully.\nInvalid or unsupported options were specified.\nA programming error was encountered.\nContinue processing\nReturn value of a <code>Stream::process</code> operation.\nRepresentation of an in-memory LZMA encoding or decoding …\nEnd of stream was reached.\nMake all the input available at output\nA flag passed when initializing a decoder, causes …\nA flag passed when initializing a decoder, causes …\nA flag passed when initializing a decoder, causes …\nThe <code>TELL_UNSUPPORTED_CHECK</code> flag was specified and no …\nAdd a filter for ARM binaries.\nAdd a filter for ARM64 binaries.\nAdd a filter for ARM64 binaries with properties.\nAdd a filter for ARM binaries with properties.\nAdd a filter for ARM-Thumb binaries.\nAdd a filter for ARM-Thumb binaries with properties.\nAdd a DELTA filter.\nAdd a DELTA filter with properties.\nMaximum search depth in the match finder.\nConfigures the dictionary size, in bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a filter for IA-64 (itanium) binaries.\nAdd a filter for IA-64 (itanium) binaries with properties.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if this check is supported in this build of liblzma.\nTest if this match finder is supported in this build of …\nConfigures the number of literal context bits.\nConfigures the number of literal position bits.\nAdd an LZMA1 filter.\nAdd an LZMA1 filter with properties.\nAdd an LZMA2 filter.\nAdd an LZMA2 filter with properties.\nConfigures the match finder ID.\nGet the current memory usage limit.\nConfigures the compression mode.\nCreates a new blank set of options.\nCreates a new filter chain with no filters.\nInitialize a decoder which will choose a stream/lzma …\nInitialize .xz stream encoder using a preset number\nInitialize a .lz stream decoder.\nInitialize a .lzma stream decoder.\nInitialize .lzma encoder (legacy file format)\nCreates a new blank set of options for encoding.\nInitialize a decoder stream using a custom filter chain.\nInitialize an encoder stream using a custom filter chain.\nInitialize a .xz stream decoder.\nInitialize .xz Stream encoder using a custom filter chain\nConfigures the nice length of a match.\nConfigures the number of position bits.\nAdd a filter for PowerPC binaries.\nAdd a filter for PowerPC binaries with properties.\nProcesses some data from input into an output buffer.\nSame as <code>Self::process</code> but accepts uninitialized buffer.\nPerforms the same data as <code>Stream::process</code>, but places …\nAdd a filter for RISCV binaries.\nAdd a filter for RISCV binaries with properties.\nSet the current memory usage limit.\nAdd a filter for SPARC binaries.\nAdd a filter for SPARC binaries with properties.\nReturns the total amount of input bytes consumed by this …\nReturns the total amount of bytes produced by this stream.\nAdd a filter for x86 binaries.\nAdd a filter for x86 binaries with properties.\nA compression stream which will have compressed data …\nA compression stream which will have uncompressed data …\nA compression stream which will have compressed data …\nA compression stream which will have uncompressed data …\nConvert to AutoFinishXzEncoder that impl Drop trait. …\nConvert to AutoFinishXzDecoder that impl Drop trait. …\nConsumes this encoder, flushing the output stream.\nConsumes this decoder, flushing the output stream.\nConsumes this encoder, finishing the compression stream.\nConsumes this decoder, finishing the decompression stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new compression stream which will compress at the …\nCreates a new decoding stream which will decode into <code>obj</code> …\nCreates a new decoding stream which will decode into <code>obj</code> …\nCreate a new encoder which will use the specified <code>Stream</code> …\nCreates a new decoding stream which will decode all input …\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes consumed by the decompressor …\nReturns the number of bytes consumed by the compressor …\nReturns the number of bytes consumed by the decompressor …\nReturns the number of bytes produced by the compressor\nReturns the number of bytes produced by the decompressor\nReturns the number of bytes produced by the compressor\nReturns the number of bytes produced by the decompressor\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …")