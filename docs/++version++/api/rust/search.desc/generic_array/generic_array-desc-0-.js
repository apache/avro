searchState.loadedDescShard("generic_array", 0, "This crate implements a structure that can be used as a …\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nExtracts a mutable slice containing the entire array.\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nReturns the argument unchanged.\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …")