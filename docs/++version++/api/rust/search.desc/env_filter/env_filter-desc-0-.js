searchState.loadedDescShard("env_filter", 0, "Filtering for log records.\nA builder for a log filter.\nA log filter.\nDecorate a <code>log::Log</code> with record <code>Filter</code>ing.\nError during logger directive parsing process.\nBuild a log filter.\nDetermines if a log message with the specified metadata …\nDetermines if a log message with the specified metadata …\nAdds a directive to the filter.\nReturns the maximum <code>LevelFilter</code> that this filter instance …\nAdds a directive to the filter for all modules.\nAdds a directive to the filter for a specific module.\nFlushes any buffered records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the filter builder from an environment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs the record.\nChecks if this record matches the configured filter.\nInitializes the filter builder with defaults.\nCreate a new filtered log.\nParses the directives string.\nParses the directive string, returning an error if the …")