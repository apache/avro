searchState.loadedDescShard("rand_core", 0, "Random number generation traits\nA marker trait over <code>RngCore</code> for securely unpredictable RNGs\nThe type returned in the event of a RNG error.\nError type of <code>OsRng</code>\nAn interface over the operating-system’s random data …\nImplementation-level interface for RNGs\nAdapter that enables reading through a <code>io::Read</code> from a …\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nA marker trait over <code>TryRngCore</code> for securely unpredictable …\nA potentially fallible variant of <code>RngCore</code>\nWrapper around <code>TryRngCore</code> implementation which implements …\nWrapper around <code>TryRngCore</code> implementation which implements …\nThe <code>BlockRngCore</code> trait and implementation helpers\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from an infallible <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nReborrow with a new lifetime\nConvert an <code>RngCore</code> to a <code>RngReadAdapter</code>.\nCreate a new PRNG using a <code>u64</code> seed.\nFill <code>dest</code> entirely with random data.\nCreates a new instance of the RNG seeded via <code>getrandom</code> …\nCreate a new PRNG seeded from a potentially fallible <code>Rng</code>.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nWrap RNG with the <code>UnwrapErr</code> wrapper.\nWrap RNG with the <code>UnwrapMut</code> wrapper.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nA marker trait used to indicate that an <code>RngCore</code> …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.")