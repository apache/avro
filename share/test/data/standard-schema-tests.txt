# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

// NOTE: the Java implementation provides a slow-but-direct implementation
// of the fingerpriting algorithm which is used to cross-check the
// "fingerprint" values below.  Thus, the Java unit-tests provide validation
// for these values, so other languages can just assume they are correct.


// 000
<<INPUT "null"
<<canonical "null"

// 001
<<INPUT {"type":"null"}
<<canonical "null"

// 002
<<INPUT "boolean"
<<canonical "boolean"

// 003
<<INPUT {"type":"boolean"}
<<canonical "boolean"

// 004
<<INPUT "int"
<<canonical "int"

// 005
<<INPUT {"type":"int"}
<<canonical "int"

// 006
<<INPUT "long"
<<canonical "long"

// 007
<<INPUT {"type":"long"}
<<canonical "long"

// 008
<<INPUT "float"
<<canonical "float"

// 009
<<INPUT {"type":"float"}
<<canonical "float"

// 010
<<INPUT "double"
<<canonical "double"

// 011
<<INPUT {"type":"double"}
<<canonical "double"

// 012
<<INPUT "bytes"
<<canonical "bytes"

// 013
<<INPUT {"type":"bytes"}
<<canonical "bytes"

// 014
<<INPUT "string"
<<canonical "string"

// 015
<<INPUT {"type":"string"}
<<canonical "string"

// 016
<<INPUT [  ]
<<canonical []

// 017
<<INPUT [ "int"  ]
<<canonical ["int"]

// 018
<<INPUT [ "int" , {"type":"boolean"} ]
<<canonical ["int","boolean"]

// 019
<<INPUT {"fields":[], "type":"record", "name":"foo"}
<<canonical {"name":"foo","type":"record","fields":[]}

// 020
<<INPUT {"fields":[], "type":"record", "name":"foo", "namespace":"x.y"}
<<canonical {"name":"x.y.foo","type":"record","fields":[]}

// 021
<<INPUT {"fields":[], "type":"record", "name":"a.b.foo", "namespace":"x.y"}
<<canonical {"name":"a.b.foo","type":"record","fields":[]}

// 022
<<INPUT {"fields":[], "type":"record", "name":"foo", "doc":"Useful info"}
<<canonical {"name":"foo","type":"record","fields":[],"doc":"Useful info"}

// 023
<<INPUT {"fields":[], "type":"record", "name":"foo", "aliases":["foo","bar"]}
<<canonical {"name":"foo","type":"record","fields":[],"aliases":["bar","foo"]}

// 024
<<INPUT {"fields":[], "type":"record", "name":"foo", "doc":"foo", "aliases":["foo","bar"]}
<<canonical {"name":"foo","type":"record","fields":[],"doc":"foo","aliases":["bar","foo"]}

// 025
<<INPUT {"fields":[{"type":{"type":"boolean"}, "name":"f1"}], "type":"record", "name":"foo"}
<<canonical {"name":"foo","type":"record","fields":[{"name":"f1","type":"boolean","order":"ASCENDING"}]}

// 026
<<INPUT
{ "fields":[{"type":"boolean", "aliases":[], "name":"f1", "default":true},
            {"order":"descending","name":"f2","doc":"Hello","type":"int"}],
  "type":"record", "name":"foo"
}
INPUT
<<canonical {"name":"foo","type":"record","fields":[{"name":"f1","type":"boolean","order":"ASCENDING","default":true},{"name":"f2","type":"int","order":"DESCENDING","doc":"Hello"}]}

// 027
<<INPUT {"type":"enum", "name":"foo", "symbols":["A1"]}
<<canonical {"name":"foo","type":"enum","symbols":["A1"]}

// 028
<<INPUT {"namespace":"x.y.z", "type":"enum", "name":"foo", "doc":"foo bar", "symbols":["A1", "A2"]}
<<canonical {"name":"x.y.z.foo","type":"enum","symbols":["A1","A2"],"doc":"foo bar"}

// 029
// <<INPUT {"type":"fixed", "name":"foo", "size":015} -- Avro parser broken???
<<INPUT {"name":"foo","type":"fixed","size":15}
<<canonical {"name":"foo","type":"fixed","size":15}

// 030
<<INPUT {"namespace":"x.y.z", "type":"fixed", "name":"foo", "doc":"foo bar", "size":32}
<<canonical {"name":"x.y.z.foo","type":"fixed","size":32,"doc":"foo bar"}

// 031
<<INPUT { "items":{"type":"null"}, "type":"array"}
<<canonical {"type":"array","items":"null"}

// 032
<<INPUT { "values":"string", "type":"map"}
<<canonical {"type":"map","values":"string"}

// 033
<<INPUT
  {"name":"PigValue","type":"record",
   "fields":[{"name":"value", "type":["null", "int", "long", "PigValue"]}]}
INPUT
<<canonical {"name":"PigValue","type":"record","fields":[{"name":"value","type":["null","int","long","PigValue"],"order":"ASCENDING"}]}

// 034
<<INPUT {"namespace":"x.y.z", "type":"enum", "name":"foo", "doc":"foo bar", "symbols":["SPADES", "HEARTS", "DIAMONDS", "CLUBS"], "default": "HEARTS"}
<<canonical {"name":"x.y.z.foo","type":"enum","symbols":["SPADES","HEARTS","DIAMONDS","CLUBS"],"doc":"foo bar","default":"HEARTS"}

// 035
<<INPUT {"type":"bytes", "logicalType":"decimal", "precision": 4, "scale": 2}
<<canonical {"type":"bytes","logicalType":"decimal","precision":4,"scale":2}

// 036
<<INPUT {"type": "fixed", "size": 16, "name": "x", "logicalType": "decimal", "precision": 4, "scale": 2}
<<canonical {"name":"x","type":"fixed","size":16,"logicalType":"decimal","precision":4,"scale":2}
